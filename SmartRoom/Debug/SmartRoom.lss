
SmartRoom.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001fe2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000250  00800060  00001fe2  00002076  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000027b  008002b0  008002b0  000022c6  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000022c6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00002324  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000370  00000000  00000000  00002360  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003c04  00000000  00000000  000026d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001019  00000000  00000000  000062d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001ccb  00000000  00000000  000072ed  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000a08  00000000  00000000  00008fb8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000105b  00000000  00000000  000099c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002bbf  00000000  00000000  0000aa1b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000350  00000000  00000000  0000d5da  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 30 00 	jmp	0x60	; 0x60 <__ctors_end>
       4:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
       8:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
       c:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
      10:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
      14:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
      18:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
      1c:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
      20:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
      24:	0c 94 f9 08 	jmp	0x11f2	; 0x11f2 <__vector_9>
      28:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
      2c:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
      30:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
      34:	0c 94 20 09 	jmp	0x1240	; 0x1240 <__vector_13>
      38:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
      3c:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
      40:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
      44:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
      48:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
      4c:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
      50:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>

00000054 <__trampolines_end>:
      54:	63 64       	ori	r22, 0x43	; 67
      56:	69 6e       	ori	r22, 0xE9	; 233
      58:	6f 70       	andi	r22, 0x0F	; 15
      5a:	73 75       	andi	r23, 0x53	; 83
      5c:	78 58       	subi	r23, 0x88	; 136
      5e:	5b 00       	.word	0x005b	; ????

00000060 <__ctors_end>:
      60:	11 24       	eor	r1, r1
      62:	1f be       	out	0x3f, r1	; 63
      64:	cf e5       	ldi	r28, 0x5F	; 95
      66:	d8 e0       	ldi	r29, 0x08	; 8
      68:	de bf       	out	0x3e, r29	; 62
      6a:	cd bf       	out	0x3d, r28	; 61

0000006c <__do_copy_data>:
      6c:	12 e0       	ldi	r17, 0x02	; 2
      6e:	a0 e6       	ldi	r26, 0x60	; 96
      70:	b0 e0       	ldi	r27, 0x00	; 0
      72:	e2 ee       	ldi	r30, 0xE2	; 226
      74:	ff e1       	ldi	r31, 0x1F	; 31
      76:	02 c0       	rjmp	.+4      	; 0x7c <__do_copy_data+0x10>
      78:	05 90       	lpm	r0, Z+
      7a:	0d 92       	st	X+, r0
      7c:	a0 3b       	cpi	r26, 0xB0	; 176
      7e:	b1 07       	cpc	r27, r17
      80:	d9 f7       	brne	.-10     	; 0x78 <__do_copy_data+0xc>

00000082 <__do_clear_bss>:
      82:	25 e0       	ldi	r18, 0x05	; 5
      84:	a0 eb       	ldi	r26, 0xB0	; 176
      86:	b2 e0       	ldi	r27, 0x02	; 2
      88:	01 c0       	rjmp	.+2      	; 0x8c <.do_clear_bss_start>

0000008a <.do_clear_bss_loop>:
      8a:	1d 92       	st	X+, r1

0000008c <.do_clear_bss_start>:
      8c:	ab 32       	cpi	r26, 0x2B	; 43
      8e:	b2 07       	cpc	r27, r18
      90:	e1 f7       	brne	.-8      	; 0x8a <.do_clear_bss_loop>
      92:	0e 94 af 08 	call	0x115e	; 0x115e <main>
      96:	0c 94 ef 0f 	jmp	0x1fde	; 0x1fde <_exit>

0000009a <__bad_interrupt>:
      9a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000009e <Dec2bcd>:
      9e:	9a e1       	ldi	r25, 0x1A	; 26
      a0:	89 9f       	mul	r24, r25
      a2:	90 01       	movw	r18, r0
      a4:	11 24       	eor	r1, r1
      a6:	93 2f       	mov	r25, r19
      a8:	99 0f       	add	r25, r25
      aa:	93 0f       	add	r25, r19
      ac:	99 0f       	add	r25, r25
      ae:	89 0f       	add	r24, r25
      b0:	08 95       	ret

000000b2 <RTC_Status>:
      b2:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__RTC_Status>
      b6:	08 95       	ret

000000b8 <RTC_WriteBlock>:
      b8:	ef 92       	push	r14
      ba:	ff 92       	push	r15
      bc:	0f 93       	push	r16
      be:	1f 93       	push	r17
      c0:	cf 93       	push	r28
      c2:	df 93       	push	r29
      c4:	c8 2f       	mov	r28, r24
      c6:	7b 01       	movw	r14, r22
      c8:	14 2f       	mov	r17, r20
      ca:	0e 94 7e 03 	call	0x6fc	; 0x6fc <TWI_BeginTransmission>
      ce:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <TWI_Status>
      d2:	88 30       	cpi	r24, 0x08	; 8
      d4:	29 f0       	breq	.+10     	; 0xe0 <RTC_WriteBlock+0x28>
      d6:	80 31       	cpi	r24, 0x10	; 16
      d8:	19 f0       	breq	.+6      	; 0xe0 <RTC_WriteBlock+0x28>
      da:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__RTC_Status>
      de:	32 c0       	rjmp	.+100    	; 0x144 <RTC_WriteBlock+0x8c>
      e0:	80 ed       	ldi	r24, 0xD0	; 208
      e2:	0e 94 8c 03 	call	0x718	; 0x718 <TWI_Transmit>
      e6:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <TWI_Status>
      ea:	88 31       	cpi	r24, 0x18	; 24
      ec:	29 f0       	breq	.+10     	; 0xf8 <RTC_WriteBlock+0x40>
      ee:	80 32       	cpi	r24, 0x20	; 32
      f0:	19 f0       	breq	.+6      	; 0xf8 <RTC_WriteBlock+0x40>
      f2:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__RTC_Status>
      f6:	26 c0       	rjmp	.+76     	; 0x144 <RTC_WriteBlock+0x8c>
      f8:	8c 2f       	mov	r24, r28
      fa:	0e 94 8c 03 	call	0x718	; 0x718 <TWI_Transmit>
      fe:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <TWI_Status>
     102:	88 32       	cpi	r24, 0x28	; 40
     104:	19 f4       	brne	.+6      	; 0x10c <RTC_WriteBlock+0x54>
     106:	11 11       	cpse	r17, r1
     108:	06 c0       	rjmp	.+12     	; 0x116 <RTC_WriteBlock+0x5e>
     10a:	19 c0       	rjmp	.+50     	; 0x13e <RTC_WriteBlock+0x86>
     10c:	80 33       	cpi	r24, 0x30	; 48
     10e:	d9 f3       	breq	.-10     	; 0x106 <RTC_WriteBlock+0x4e>
     110:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__RTC_Status>
     114:	17 c0       	rjmp	.+46     	; 0x144 <RTC_WriteBlock+0x8c>
     116:	e7 01       	movw	r28, r14
     118:	11 50       	subi	r17, 0x01	; 1
     11a:	01 2f       	mov	r16, r17
     11c:	10 e0       	ldi	r17, 0x00	; 0
     11e:	0f 5f       	subi	r16, 0xFF	; 255
     120:	1f 4f       	sbci	r17, 0xFF	; 255
     122:	0e 0d       	add	r16, r14
     124:	1f 1d       	adc	r17, r15
     126:	89 91       	ld	r24, Y+
     128:	0e 94 8c 03 	call	0x718	; 0x718 <TWI_Transmit>
     12c:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <TWI_Status>
     130:	88 32       	cpi	r24, 0x28	; 40
     132:	11 f0       	breq	.+4      	; 0x138 <RTC_WriteBlock+0x80>
     134:	80 33       	cpi	r24, 0x30	; 48
     136:	19 f4       	brne	.+6      	; 0x13e <RTC_WriteBlock+0x86>
     138:	c0 17       	cp	r28, r16
     13a:	d1 07       	cpc	r29, r17
     13c:	a1 f7       	brne	.-24     	; 0x126 <RTC_WriteBlock+0x6e>
     13e:	81 e0       	ldi	r24, 0x01	; 1
     140:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__RTC_Status>
     144:	0e 94 86 03 	call	0x70c	; 0x70c <TWI_EndTransmission>
     148:	df 91       	pop	r29
     14a:	cf 91       	pop	r28
     14c:	1f 91       	pop	r17
     14e:	0f 91       	pop	r16
     150:	ff 90       	pop	r15
     152:	ef 90       	pop	r14
     154:	08 95       	ret

00000156 <RTC_ReadBlock>:
     156:	ff 92       	push	r15
     158:	0f 93       	push	r16
     15a:	1f 93       	push	r17
     15c:	cf 93       	push	r28
     15e:	df 93       	push	r29
     160:	d8 2f       	mov	r29, r24
     162:	8b 01       	movw	r16, r22
     164:	c4 2f       	mov	r28, r20
     166:	0e 94 7e 03 	call	0x6fc	; 0x6fc <TWI_BeginTransmission>
     16a:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <TWI_Status>
     16e:	88 30       	cpi	r24, 0x08	; 8
     170:	29 f0       	breq	.+10     	; 0x17c <RTC_ReadBlock+0x26>
     172:	80 31       	cpi	r24, 0x10	; 16
     174:	19 f0       	breq	.+6      	; 0x17c <RTC_ReadBlock+0x26>
     176:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__RTC_Status>
     17a:	5b c0       	rjmp	.+182    	; 0x232 <RTC_ReadBlock+0xdc>
     17c:	80 ed       	ldi	r24, 0xD0	; 208
     17e:	0e 94 8c 03 	call	0x718	; 0x718 <TWI_Transmit>
     182:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <TWI_Status>
     186:	88 31       	cpi	r24, 0x18	; 24
     188:	29 f0       	breq	.+10     	; 0x194 <RTC_ReadBlock+0x3e>
     18a:	80 32       	cpi	r24, 0x20	; 32
     18c:	19 f0       	breq	.+6      	; 0x194 <RTC_ReadBlock+0x3e>
     18e:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__RTC_Status>
     192:	4f c0       	rjmp	.+158    	; 0x232 <RTC_ReadBlock+0xdc>
     194:	8d 2f       	mov	r24, r29
     196:	0e 94 8c 03 	call	0x718	; 0x718 <TWI_Transmit>
     19a:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <TWI_Status>
     19e:	88 32       	cpi	r24, 0x28	; 40
     1a0:	29 f0       	breq	.+10     	; 0x1ac <RTC_ReadBlock+0x56>
     1a2:	80 33       	cpi	r24, 0x30	; 48
     1a4:	19 f0       	breq	.+6      	; 0x1ac <RTC_ReadBlock+0x56>
     1a6:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__RTC_Status>
     1aa:	43 c0       	rjmp	.+134    	; 0x232 <RTC_ReadBlock+0xdc>
     1ac:	0e 94 7e 03 	call	0x6fc	; 0x6fc <TWI_BeginTransmission>
     1b0:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <TWI_Status>
     1b4:	88 30       	cpi	r24, 0x08	; 8
     1b6:	29 f0       	breq	.+10     	; 0x1c2 <RTC_ReadBlock+0x6c>
     1b8:	80 31       	cpi	r24, 0x10	; 16
     1ba:	19 f0       	breq	.+6      	; 0x1c2 <RTC_ReadBlock+0x6c>
     1bc:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__RTC_Status>
     1c0:	38 c0       	rjmp	.+112    	; 0x232 <RTC_ReadBlock+0xdc>
     1c2:	81 ed       	ldi	r24, 0xD1	; 209
     1c4:	0e 94 8c 03 	call	0x718	; 0x718 <TWI_Transmit>
     1c8:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <TWI_Status>
     1cc:	87 7f       	andi	r24, 0xF7	; 247
     1ce:	80 34       	cpi	r24, 0x40	; 64
     1d0:	39 f4       	brne	.+14     	; 0x1e0 <RTC_ReadBlock+0x8a>
     1d2:	d0 e0       	ldi	r29, 0x00	; 0
     1d4:	21 97       	sbiw	r28, 0x01	; 1
     1d6:	1c 16       	cp	r1, r28
     1d8:	1d 06       	cpc	r1, r29
     1da:	2c f0       	brlt	.+10     	; 0x1e6 <RTC_ReadBlock+0x90>
     1dc:	f1 2c       	mov	r15, r1
     1de:	18 c0       	rjmp	.+48     	; 0x210 <RTC_ReadBlock+0xba>
     1e0:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__RTC_Status>
     1e4:	26 c0       	rjmp	.+76     	; 0x232 <RTC_ReadBlock+0xdc>
     1e6:	f1 2c       	mov	r15, r1
     1e8:	0e 94 95 03 	call	0x72a	; 0x72a <TWI_ReceiveACK>
     1ec:	f8 01       	movw	r30, r16
     1ee:	ef 0d       	add	r30, r15
     1f0:	f1 1d       	adc	r31, r1
     1f2:	80 83       	st	Z, r24
     1f4:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <TWI_Status>
     1f8:	87 7f       	andi	r24, 0xF7	; 247
     1fa:	80 35       	cpi	r24, 0x50	; 80
     1fc:	19 f0       	breq	.+6      	; 0x204 <RTC_ReadBlock+0xae>
     1fe:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__RTC_Status>
     202:	06 c0       	rjmp	.+12     	; 0x210 <RTC_ReadBlock+0xba>
     204:	f3 94       	inc	r15
     206:	8f 2d       	mov	r24, r15
     208:	90 e0       	ldi	r25, 0x00	; 0
     20a:	8c 17       	cp	r24, r28
     20c:	9d 07       	cpc	r25, r29
     20e:	64 f3       	brlt	.-40     	; 0x1e8 <RTC_ReadBlock+0x92>
     210:	e8 01       	movw	r28, r16
     212:	cf 0d       	add	r28, r15
     214:	d1 1d       	adc	r29, r1
     216:	0e 94 9c 03 	call	0x738	; 0x738 <TWI_ReceiveNACK>
     21a:	88 83       	st	Y, r24
     21c:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <TWI_Status>
     220:	87 7f       	andi	r24, 0xF7	; 247
     222:	80 35       	cpi	r24, 0x50	; 80
     224:	19 f0       	breq	.+6      	; 0x22c <RTC_ReadBlock+0xd6>
     226:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__RTC_Status>
     22a:	03 c0       	rjmp	.+6      	; 0x232 <RTC_ReadBlock+0xdc>
     22c:	81 e0       	ldi	r24, 0x01	; 1
     22e:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__RTC_Status>
     232:	0e 94 86 03 	call	0x70c	; 0x70c <TWI_EndTransmission>
     236:	df 91       	pop	r29
     238:	cf 91       	pop	r28
     23a:	1f 91       	pop	r17
     23c:	0f 91       	pop	r16
     23e:	ff 90       	pop	r15
     240:	08 95       	ret

00000242 <RTC_Set>:
     242:	af 92       	push	r10
     244:	bf 92       	push	r11
     246:	cf 92       	push	r12
     248:	df 92       	push	r13
     24a:	ef 92       	push	r14
     24c:	ff 92       	push	r15
     24e:	0f 93       	push	r16
     250:	1f 93       	push	r17
     252:	cf 93       	push	r28
     254:	df 93       	push	r29
     256:	cd b7       	in	r28, 0x3d	; 61
     258:	de b7       	in	r29, 0x3e	; 62
     25a:	28 97       	sbiw	r28, 0x08	; 8
     25c:	0f b6       	in	r0, 0x3f	; 63
     25e:	f8 94       	cli
     260:	de bf       	out	0x3e, r29	; 62
     262:	0f be       	out	0x3f, r0	; 63
     264:	cd bf       	out	0x3d, r28	; 61
     266:	a3 2e       	mov	r10, r19
     268:	b4 2e       	mov	r11, r20
     26a:	c5 2e       	mov	r12, r21
     26c:	d6 2e       	mov	r13, r22
     26e:	e7 2e       	mov	r14, r23
     270:	f8 2e       	mov	r15, r24
     272:	82 2f       	mov	r24, r18
     274:	0e 94 4f 00 	call	0x9e	; 0x9e <Dec2bcd>
     278:	0d eb       	ldi	r16, 0xBD	; 189
     27a:	12 e0       	ldi	r17, 0x02	; 2
     27c:	f8 01       	movw	r30, r16
     27e:	80 83       	st	Z, r24
     280:	8a 2d       	mov	r24, r10
     282:	0e 94 4f 00 	call	0x9e	; 0x9e <Dec2bcd>
     286:	f8 01       	movw	r30, r16
     288:	81 83       	std	Z+1, r24	; 0x01
     28a:	8b 2d       	mov	r24, r11
     28c:	0e 94 4f 00 	call	0x9e	; 0x9e <Dec2bcd>
     290:	f8 01       	movw	r30, r16
     292:	82 83       	std	Z+2, r24	; 0x02
     294:	8c 2d       	mov	r24, r12
     296:	0e 94 4f 00 	call	0x9e	; 0x9e <Dec2bcd>
     29a:	f8 01       	movw	r30, r16
     29c:	83 83       	std	Z+3, r24	; 0x03
     29e:	8d 2d       	mov	r24, r13
     2a0:	0e 94 4f 00 	call	0x9e	; 0x9e <Dec2bcd>
     2a4:	f8 01       	movw	r30, r16
     2a6:	84 83       	std	Z+4, r24	; 0x04
     2a8:	8e 2d       	mov	r24, r14
     2aa:	0e 94 4f 00 	call	0x9e	; 0x9e <Dec2bcd>
     2ae:	f8 01       	movw	r30, r16
     2b0:	85 83       	std	Z+5, r24	; 0x05
     2b2:	80 e3       	ldi	r24, 0x30	; 48
     2b4:	8f 0d       	add	r24, r15
     2b6:	0e 94 4f 00 	call	0x9e	; 0x9e <Dec2bcd>
     2ba:	f8 01       	movw	r30, r16
     2bc:	86 83       	std	Z+6, r24	; 0x06
     2be:	47 e0       	ldi	r20, 0x07	; 7
     2c0:	b8 01       	movw	r22, r16
     2c2:	80 e0       	ldi	r24, 0x00	; 0
     2c4:	0e 94 5c 00 	call	0xb8	; 0xb8 <RTC_WriteBlock>
     2c8:	28 96       	adiw	r28, 0x08	; 8
     2ca:	0f b6       	in	r0, 0x3f	; 63
     2cc:	f8 94       	cli
     2ce:	de bf       	out	0x3e, r29	; 62
     2d0:	0f be       	out	0x3f, r0	; 63
     2d2:	cd bf       	out	0x3d, r28	; 61
     2d4:	df 91       	pop	r29
     2d6:	cf 91       	pop	r28
     2d8:	1f 91       	pop	r17
     2da:	0f 91       	pop	r16
     2dc:	ff 90       	pop	r15
     2de:	ef 90       	pop	r14
     2e0:	df 90       	pop	r13
     2e2:	cf 90       	pop	r12
     2e4:	bf 90       	pop	r11
     2e6:	af 90       	pop	r10
     2e8:	08 95       	ret

000002ea <RTC_Get>:
     2ea:	cf 93       	push	r28
     2ec:	df 93       	push	r29
     2ee:	cd b7       	in	r28, 0x3d	; 61
     2f0:	de b7       	in	r29, 0x3e	; 62
     2f2:	28 97       	sbiw	r28, 0x08	; 8
     2f4:	0f b6       	in	r0, 0x3f	; 63
     2f6:	f8 94       	cli
     2f8:	de bf       	out	0x3e, r29	; 62
     2fa:	0f be       	out	0x3f, r0	; 63
     2fc:	cd bf       	out	0x3d, r28	; 61
     2fe:	47 e0       	ldi	r20, 0x07	; 7
     300:	6d eb       	ldi	r22, 0xBD	; 189
     302:	72 e0       	ldi	r23, 0x02	; 2
     304:	80 e0       	ldi	r24, 0x00	; 0
     306:	0e 94 ab 00 	call	0x156	; 0x156 <RTC_ReadBlock>
     30a:	ed eb       	ldi	r30, 0xBD	; 189
     30c:	f2 e0       	ldi	r31, 0x02	; 2
     30e:	20 81       	ld	r18, Z
     310:	31 81       	ldd	r19, Z+1	; 0x01
     312:	42 81       	ldd	r20, Z+2	; 0x02
     314:	4f 73       	andi	r20, 0x3F	; 63
     316:	53 81       	ldd	r21, Z+3	; 0x03
     318:	64 81       	ldd	r22, Z+4	; 0x04
     31a:	75 81       	ldd	r23, Z+5	; 0x05
     31c:	86 81       	ldd	r24, Z+6	; 0x06
     31e:	92 2f       	mov	r25, r18
     320:	92 95       	swap	r25
     322:	9f 70       	andi	r25, 0x0F	; 15
     324:	e9 2f       	mov	r30, r25
     326:	ee 0f       	add	r30, r30
     328:	9e 0f       	add	r25, r30
     32a:	99 0f       	add	r25, r25
     32c:	29 1b       	sub	r18, r25
     32e:	93 2f       	mov	r25, r19
     330:	92 95       	swap	r25
     332:	9f 70       	andi	r25, 0x0F	; 15
     334:	e9 2f       	mov	r30, r25
     336:	ee 0f       	add	r30, r30
     338:	9e 0f       	add	r25, r30
     33a:	99 0f       	add	r25, r25
     33c:	39 1b       	sub	r19, r25
     33e:	94 2f       	mov	r25, r20
     340:	92 95       	swap	r25
     342:	9f 70       	andi	r25, 0x0F	; 15
     344:	e9 2f       	mov	r30, r25
     346:	ee 0f       	add	r30, r30
     348:	9e 0f       	add	r25, r30
     34a:	99 0f       	add	r25, r25
     34c:	49 1b       	sub	r20, r25
     34e:	95 2f       	mov	r25, r21
     350:	92 95       	swap	r25
     352:	9f 70       	andi	r25, 0x0F	; 15
     354:	e9 2f       	mov	r30, r25
     356:	ee 0f       	add	r30, r30
     358:	9e 0f       	add	r25, r30
     35a:	99 0f       	add	r25, r25
     35c:	59 1b       	sub	r21, r25
     35e:	96 2f       	mov	r25, r22
     360:	92 95       	swap	r25
     362:	9f 70       	andi	r25, 0x0F	; 15
     364:	e9 2f       	mov	r30, r25
     366:	ee 0f       	add	r30, r30
     368:	9e 0f       	add	r25, r30
     36a:	99 0f       	add	r25, r25
     36c:	69 1b       	sub	r22, r25
     36e:	97 2f       	mov	r25, r23
     370:	92 95       	swap	r25
     372:	9f 70       	andi	r25, 0x0F	; 15
     374:	e9 2f       	mov	r30, r25
     376:	ee 0f       	add	r30, r30
     378:	9e 0f       	add	r25, r30
     37a:	99 0f       	add	r25, r25
     37c:	79 1b       	sub	r23, r25
     37e:	98 2f       	mov	r25, r24
     380:	92 95       	swap	r25
     382:	9f 70       	andi	r25, 0x0F	; 15
     384:	e9 2f       	mov	r30, r25
     386:	ee 0f       	add	r30, r30
     388:	9e 0f       	add	r25, r30
     38a:	99 0f       	add	r25, r25
     38c:	89 1b       	sub	r24, r25
     38e:	90 e0       	ldi	r25, 0x00	; 0
     390:	80 53       	subi	r24, 0x30	; 48
     392:	98 4f       	sbci	r25, 0xF8	; 248
     394:	98 87       	std	Y+8, r25	; 0x08
     396:	8f 83       	std	Y+7, r24	; 0x07
     398:	98 85       	ldd	r25, Y+8	; 0x08
     39a:	28 96       	adiw	r28, 0x08	; 8
     39c:	0f b6       	in	r0, 0x3f	; 63
     39e:	f8 94       	cli
     3a0:	de bf       	out	0x3e, r29	; 62
     3a2:	0f be       	out	0x3f, r0	; 63
     3a4:	cd bf       	out	0x3d, r28	; 61
     3a6:	df 91       	pop	r29
     3a8:	cf 91       	pop	r28
     3aa:	08 95       	ret

000003ac <i2c_master_init>:
     3ac:	9b 01       	movw	r18, r22
     3ae:	ac 01       	movw	r20, r24
     3b0:	11 b8       	out	0x01, r1	; 1
     3b2:	60 e0       	ldi	r22, 0x00	; 0
     3b4:	72 e1       	ldi	r23, 0x12	; 18
     3b6:	8a e7       	ldi	r24, 0x7A	; 122
     3b8:	90 e0       	ldi	r25, 0x00	; 0
     3ba:	0e 94 65 09 	call	0x12ca	; 0x12ca <__udivmodsi4>
     3be:	da 01       	movw	r26, r20
     3c0:	c9 01       	movw	r24, r18
     3c2:	40 97       	sbiw	r24, 0x10	; 16
     3c4:	a1 09       	sbc	r26, r1
     3c6:	b1 09       	sbc	r27, r1
     3c8:	b6 95       	lsr	r27
     3ca:	a7 95       	ror	r26
     3cc:	97 95       	ror	r25
     3ce:	87 95       	ror	r24
     3d0:	80 b9       	out	0x00, r24	; 0
     3d2:	08 95       	ret

000003d4 <i2c_master_start>:
     3d4:	16 be       	out	0x36, r1	; 54
     3d6:	94 ea       	ldi	r25, 0xA4	; 164
     3d8:	96 bf       	out	0x36, r25	; 54
     3da:	06 b6       	in	r0, 0x36	; 54
     3dc:	07 fe       	sbrs	r0, 7
     3de:	fd cf       	rjmp	.-6      	; 0x3da <i2c_master_start+0x6>
     3e0:	91 b1       	in	r25, 0x01	; 1
     3e2:	98 7f       	andi	r25, 0xF8	; 248
     3e4:	98 30       	cpi	r25, 0x08	; 8
     3e6:	11 f0       	breq	.+4      	; 0x3ec <i2c_master_start+0x18>
     3e8:	90 31       	cpi	r25, 0x10	; 16
     3ea:	81 f4       	brne	.+32     	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
     3ec:	88 0f       	add	r24, r24
     3ee:	68 2b       	or	r22, r24
     3f0:	63 b9       	out	0x03, r22	; 3
     3f2:	84 e8       	ldi	r24, 0x84	; 132
     3f4:	86 bf       	out	0x36, r24	; 54
     3f6:	06 b6       	in	r0, 0x36	; 54
     3f8:	07 fe       	sbrs	r0, 7
     3fa:	fd cf       	rjmp	.-6      	; 0x3f6 <i2c_master_start+0x22>
     3fc:	81 b1       	in	r24, 0x01	; 1
     3fe:	88 7f       	andi	r24, 0xF8	; 248
     400:	88 31       	cpi	r24, 0x18	; 24
     402:	31 f0       	breq	.+12     	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
     404:	80 34       	cpi	r24, 0x40	; 64
     406:	31 f0       	breq	.+12     	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
     408:	84 e1       	ldi	r24, 0x14	; 20
     40a:	08 95       	ret
     40c:	8a e0       	ldi	r24, 0x0A	; 10
     40e:	08 95       	ret
     410:	80 e0       	ldi	r24, 0x00	; 0
     412:	08 95       	ret
     414:	80 e0       	ldi	r24, 0x00	; 0
     416:	08 95       	ret

00000418 <i2c_master_write>:
     418:	83 b9       	out	0x03, r24	; 3
     41a:	84 e8       	ldi	r24, 0x84	; 132
     41c:	86 bf       	out	0x36, r24	; 54
     41e:	06 b6       	in	r0, 0x36	; 54
     420:	07 fe       	sbrs	r0, 7
     422:	fd cf       	rjmp	.-6      	; 0x41e <i2c_master_write+0x6>
     424:	81 b1       	in	r24, 0x01	; 1
     426:	88 7f       	andi	r24, 0xF8	; 248
     428:	88 32       	cpi	r24, 0x28	; 40
     42a:	11 f4       	brne	.+4      	; 0x430 <i2c_master_write+0x18>
     42c:	80 e0       	ldi	r24, 0x00	; 0
     42e:	08 95       	ret
     430:	85 e1       	ldi	r24, 0x15	; 21
     432:	08 95       	ret

00000434 <i2c_master_sendByte>:
     434:	cf 93       	push	r28
     436:	c6 2f       	mov	r28, r22
     438:	60 e0       	ldi	r22, 0x00	; 0
     43a:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <i2c_master_start>
     43e:	81 11       	cpse	r24, r1
     440:	07 c0       	rjmp	.+14     	; 0x450 <i2c_master_sendByte+0x1c>
     442:	8c 2f       	mov	r24, r28
     444:	0e 94 0c 02 	call	0x418	; 0x418 <i2c_master_write>
     448:	81 11       	cpse	r24, r1
     44a:	02 c0       	rjmp	.+4      	; 0x450 <i2c_master_sendByte+0x1c>
     44c:	94 e9       	ldi	r25, 0x94	; 148
     44e:	96 bf       	out	0x36, r25	; 54
     450:	cf 91       	pop	r28
     452:	08 95       	ret

00000454 <lq_transmitI2C>:
     454:	fc 01       	movw	r30, r24
     456:	93 81       	ldd	r25, Z+3	; 0x03
     458:	69 2b       	or	r22, r25
     45a:	80 81       	ld	r24, Z
     45c:	0e 94 1a 02 	call	0x434	; 0x434 <i2c_master_sendByte>
     460:	08 95       	ret

00000462 <lq_writeDevicePulse>:
     462:	0f 93       	push	r16
     464:	1f 93       	push	r17
     466:	cf 93       	push	r28
     468:	8c 01       	movw	r16, r24
     46a:	c6 2f       	mov	r28, r22
     46c:	64 60       	ori	r22, 0x04	; 4
     46e:	0e 94 2a 02 	call	0x454	; 0x454 <lq_transmitI2C>
     472:	85 e0       	ldi	r24, 0x05	; 5
     474:	8a 95       	dec	r24
     476:	f1 f7       	brne	.-4      	; 0x474 <lq_writeDevicePulse+0x12>
     478:	00 00       	nop
     47a:	6c 2f       	mov	r22, r28
     47c:	6b 7f       	andi	r22, 0xFB	; 251
     47e:	c8 01       	movw	r24, r16
     480:	0e 94 2a 02 	call	0x454	; 0x454 <lq_transmitI2C>
     484:	85 e8       	ldi	r24, 0x85	; 133
     486:	8a 95       	dec	r24
     488:	f1 f7       	brne	.-4      	; 0x486 <lq_writeDevicePulse+0x24>
     48a:	00 00       	nop
     48c:	cf 91       	pop	r28
     48e:	1f 91       	pop	r17
     490:	0f 91       	pop	r16
     492:	08 95       	ret

00000494 <lq_writeDevice4Bits>:
     494:	1f 93       	push	r17
     496:	cf 93       	push	r28
     498:	df 93       	push	r29
     49a:	ec 01       	movw	r28, r24
     49c:	16 2f       	mov	r17, r22
     49e:	0e 94 2a 02 	call	0x454	; 0x454 <lq_transmitI2C>
     4a2:	61 2f       	mov	r22, r17
     4a4:	ce 01       	movw	r24, r28
     4a6:	0e 94 31 02 	call	0x462	; 0x462 <lq_writeDevicePulse>
     4aa:	df 91       	pop	r29
     4ac:	cf 91       	pop	r28
     4ae:	1f 91       	pop	r17
     4b0:	08 95       	ret

000004b2 <lq_writeDeviceByte>:
     4b2:	0f 93       	push	r16
     4b4:	1f 93       	push	r17
     4b6:	cf 93       	push	r28
     4b8:	df 93       	push	r29
     4ba:	8c 01       	movw	r16, r24
     4bc:	c6 2f       	mov	r28, r22
     4be:	d4 2f       	mov	r29, r20
     4c0:	60 7f       	andi	r22, 0xF0	; 240
     4c2:	64 2b       	or	r22, r20
     4c4:	0e 94 4a 02 	call	0x494	; 0x494 <lq_writeDevice4Bits>
     4c8:	80 e1       	ldi	r24, 0x10	; 16
     4ca:	c8 9f       	mul	r28, r24
     4cc:	b0 01       	movw	r22, r0
     4ce:	11 24       	eor	r1, r1
     4d0:	6d 2b       	or	r22, r29
     4d2:	c8 01       	movw	r24, r16
     4d4:	0e 94 4a 02 	call	0x494	; 0x494 <lq_writeDevice4Bits>
     4d8:	df 91       	pop	r29
     4da:	cf 91       	pop	r28
     4dc:	1f 91       	pop	r17
     4de:	0f 91       	pop	r16
     4e0:	08 95       	ret

000004e2 <lq_print>:
     4e2:	0f 93       	push	r16
     4e4:	1f 93       	push	r17
     4e6:	cf 93       	push	r28
     4e8:	df 93       	push	r29
     4ea:	eb 01       	movw	r28, r22
     4ec:	68 81       	ld	r22, Y
     4ee:	66 23       	and	r22, r22
     4f0:	49 f0       	breq	.+18     	; 0x504 <lq_print+0x22>
     4f2:	8c 01       	movw	r16, r24
     4f4:	21 96       	adiw	r28, 0x01	; 1
     4f6:	41 e0       	ldi	r20, 0x01	; 1
     4f8:	c8 01       	movw	r24, r16
     4fa:	0e 94 59 02 	call	0x4b2	; 0x4b2 <lq_writeDeviceByte>
     4fe:	69 91       	ld	r22, Y+
     500:	61 11       	cpse	r22, r1
     502:	f9 cf       	rjmp	.-14     	; 0x4f6 <lq_print+0x14>
     504:	df 91       	pop	r29
     506:	cf 91       	pop	r28
     508:	1f 91       	pop	r17
     50a:	0f 91       	pop	r16
     50c:	08 95       	ret

0000050e <lq_sendCommand>:
     50e:	40 e0       	ldi	r20, 0x00	; 0
     510:	0e 94 59 02 	call	0x4b2	; 0x4b2 <lq_writeDeviceByte>
     514:	08 95       	ret

00000516 <lq_setCursor>:
     516:	cf 93       	push	r28
     518:	df 93       	push	r29
     51a:	00 d0       	rcall	.+0      	; 0x51c <lq_setCursor+0x6>
     51c:	00 d0       	rcall	.+0      	; 0x51e <lq_setCursor+0x8>
     51e:	cd b7       	in	r28, 0x3d	; 61
     520:	de b7       	in	r29, 0x3e	; 62
     522:	19 82       	std	Y+1, r1	; 0x01
     524:	20 e4       	ldi	r18, 0x40	; 64
     526:	2a 83       	std	Y+2, r18	; 0x02
     528:	24 e1       	ldi	r18, 0x14	; 20
     52a:	2b 83       	std	Y+3, r18	; 0x03
     52c:	24 e5       	ldi	r18, 0x54	; 84
     52e:	2c 83       	std	Y+4, r18	; 0x04
     530:	fe 01       	movw	r30, r28
     532:	e6 0f       	add	r30, r22
     534:	f1 1d       	adc	r31, r1
     536:	21 81       	ldd	r18, Z+1	; 0x01
     538:	64 2f       	mov	r22, r20
     53a:	62 0f       	add	r22, r18
     53c:	60 68       	ori	r22, 0x80	; 128
     53e:	0e 94 87 02 	call	0x50e	; 0x50e <lq_sendCommand>
     542:	0f 90       	pop	r0
     544:	0f 90       	pop	r0
     546:	0f 90       	pop	r0
     548:	0f 90       	pop	r0
     54a:	df 91       	pop	r29
     54c:	cf 91       	pop	r28
     54e:	08 95       	ret

00000550 <lq_clear>:
     550:	cf 93       	push	r28
     552:	df 93       	push	r29
     554:	ec 01       	movw	r28, r24
     556:	61 e0       	ldi	r22, 0x01	; 1
     558:	0e 94 87 02 	call	0x50e	; 0x50e <lq_sendCommand>
     55c:	8f e9       	ldi	r24, 0x9F	; 159
     55e:	9f e0       	ldi	r25, 0x0F	; 15
     560:	01 97       	sbiw	r24, 0x01	; 1
     562:	f1 f7       	brne	.-4      	; 0x560 <lq_clear+0x10>
     564:	00 c0       	rjmp	.+0      	; 0x566 <lq_clear+0x16>
     566:	00 00       	nop
     568:	40 e0       	ldi	r20, 0x00	; 0
     56a:	60 e0       	ldi	r22, 0x00	; 0
     56c:	ce 01       	movw	r24, r28
     56e:	0e 94 8b 02 	call	0x516	; 0x516 <lq_setCursor>
     572:	df 91       	pop	r29
     574:	cf 91       	pop	r28
     576:	08 95       	ret

00000578 <lq_returnHome>:
     578:	62 e0       	ldi	r22, 0x02	; 2
     57a:	0e 94 87 02 	call	0x50e	; 0x50e <lq_sendCommand>
     57e:	8f e9       	ldi	r24, 0x9F	; 159
     580:	9f e0       	ldi	r25, 0x0F	; 15
     582:	01 97       	sbiw	r24, 0x01	; 1
     584:	f1 f7       	brne	.-4      	; 0x582 <lq_returnHome+0xa>
     586:	00 c0       	rjmp	.+0      	; 0x588 <lq_returnHome+0x10>
     588:	00 00       	nop
     58a:	08 95       	ret

0000058c <lq_turnOnDisplay>:
     58c:	fc 01       	movw	r30, r24
     58e:	65 81       	ldd	r22, Z+5	; 0x05
     590:	26 2f       	mov	r18, r22
     592:	24 60       	ori	r18, 0x04	; 4
     594:	25 83       	std	Z+5, r18	; 0x05
     596:	6c 60       	ori	r22, 0x0C	; 12
     598:	0e 94 87 02 	call	0x50e	; 0x50e <lq_sendCommand>
     59c:	08 95       	ret

0000059e <lq_init>:
     59e:	cf 93       	push	r28
     5a0:	df 93       	push	r29
     5a2:	cd b7       	in	r28, 0x3d	; 61
     5a4:	de b7       	in	r29, 0x3e	; 62
     5a6:	2e 97       	sbiw	r28, 0x0e	; 14
     5a8:	0f b6       	in	r0, 0x3f	; 63
     5aa:	f8 94       	cli
     5ac:	de bf       	out	0x3e, r29	; 62
     5ae:	0f be       	out	0x3f, r0	; 63
     5b0:	cd bf       	out	0x3d, r28	; 61
     5b2:	88 87       	std	Y+8, r24	; 0x08
     5b4:	69 87       	std	Y+9, r22	; 0x09
     5b6:	4a 87       	std	Y+10, r20	; 0x0a
     5b8:	1b 86       	std	Y+11, r1	; 0x0b
     5ba:	2c 87       	std	Y+12, r18	; 0x0c
     5bc:	84 e0       	ldi	r24, 0x04	; 4
     5be:	8d 87       	std	Y+13, r24	; 0x0d
     5c0:	82 e0       	ldi	r24, 0x02	; 2
     5c2:	8e 87       	std	Y+14, r24	; 0x0e
     5c4:	42 30       	cpi	r20, 0x02	; 2
     5c6:	18 f0       	brcs	.+6      	; 0x5ce <lq_init+0x30>
     5c8:	82 2f       	mov	r24, r18
     5ca:	88 60       	ori	r24, 0x08	; 8
     5cc:	8c 87       	std	Y+12, r24	; 0x0c
     5ce:	22 23       	and	r18, r18
     5d0:	29 f0       	breq	.+10     	; 0x5dc <lq_init+0x3e>
     5d2:	41 30       	cpi	r20, 0x01	; 1
     5d4:	19 f4       	brne	.+6      	; 0x5dc <lq_init+0x3e>
     5d6:	8c 85       	ldd	r24, Y+12	; 0x0c
     5d8:	84 60       	ori	r24, 0x04	; 4
     5da:	8c 87       	std	Y+12, r24	; 0x0c
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     5dc:	2f ef       	ldi	r18, 0xFF	; 255
     5de:	80 e7       	ldi	r24, 0x70	; 112
     5e0:	92 e0       	ldi	r25, 0x02	; 2
     5e2:	21 50       	subi	r18, 0x01	; 1
     5e4:	80 40       	sbci	r24, 0x00	; 0
     5e6:	90 40       	sbci	r25, 0x00	; 0
     5e8:	e1 f7       	brne	.-8      	; 0x5e2 <lq_init+0x44>
     5ea:	00 c0       	rjmp	.+0      	; 0x5ec <lq_init+0x4e>
     5ec:	00 00       	nop
     5ee:	60 e0       	ldi	r22, 0x00	; 0
     5f0:	ce 01       	movw	r24, r28
     5f2:	08 96       	adiw	r24, 0x08	; 8
     5f4:	0e 94 2a 02 	call	0x454	; 0x454 <lq_transmitI2C>
     5f8:	2f ef       	ldi	r18, 0xFF	; 255
     5fa:	80 e7       	ldi	r24, 0x70	; 112
     5fc:	92 e0       	ldi	r25, 0x02	; 2
     5fe:	21 50       	subi	r18, 0x01	; 1
     600:	80 40       	sbci	r24, 0x00	; 0
     602:	90 40       	sbci	r25, 0x00	; 0
     604:	e1 f7       	brne	.-8      	; 0x5fe <lq_init+0x60>
     606:	00 c0       	rjmp	.+0      	; 0x608 <lq_init+0x6a>
     608:	00 00       	nop
     60a:	60 e3       	ldi	r22, 0x30	; 48
     60c:	ce 01       	movw	r24, r28
     60e:	08 96       	adiw	r24, 0x08	; 8
     610:	0e 94 2a 02 	call	0x454	; 0x454 <lq_transmitI2C>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     614:	87 e2       	ldi	r24, 0x27	; 39
     616:	93 e2       	ldi	r25, 0x23	; 35
     618:	01 97       	sbiw	r24, 0x01	; 1
     61a:	f1 f7       	brne	.-4      	; 0x618 <lq_init+0x7a>
     61c:	00 c0       	rjmp	.+0      	; 0x61e <lq_init+0x80>
     61e:	00 00       	nop
     620:	60 e3       	ldi	r22, 0x30	; 48
     622:	ce 01       	movw	r24, r28
     624:	08 96       	adiw	r24, 0x08	; 8
     626:	0e 94 4a 02 	call	0x494	; 0x494 <lq_writeDevice4Bits>
     62a:	87 e2       	ldi	r24, 0x27	; 39
     62c:	93 e2       	ldi	r25, 0x23	; 35
     62e:	01 97       	sbiw	r24, 0x01	; 1
     630:	f1 f7       	brne	.-4      	; 0x62e <lq_init+0x90>
     632:	00 c0       	rjmp	.+0      	; 0x634 <lq_init+0x96>
     634:	00 00       	nop
     636:	60 e3       	ldi	r22, 0x30	; 48
     638:	ce 01       	movw	r24, r28
     63a:	08 96       	adiw	r24, 0x08	; 8
     63c:	0e 94 4a 02 	call	0x494	; 0x494 <lq_writeDevice4Bits>
     640:	8b e2       	ldi	r24, 0x2B	; 43
     642:	91 e0       	ldi	r25, 0x01	; 1
     644:	01 97       	sbiw	r24, 0x01	; 1
     646:	f1 f7       	brne	.-4      	; 0x644 <lq_init+0xa6>
     648:	00 c0       	rjmp	.+0      	; 0x64a <lq_init+0xac>
     64a:	00 00       	nop
     64c:	60 e2       	ldi	r22, 0x20	; 32
     64e:	ce 01       	movw	r24, r28
     650:	08 96       	adiw	r24, 0x08	; 8
     652:	0e 94 4a 02 	call	0x494	; 0x494 <lq_writeDevice4Bits>
     656:	6c 85       	ldd	r22, Y+12	; 0x0c
     658:	60 62       	ori	r22, 0x20	; 32
     65a:	ce 01       	movw	r24, r28
     65c:	08 96       	adiw	r24, 0x08	; 8
     65e:	0e 94 87 02 	call	0x50e	; 0x50e <lq_sendCommand>
     662:	ce 01       	movw	r24, r28
     664:	08 96       	adiw	r24, 0x08	; 8
     666:	0e 94 c6 02 	call	0x58c	; 0x58c <lq_turnOnDisplay>
     66a:	ce 01       	movw	r24, r28
     66c:	08 96       	adiw	r24, 0x08	; 8
     66e:	0e 94 a8 02 	call	0x550	; 0x550 <lq_clear>
     672:	6e 85       	ldd	r22, Y+14	; 0x0e
     674:	64 60       	ori	r22, 0x04	; 4
     676:	ce 01       	movw	r24, r28
     678:	08 96       	adiw	r24, 0x08	; 8
     67a:	0e 94 87 02 	call	0x50e	; 0x50e <lq_sendCommand>
     67e:	ce 01       	movw	r24, r28
     680:	08 96       	adiw	r24, 0x08	; 8
     682:	0e 94 bc 02 	call	0x578	; 0x578 <lq_returnHome>
     686:	87 e0       	ldi	r24, 0x07	; 7
     688:	fe 01       	movw	r30, r28
     68a:	38 96       	adiw	r30, 0x08	; 8
     68c:	de 01       	movw	r26, r28
     68e:	11 96       	adiw	r26, 0x01	; 1
     690:	01 90       	ld	r0, Z+
     692:	0d 92       	st	X+, r0
     694:	8a 95       	dec	r24
     696:	e1 f7       	brne	.-8      	; 0x690 <lq_init+0xf2>
     698:	29 81       	ldd	r18, Y+1	; 0x01
     69a:	3a 81       	ldd	r19, Y+2	; 0x02
     69c:	4b 81       	ldd	r20, Y+3	; 0x03
     69e:	5c 81       	ldd	r21, Y+4	; 0x04
     6a0:	6d 81       	ldd	r22, Y+5	; 0x05
     6a2:	7e 81       	ldd	r23, Y+6	; 0x06
     6a4:	8f 81       	ldd	r24, Y+7	; 0x07
     6a6:	90 e0       	ldi	r25, 0x00	; 0
     6a8:	2e 96       	adiw	r28, 0x0e	; 14
     6aa:	0f b6       	in	r0, 0x3f	; 63
     6ac:	f8 94       	cli
     6ae:	de bf       	out	0x3e, r29	; 62
     6b0:	0f be       	out	0x3f, r0	; 63
     6b2:	cd bf       	out	0x3d, r28	; 61
     6b4:	df 91       	pop	r29
     6b6:	cf 91       	pop	r28
     6b8:	08 95       	ret

000006ba <serial_init>:
     6ba:	88 e1       	ldi	r24, 0x18	; 24
     6bc:	8a b9       	out	0x0a, r24	; 10
     6be:	80 b5       	in	r24, 0x20	; 32
     6c0:	86 68       	ori	r24, 0x86	; 134
     6c2:	80 bd       	out	0x20, r24	; 32
     6c4:	83 e3       	ldi	r24, 0x33	; 51
     6c6:	89 b9       	out	0x09, r24	; 9
     6c8:	57 9a       	sbi	0x0a, 7	; 10
     6ca:	08 95       	ret

000006cc <serial_send_char>:
     6cc:	90 e4       	ldi	r25, 0x40	; 64
     6ce:	9b b9       	out	0x0b, r25	; 11
     6d0:	8c b9       	out	0x0c, r24	; 12
     6d2:	5e 9b       	sbis	0x0b, 6	; 11
     6d4:	fe cf       	rjmp	.-4      	; 0x6d2 <serial_send_char+0x6>
     6d6:	08 95       	ret

000006d8 <serial_send_string>:
     6d8:	cf 93       	push	r28
     6da:	df 93       	push	r29
     6dc:	ec 01       	movw	r28, r24
     6de:	88 81       	ld	r24, Y
     6e0:	88 23       	and	r24, r24
     6e2:	31 f0       	breq	.+12     	; 0x6f0 <serial_send_string+0x18>
     6e4:	21 96       	adiw	r28, 0x01	; 1
     6e6:	0e 94 66 03 	call	0x6cc	; 0x6cc <serial_send_char>
     6ea:	89 91       	ld	r24, Y+
     6ec:	81 11       	cpse	r24, r1
     6ee:	fb cf       	rjmp	.-10     	; 0x6e6 <serial_send_string+0xe>
     6f0:	df 91       	pop	r29
     6f2:	cf 91       	pop	r28
     6f4:	08 95       	ret

000006f6 <TWI_Status>:
     6f6:	81 b1       	in	r24, 0x01	; 1
     6f8:	88 7f       	andi	r24, 0xF8	; 248
     6fa:	08 95       	ret

000006fc <TWI_BeginTransmission>:
     6fc:	84 ea       	ldi	r24, 0xA4	; 164
     6fe:	86 bf       	out	0x36, r24	; 54
     700:	06 b6       	in	r0, 0x36	; 54
     702:	07 fe       	sbrs	r0, 7
     704:	fd cf       	rjmp	.-6      	; 0x700 <TWI_BeginTransmission+0x4>
     706:	81 b1       	in	r24, 0x01	; 1
     708:	88 7f       	andi	r24, 0xF8	; 248
     70a:	08 95       	ret

0000070c <TWI_EndTransmission>:
     70c:	85 ed       	ldi	r24, 0xD5	; 213
     70e:	86 bf       	out	0x36, r24	; 54
     710:	06 b6       	in	r0, 0x36	; 54
     712:	04 fc       	sbrc	r0, 4
     714:	fd cf       	rjmp	.-6      	; 0x710 <TWI_EndTransmission+0x4>
     716:	08 95       	ret

00000718 <TWI_Transmit>:
     718:	83 b9       	out	0x03, r24	; 3
     71a:	84 e8       	ldi	r24, 0x84	; 132
     71c:	86 bf       	out	0x36, r24	; 54
     71e:	06 b6       	in	r0, 0x36	; 54
     720:	07 fe       	sbrs	r0, 7
     722:	fd cf       	rjmp	.-6      	; 0x71e <TWI_Transmit+0x6>
     724:	81 b1       	in	r24, 0x01	; 1
     726:	88 7f       	andi	r24, 0xF8	; 248
     728:	08 95       	ret

0000072a <TWI_ReceiveACK>:
     72a:	84 ec       	ldi	r24, 0xC4	; 196
     72c:	86 bf       	out	0x36, r24	; 54
     72e:	06 b6       	in	r0, 0x36	; 54
     730:	07 fe       	sbrs	r0, 7
     732:	fd cf       	rjmp	.-6      	; 0x72e <TWI_ReceiveACK+0x4>
     734:	83 b1       	in	r24, 0x03	; 3
     736:	08 95       	ret

00000738 <TWI_ReceiveNACK>:
     738:	84 e8       	ldi	r24, 0x84	; 132
     73a:	86 bf       	out	0x36, r24	; 54
     73c:	06 b6       	in	r0, 0x36	; 54
     73e:	07 fe       	sbrs	r0, 7
     740:	fd cf       	rjmp	.-6      	; 0x73c <TWI_ReceiveNACK+0x4>
     742:	83 b1       	in	r24, 0x03	; 3
     744:	08 95       	ret

00000746 <stepper_init>:
LiquidCrystalDevice_t lcd1;
DateTime_t t;

void stepper_init(void)
{
    SBIT(STEPPER_DDR, 0);
     746:	d0 9a       	sbi	0x1a, 0	; 26
    SBIT(STEPPER_DDR, 1);
     748:	d1 9a       	sbi	0x1a, 1	; 26
    SBIT(STEPPER_DDR, 2);
     74a:	d2 9a       	sbi	0x1a, 2	; 26
    SBIT(STEPPER_DDR, 3);
     74c:	d3 9a       	sbi	0x1a, 3	; 26
     74e:	08 95       	ret

00000750 <lamp_init>:
}

void lamp_init()
{
    SBIT(LAMP_DDR, LAMP);
     750:	bb 9a       	sbi	0x17, 3	; 23
     752:	08 95       	ret

00000754 <timer1_init>:
}

void timer1_init()
{
    TIMSK |= (1 << TOIE1);
     754:	89 b7       	in	r24, 0x39	; 57
     756:	84 60       	ori	r24, 0x04	; 4
     758:	89 bf       	out	0x39, r24	; 57
    TCCR1B = (1 << CS12) | (1 << CS10);
     75a:	85 e0       	ldi	r24, 0x05	; 5
     75c:	8e bd       	out	0x2e, r24	; 46
    TCNT1 = 57723; // 65535 - 7812 = 57723 -> 1 sec
     75e:	8b e7       	ldi	r24, 0x7B	; 123
     760:	91 ee       	ldi	r25, 0xE1	; 225
     762:	9d bd       	out	0x2d, r25	; 45
     764:	8c bd       	out	0x2c, r24	; 44
     766:	08 95       	ret

00000768 <pwm_init>:
}

void pwm_init()
{
    TCCR0 |= (1 << WGM00) | (1 << COM01) | (1 << CS00) | (1 << CS02);
     768:	83 b7       	in	r24, 0x33	; 51
     76a:	85 66       	ori	r24, 0x65	; 101
     76c:	83 bf       	out	0x33, r24	; 51
    OCR0 = 127; // 255 * 50 / 100 = 127 -> 50%
     76e:	8f e7       	ldi	r24, 0x7F	; 127
     770:	8c bf       	out	0x3c, r24	; 60
     772:	08 95       	ret

00000774 <lcd_init>:
}

void lcd_init(void)
{
     774:	ef 92       	push	r14
     776:	ff 92       	push	r15
     778:	0f 93       	push	r16
     77a:	1f 93       	push	r17
     77c:	cf 93       	push	r28
     77e:	df 93       	push	r29
     780:	cd b7       	in	r28, 0x3d	; 61
     782:	de b7       	in	r29, 0x3e	; 62
     784:	64 97       	sbiw	r28, 0x14	; 20
     786:	0f b6       	in	r0, 0x3f	; 63
     788:	f8 94       	cli
     78a:	de bf       	out	0x3e, r29	; 62
     78c:	0f be       	out	0x3f, r0	; 63
     78e:	cd bf       	out	0x3d, r28	; 61
    i2c_master_init(I2C_SCL_FREQUENCY_400);
     790:	60 e8       	ldi	r22, 0x80	; 128
     792:	7a e1       	ldi	r23, 0x1A	; 26
     794:	86 e0       	ldi	r24, 0x06	; 6
     796:	90 e0       	ldi	r25, 0x00	; 0
     798:	0e 94 d6 01 	call	0x3ac	; 0x3ac <i2c_master_init>

    lcd1 = lq_init((0b01000110 >> 1), 16, 2, LCD_5x8DOTS);
     79c:	20 e0       	ldi	r18, 0x00	; 0
     79e:	42 e0       	ldi	r20, 0x02	; 2
     7a0:	60 e1       	ldi	r22, 0x10	; 16
     7a2:	83 e2       	ldi	r24, 0x23	; 35
     7a4:	0e 94 cf 02 	call	0x59e	; 0x59e <lq_init>
     7a8:	20 93 cc 02 	sts	0x02CC, r18	; 0x8002cc <lcd1>
     7ac:	30 93 cd 02 	sts	0x02CD, r19	; 0x8002cd <lcd1+0x1>
     7b0:	40 93 ce 02 	sts	0x02CE, r20	; 0x8002ce <lcd1+0x2>
     7b4:	50 93 cf 02 	sts	0x02CF, r21	; 0x8002cf <lcd1+0x3>
     7b8:	60 93 d0 02 	sts	0x02D0, r22	; 0x8002d0 <lcd1+0x4>
     7bc:	70 93 d1 02 	sts	0x02D1, r23	; 0x8002d1 <lcd1+0x5>
     7c0:	80 93 d2 02 	sts	0x02D2, r24	; 0x8002d2 <lcd1+0x6>

    t.Second = 55;
     7c4:	04 ec       	ldi	r16, 0xC4	; 196
     7c6:	12 e0       	ldi	r17, 0x02	; 2
     7c8:	87 e3       	ldi	r24, 0x37	; 55
     7ca:	28 2f       	mov	r18, r24
     7cc:	f8 01       	movw	r30, r16
     7ce:	80 83       	st	Z, r24
    t.Minute = 59;
     7d0:	8b e3       	ldi	r24, 0x3B	; 59
     7d2:	38 2f       	mov	r19, r24
     7d4:	81 83       	std	Z+1, r24	; 0x01
    t.Hour = 23;
     7d6:	87 e1       	ldi	r24, 0x17	; 23
     7d8:	48 2f       	mov	r20, r24
     7da:	82 83       	std	Z+2, r24	; 0x02
    t.Day = Sunday;
     7dc:	82 e0       	ldi	r24, 0x02	; 2
     7de:	58 2f       	mov	r21, r24
     7e0:	83 83       	std	Z+3, r24	; 0x03
    t.Date = 31;
     7e2:	8f e1       	ldi	r24, 0x1F	; 31
     7e4:	68 2f       	mov	r22, r24
     7e6:	84 83       	std	Z+4, r24	; 0x04
    t.Month = 12;
     7e8:	8c e0       	ldi	r24, 0x0C	; 12
     7ea:	78 2f       	mov	r23, r24
     7ec:	85 83       	std	Z+5, r24	; 0x05
    t.Year = 2024;
     7ee:	88 ee       	ldi	r24, 0xE8	; 232
     7f0:	86 83       	std	Z+6, r24	; 0x06
     7f2:	97 e0       	ldi	r25, 0x07	; 7
     7f4:	97 83       	std	Z+7, r25	; 0x07
    RTC_Set(t);
     7f6:	90 91 cb 02 	lds	r25, 0x02CB	; 0x8002cb <t+0x7>
     7fa:	0e 94 21 01 	call	0x242	; 0x242 <RTC_Set>

    lq_setCursor(&lcd1, 0, 13);
     7fe:	4d e0       	ldi	r20, 0x0D	; 13
     800:	60 e0       	ldi	r22, 0x00	; 0
     802:	8c ec       	ldi	r24, 0xCC	; 204
     804:	92 e0       	ldi	r25, 0x02	; 2
     806:	0e 94 8b 02 	call	0x516	; 0x516 <lq_setCursor>
    lq_print(&lcd1, "OFF");
     80a:	6f e6       	ldi	r22, 0x6F	; 111
     80c:	70 e0       	ldi	r23, 0x00	; 0
     80e:	8c ec       	ldi	r24, 0xCC	; 204
     810:	92 e0       	ldi	r25, 0x02	; 2
     812:	0e 94 71 02 	call	0x4e2	; 0x4e2 <lq_print>

    lq_setCursor(&lcd1, 1, 13);
     816:	4d e0       	ldi	r20, 0x0D	; 13
     818:	61 e0       	ldi	r22, 0x01	; 1
     81a:	8c ec       	ldi	r24, 0xCC	; 204
     81c:	92 e0       	ldi	r25, 0x02	; 2
     81e:	0e 94 8b 02 	call	0x516	; 0x516 <lq_setCursor>
    lq_print(&lcd1, "50%");
     822:	63 e7       	ldi	r22, 0x73	; 115
     824:	70 e0       	ldi	r23, 0x00	; 0
     826:	8c ec       	ldi	r24, 0xCC	; 204
     828:	92 e0       	ldi	r25, 0x02	; 2
     82a:	0e 94 71 02 	call	0x4e2	; 0x4e2 <lq_print>

    t = RTC_Get();
     82e:	0e 94 75 01 	call	0x2ea	; 0x2ea <RTC_Get>
     832:	f8 01       	movw	r30, r16
     834:	20 83       	st	Z, r18
     836:	31 83       	std	Z+1, r19	; 0x01
     838:	42 83       	std	Z+2, r20	; 0x02
     83a:	53 83       	std	Z+3, r21	; 0x03
     83c:	64 83       	std	Z+4, r22	; 0x04
     83e:	75 83       	std	Z+5, r23	; 0x05
     840:	86 83       	std	Z+6, r24	; 0x06
     842:	97 83       	std	Z+7, r25	; 0x07
    if (RTC_Status() == RTC_OK)
     844:	0e 94 59 00 	call	0xb2	; 0xb2 <RTC_Status>
     848:	81 30       	cpi	r24, 0x01	; 1
     84a:	09 f0       	breq	.+2      	; 0x84e <lcd_init+0xda>
     84c:	47 c0       	rjmp	.+142    	; 0x8dc <__stack+0x7d>
    {
        lq_setCursor(&lcd1, 0, 0);
     84e:	40 e0       	ldi	r20, 0x00	; 0
     850:	60 e0       	ldi	r22, 0x00	; 0
     852:	8c ec       	ldi	r24, 0xCC	; 204
     854:	92 e0       	ldi	r25, 0x02	; 2
     856:	0e 94 8b 02 	call	0x516	; 0x516 <lq_setCursor>
        char time_arr[10];
        sprintf(time_arr, "%02d:%02d:%02d", t.Hour, t.Minute, t.Second);
     85a:	f8 01       	movw	r30, r16
     85c:	80 81       	ld	r24, Z
     85e:	1f 92       	push	r1
     860:	8f 93       	push	r24
     862:	81 81       	ldd	r24, Z+1	; 0x01
     864:	1f 92       	push	r1
     866:	8f 93       	push	r24
     868:	82 81       	ldd	r24, Z+2	; 0x02
     86a:	1f 92       	push	r1
     86c:	8f 93       	push	r24
     86e:	87 e7       	ldi	r24, 0x77	; 119
     870:	90 e0       	ldi	r25, 0x00	; 0
     872:	9f 93       	push	r25
     874:	8f 93       	push	r24
     876:	7e 01       	movw	r14, r28
     878:	fb e0       	ldi	r31, 0x0B	; 11
     87a:	ef 0e       	add	r14, r31
     87c:	f1 1c       	adc	r15, r1
     87e:	ff 92       	push	r15
     880:	ef 92       	push	r14
     882:	0e 94 d1 09 	call	0x13a2	; 0x13a2 <sprintf>
        lq_print(&lcd1, time_arr);
     886:	b7 01       	movw	r22, r14
     888:	8c ec       	ldi	r24, 0xCC	; 204
     88a:	92 e0       	ldi	r25, 0x02	; 2
     88c:	0e 94 71 02 	call	0x4e2	; 0x4e2 <lq_print>

        lq_setCursor(&lcd1, 1, 0);
     890:	40 e0       	ldi	r20, 0x00	; 0
     892:	61 e0       	ldi	r22, 0x01	; 1
     894:	8c ec       	ldi	r24, 0xCC	; 204
     896:	92 e0       	ldi	r25, 0x02	; 2
     898:	0e 94 8b 02 	call	0x516	; 0x516 <lq_setCursor>
        char date_arr[10];
        sprintf(date_arr, "%02d/%02d/%02d", t.Year, t.Month, t.Date);
     89c:	f8 01       	movw	r30, r16
     89e:	84 81       	ldd	r24, Z+4	; 0x04
     8a0:	1f 92       	push	r1
     8a2:	8f 93       	push	r24
     8a4:	85 81       	ldd	r24, Z+5	; 0x05
     8a6:	1f 92       	push	r1
     8a8:	8f 93       	push	r24
     8aa:	87 81       	ldd	r24, Z+7	; 0x07
     8ac:	8f 93       	push	r24
     8ae:	86 81       	ldd	r24, Z+6	; 0x06
     8b0:	8f 93       	push	r24
     8b2:	86 e8       	ldi	r24, 0x86	; 134
     8b4:	90 e0       	ldi	r25, 0x00	; 0
     8b6:	9f 93       	push	r25
     8b8:	8f 93       	push	r24
     8ba:	8e 01       	movw	r16, r28
     8bc:	0f 5f       	subi	r16, 0xFF	; 255
     8be:	1f 4f       	sbci	r17, 0xFF	; 255
     8c0:	1f 93       	push	r17
     8c2:	0f 93       	push	r16
     8c4:	0e 94 d1 09 	call	0x13a2	; 0x13a2 <sprintf>
        lq_print(&lcd1, date_arr);
     8c8:	b8 01       	movw	r22, r16
     8ca:	8c ec       	ldi	r24, 0xCC	; 204
     8cc:	92 e0       	ldi	r25, 0x02	; 2
     8ce:	0e 94 71 02 	call	0x4e2	; 0x4e2 <lq_print>
     8d2:	0f b6       	in	r0, 0x3f	; 63
     8d4:	f8 94       	cli
     8d6:	de bf       	out	0x3e, r29	; 62
     8d8:	0f be       	out	0x3f, r0	; 63
     8da:	cd bf       	out	0x3d, r28	; 61
    }
}
     8dc:	64 96       	adiw	r28, 0x14	; 20
     8de:	0f b6       	in	r0, 0x3f	; 63
     8e0:	f8 94       	cli
     8e2:	de bf       	out	0x3e, r29	; 62
     8e4:	0f be       	out	0x3f, r0	; 63
     8e6:	cd bf       	out	0x3d, r28	; 61
     8e8:	df 91       	pop	r29
     8ea:	cf 91       	pop	r28
     8ec:	1f 91       	pop	r17
     8ee:	0f 91       	pop	r16
     8f0:	ff 90       	pop	r15
     8f2:	ef 90       	pop	r14
     8f4:	08 95       	ret

000008f6 <serial_init_final>:

void serial_init_final(void)
{
    serial_init();
     8f6:	0e 94 5d 03 	call	0x6ba	; 0x6ba <serial_init>
    serial_send_string("Hello there!");
     8fa:	85 e9       	ldi	r24, 0x95	; 149
     8fc:	90 e0       	ldi	r25, 0x00	; 0
     8fe:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <serial_send_string>
    serial_send_string("\rEnter your password to continue.\r");
     902:	82 ea       	ldi	r24, 0xA2	; 162
     904:	90 e0       	ldi	r25, 0x00	; 0
     906:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <serial_send_string>
     90a:	08 95       	ret

0000090c <split_string_by_space>:
}

void split_string_by_space(char *rec)
{
     90c:	af 92       	push	r10
     90e:	bf 92       	push	r11
     910:	cf 92       	push	r12
     912:	df 92       	push	r13
     914:	ef 92       	push	r14
     916:	ff 92       	push	r15
     918:	0f 93       	push	r16
     91a:	1f 93       	push	r17
     91c:	cf 93       	push	r28
     91e:	df 93       	push	r29
     920:	cd b7       	in	r28, 0x3d	; 61
     922:	de b7       	in	r29, 0x3e	; 62
     924:	c0 52       	subi	r28, 0x20	; 32
     926:	d3 40       	sbci	r29, 0x03	; 3
     928:	0f b6       	in	r0, 0x3f	; 63
     92a:	f8 94       	cli
     92c:	de bf       	out	0x3e, r29	; 62
     92e:	0f be       	out	0x3f, r0	; 63
     930:	cd bf       	out	0x3d, r28	; 61
    char first_word[MAX], second_word[MAX], third_word[MAX], fourth_word[MAX];

    strcpy(first_word, "");
     932:	19 82       	std	Y+1, r1	; 0x01
    strcpy(second_word, "");
     934:	8e 01       	movw	r16, r28
     936:	07 53       	subi	r16, 0x37	; 55
     938:	1f 4f       	sbci	r17, 0xFF	; 255
     93a:	f8 01       	movw	r30, r16
     93c:	10 82       	st	Z, r1
    strcpy(third_word, "");
     93e:	6e 01       	movw	r12, r28
     940:	ff e6       	ldi	r31, 0x6F	; 111
     942:	cf 1a       	sub	r12, r31
     944:	fe ef       	ldi	r31, 0xFE	; 254
     946:	df 0a       	sbc	r13, r31
     948:	f6 01       	movw	r30, r12
     94a:	10 82       	st	Z, r1
    strcpy(fourth_word, "");
     94c:	7e 01       	movw	r14, r28
     94e:	f7 ea       	ldi	r31, 0xA7	; 167
     950:	ef 1a       	sub	r14, r31
     952:	fd ef       	ldi	r31, 0xFD	; 253
     954:	ff 0a       	sbc	r15, r31
     956:	f7 01       	movw	r30, r14
     958:	10 82       	st	Z, r1

    sscanf(rec, "%s %s %s %s", first_word, second_word, third_word, fourth_word);
     95a:	ff 92       	push	r15
     95c:	ef 92       	push	r14
     95e:	df 92       	push	r13
     960:	cf 92       	push	r12
     962:	1f 93       	push	r17
     964:	0f 93       	push	r16
     966:	9e 01       	movw	r18, r28
     968:	2f 5f       	subi	r18, 0xFF	; 255
     96a:	3f 4f       	sbci	r19, 0xFF	; 255
     96c:	59 01       	movw	r10, r18
     96e:	3f 93       	push	r19
     970:	2f 93       	push	r18
     972:	25 ec       	ldi	r18, 0xC5	; 197
     974:	30 e0       	ldi	r19, 0x00	; 0
     976:	3f 93       	push	r19
     978:	2f 93       	push	r18
     97a:	9f 93       	push	r25
     97c:	8f 93       	push	r24
     97e:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <sscanf>

    sprintf(cmd_key, "%s %s", first_word, second_word);
     982:	1f 93       	push	r17
     984:	0f 93       	push	r16
     986:	bf 92       	push	r11
     988:	af 92       	push	r10
     98a:	8b ec       	ldi	r24, 0xCB	; 203
     98c:	90 e0       	ldi	r25, 0x00	; 0
     98e:	9f 93       	push	r25
     990:	8f 93       	push	r24
     992:	8b e9       	ldi	r24, 0x9B	; 155
     994:	93 e0       	ldi	r25, 0x03	; 3
     996:	9f 93       	push	r25
     998:	8f 93       	push	r24
     99a:	0e 94 d1 09 	call	0x13a2	; 0x13a2 <sprintf>
    sprintf(cmd_first_value, "%s", third_word);
     99e:	b6 01       	movw	r22, r12
     9a0:	83 e6       	ldi	r24, 0x63	; 99
     9a2:	94 e0       	ldi	r25, 0x04	; 4
     9a4:	0e 94 c2 09 	call	0x1384	; 0x1384 <strcpy>
    sprintf(cmd_second_value, "%s", fourth_word);
     9a8:	b7 01       	movw	r22, r14
     9aa:	83 ed       	ldi	r24, 0xD3	; 211
     9ac:	92 e0       	ldi	r25, 0x02	; 2
     9ae:	0e 94 c2 09 	call	0x1384	; 0x1384 <strcpy>
}
     9b2:	0f b6       	in	r0, 0x3f	; 63
     9b4:	f8 94       	cli
     9b6:	de bf       	out	0x3e, r29	; 62
     9b8:	0f be       	out	0x3f, r0	; 63
     9ba:	cd bf       	out	0x3d, r28	; 61
     9bc:	c0 5e       	subi	r28, 0xE0	; 224
     9be:	dc 4f       	sbci	r29, 0xFC	; 252
     9c0:	0f b6       	in	r0, 0x3f	; 63
     9c2:	f8 94       	cli
     9c4:	de bf       	out	0x3e, r29	; 62
     9c6:	0f be       	out	0x3f, r0	; 63
     9c8:	cd bf       	out	0x3d, r28	; 61
     9ca:	df 91       	pop	r29
     9cc:	cf 91       	pop	r28
     9ce:	1f 91       	pop	r17
     9d0:	0f 91       	pop	r16
     9d2:	ff 90       	pop	r15
     9d4:	ef 90       	pop	r14
     9d6:	df 90       	pop	r13
     9d8:	cf 90       	pop	r12
     9da:	bf 90       	pop	r11
     9dc:	af 90       	pop	r10
     9de:	08 95       	ret

000009e0 <set_date_and_time>:

void set_date_and_time(char *time, char *date)
{
     9e0:	0f 93       	push	r16
     9e2:	1f 93       	push	r17
     9e4:	cf 93       	push	r28
     9e6:	df 93       	push	r29
     9e8:	cd b7       	in	r28, 0x3d	; 61
     9ea:	de b7       	in	r29, 0x3e	; 62
     9ec:	2c 97       	sbiw	r28, 0x0c	; 12
     9ee:	0f b6       	in	r0, 0x3f	; 63
     9f0:	f8 94       	cli
     9f2:	de bf       	out	0x3e, r29	; 62
     9f4:	0f be       	out	0x3f, r0	; 63
     9f6:	cd bf       	out	0x3d, r28	; 61
     9f8:	16 2f       	mov	r17, r22
     9fa:	07 2f       	mov	r16, r23
    int hour, minute, second;
    int day, month, year;

    sscanf(time, "%d:%d:%d", &hour, &minute, &second);
     9fc:	9e 01       	movw	r18, r28
     9fe:	2b 5f       	subi	r18, 0xFB	; 251
     a00:	3f 4f       	sbci	r19, 0xFF	; 255
     a02:	3f 93       	push	r19
     a04:	2f 93       	push	r18
     a06:	22 50       	subi	r18, 0x02	; 2
     a08:	31 09       	sbc	r19, r1
     a0a:	3f 93       	push	r19
     a0c:	2f 93       	push	r18
     a0e:	22 50       	subi	r18, 0x02	; 2
     a10:	31 09       	sbc	r19, r1
     a12:	3f 93       	push	r19
     a14:	2f 93       	push	r18
     a16:	21 ed       	ldi	r18, 0xD1	; 209
     a18:	30 e0       	ldi	r19, 0x00	; 0
     a1a:	3f 93       	push	r19
     a1c:	2f 93       	push	r18
     a1e:	9f 93       	push	r25
     a20:	8f 93       	push	r24
     a22:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <sscanf>
    sscanf(date, "%d/%d/%d", &month, &day, &year);
     a26:	ce 01       	movw	r24, r28
     a28:	0b 96       	adiw	r24, 0x0b	; 11
     a2a:	9f 93       	push	r25
     a2c:	8f 93       	push	r24
     a2e:	04 97       	sbiw	r24, 0x04	; 4
     a30:	9f 93       	push	r25
     a32:	8f 93       	push	r24
     a34:	02 96       	adiw	r24, 0x02	; 2
     a36:	9f 93       	push	r25
     a38:	8f 93       	push	r24
     a3a:	8a ed       	ldi	r24, 0xDA	; 218
     a3c:	90 e0       	ldi	r25, 0x00	; 0
     a3e:	9f 93       	push	r25
     a40:	8f 93       	push	r24
     a42:	0f 93       	push	r16
     a44:	1f 93       	push	r17
     a46:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <sscanf>

    t.Second = second;
     a4a:	e4 ec       	ldi	r30, 0xC4	; 196
     a4c:	f2 e0       	ldi	r31, 0x02	; 2
     a4e:	8d 81       	ldd	r24, Y+5	; 0x05
     a50:	80 83       	st	Z, r24
    t.Minute = minute;
     a52:	8b 81       	ldd	r24, Y+3	; 0x03
     a54:	81 83       	std	Z+1, r24	; 0x01
    t.Hour = hour;
     a56:	89 81       	ldd	r24, Y+1	; 0x01
     a58:	82 83       	std	Z+2, r24	; 0x02
    t.Day = Sunday;
     a5a:	82 e0       	ldi	r24, 0x02	; 2
     a5c:	83 83       	std	Z+3, r24	; 0x03
    t.Date = day;
     a5e:	8f 81       	ldd	r24, Y+7	; 0x07
     a60:	84 83       	std	Z+4, r24	; 0x04
    t.Month = month;
     a62:	89 85       	ldd	r24, Y+9	; 0x09
     a64:	85 83       	std	Z+5, r24	; 0x05
    t.Year = year + 2000;
     a66:	8b 85       	ldd	r24, Y+11	; 0x0b
     a68:	9c 85       	ldd	r25, Y+12	; 0x0c
     a6a:	80 53       	subi	r24, 0x30	; 48
     a6c:	98 4f       	sbci	r25, 0xF8	; 248
     a6e:	97 83       	std	Z+7, r25	; 0x07
     a70:	86 83       	std	Z+6, r24	; 0x06
}
     a72:	0f b6       	in	r0, 0x3f	; 63
     a74:	f8 94       	cli
     a76:	de bf       	out	0x3e, r29	; 62
     a78:	0f be       	out	0x3f, r0	; 63
     a7a:	cd bf       	out	0x3d, r28	; 61
     a7c:	2c 96       	adiw	r28, 0x0c	; 12
     a7e:	0f b6       	in	r0, 0x3f	; 63
     a80:	f8 94       	cli
     a82:	de bf       	out	0x3e, r29	; 62
     a84:	0f be       	out	0x3f, r0	; 63
     a86:	cd bf       	out	0x3d, r28	; 61
     a88:	df 91       	pop	r29
     a8a:	cf 91       	pop	r28
     a8c:	1f 91       	pop	r17
     a8e:	0f 91       	pop	r16
     a90:	08 95       	ret

00000a92 <set_duty_cycle>:

void set_duty_cycle(int duty_cycle)
{
    OCR0 = 255 * duty_cycle / 100;
     a92:	2f ef       	ldi	r18, 0xFF	; 255
     a94:	ac 01       	movw	r20, r24
     a96:	24 9f       	mul	r18, r20
     a98:	c0 01       	movw	r24, r0
     a9a:	25 9f       	mul	r18, r21
     a9c:	90 0d       	add	r25, r0
     a9e:	11 24       	eor	r1, r1
     aa0:	64 e6       	ldi	r22, 0x64	; 100
     aa2:	70 e0       	ldi	r23, 0x00	; 0
     aa4:	0e 94 51 09 	call	0x12a2	; 0x12a2 <__divmodhi4>
     aa8:	6c bf       	out	0x3c, r22	; 60
     aaa:	08 95       	ret

00000aac <rotate_stepper>:
}

void rotate_stepper(int steps, int direction)
{
     aac:	ef 92       	push	r14
     aae:	ff 92       	push	r15
     ab0:	0f 93       	push	r16
     ab2:	1f 93       	push	r17
     ab4:	cf 93       	push	r28
     ab6:	df 93       	push	r29
     ab8:	cd b7       	in	r28, 0x3d	; 61
     aba:	de b7       	in	r29, 0x3e	; 62
     abc:	28 97       	sbiw	r28, 0x08	; 8
     abe:	0f b6       	in	r0, 0x3f	; 63
     ac0:	f8 94       	cli
     ac2:	de bf       	out	0x3e, r29	; 62
     ac4:	0f be       	out	0x3f, r0	; 63
     ac6:	cd bf       	out	0x3d, r28	; 61
     ac8:	8c 01       	movw	r16, r24
    int step_sequence[4] = {0x04, 0x02, 0x08, 0x01};
     aca:	88 e0       	ldi	r24, 0x08	; 8
     acc:	e1 e6       	ldi	r30, 0x61	; 97
     ace:	f0 e0       	ldi	r31, 0x00	; 0
     ad0:	de 01       	movw	r26, r28
     ad2:	11 96       	adiw	r26, 0x01	; 1
     ad4:	01 90       	ld	r0, Z+
     ad6:	0d 92       	st	X+, r0
     ad8:	8a 95       	dec	r24
     ada:	e1 f7       	brne	.-8      	; 0xad4 <rotate_stepper+0x28>
    for (int i = 0; i < steps; i++)
     adc:	10 16       	cp	r1, r16
     ade:	11 06       	cpc	r1, r17
     ae0:	cc f5       	brge	.+114    	; 0xb54 <rotate_stepper+0xa8>
     ae2:	20 e0       	ldi	r18, 0x00	; 0
     ae4:	30 e0       	ldi	r19, 0x00	; 0
     ae6:	ae 01       	movw	r20, r28
     ae8:	4f 5f       	subi	r20, 0xFF	; 255
     aea:	5f 4f       	sbci	r21, 0xFF	; 255
     aec:	7e 01       	movw	r14, r28
     aee:	89 e0       	ldi	r24, 0x09	; 9
     af0:	e8 0e       	add	r14, r24
     af2:	f1 1c       	adc	r15, r1
    {
        if (direction == CW)
     af4:	61 30       	cpi	r22, 0x01	; 1
     af6:	71 05       	cpc	r23, r1
     af8:	39 f5       	brne	.+78     	; 0xb48 <rotate_stepper+0x9c>
     afa:	fe 01       	movw	r30, r28
     afc:	31 96       	adiw	r30, 0x01	; 1
        {
            for (int step = 0; step < 4; step++)
            {
                STEPPER_PORT = step_sequence[step];
     afe:	90 81       	ld	r25, Z
     b00:	32 96       	adiw	r30, 0x02	; 2
     b02:	9b bb       	out	0x1b, r25	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     b04:	9f e7       	ldi	r25, 0x7F	; 127
     b06:	a8 e3       	ldi	r26, 0x38	; 56
     b08:	81 e0       	ldi	r24, 0x01	; 1
     b0a:	91 50       	subi	r25, 0x01	; 1
     b0c:	a0 40       	sbci	r26, 0x00	; 0
     b0e:	80 40       	sbci	r24, 0x00	; 0
     b10:	e1 f7       	brne	.-8      	; 0xb0a <rotate_stepper+0x5e>
     b12:	00 c0       	rjmp	.+0      	; 0xb14 <rotate_stepper+0x68>
     b14:	00 00       	nop
    int step_sequence[4] = {0x04, 0x02, 0x08, 0x01};
    for (int i = 0; i < steps; i++)
    {
        if (direction == CW)
        {
            for (int step = 0; step < 4; step++)
     b16:	ee 15       	cp	r30, r14
     b18:	ff 05       	cpc	r31, r15
     b1a:	89 f7       	brne	.-30     	; 0xafe <rotate_stepper+0x52>
     b1c:	0f c0       	rjmp	.+30     	; 0xb3c <rotate_stepper+0x90>
     b1e:	32 97       	sbiw	r30, 0x02	; 2

        if (direction == CCW)
        {
            for (int step = 3; step >= 0; step--)
            {
                STEPPER_PORT = step_sequence[step];
     b20:	90 81       	ld	r25, Z
     b22:	9b bb       	out	0x1b, r25	; 27
     b24:	9f e7       	ldi	r25, 0x7F	; 127
     b26:	a8 e3       	ldi	r26, 0x38	; 56
     b28:	81 e0       	ldi	r24, 0x01	; 1
     b2a:	91 50       	subi	r25, 0x01	; 1
     b2c:	a0 40       	sbci	r26, 0x00	; 0
     b2e:	80 40       	sbci	r24, 0x00	; 0
     b30:	e1 f7       	brne	.-8      	; 0xb2a <rotate_stepper+0x7e>
     b32:	00 c0       	rjmp	.+0      	; 0xb34 <rotate_stepper+0x88>
     b34:	00 00       	nop
            }
        }

        if (direction == CCW)
        {
            for (int step = 3; step >= 0; step--)
     b36:	4e 17       	cp	r20, r30
     b38:	5f 07       	cpc	r21, r31
     b3a:	89 f7       	brne	.-30     	; 0xb1e <rotate_stepper+0x72>
}

void rotate_stepper(int steps, int direction)
{
    int step_sequence[4] = {0x04, 0x02, 0x08, 0x01};
    for (int i = 0; i < steps; i++)
     b3c:	2f 5f       	subi	r18, 0xFF	; 255
     b3e:	3f 4f       	sbci	r19, 0xFF	; 255
     b40:	02 17       	cp	r16, r18
     b42:	13 07       	cpc	r17, r19
     b44:	b9 f6       	brne	.-82     	; 0xaf4 <rotate_stepper+0x48>
     b46:	06 c0       	rjmp	.+12     	; 0xb54 <rotate_stepper+0xa8>
                STEPPER_PORT = step_sequence[step];
                _delay_ms(50);
            }
        }

        if (direction == CCW)
     b48:	61 15       	cp	r22, r1
     b4a:	71 05       	cpc	r23, r1
     b4c:	b9 f7       	brne	.-18     	; 0xb3c <rotate_stepper+0x90>
     b4e:	fe 01       	movw	r30, r28
     b50:	39 96       	adiw	r30, 0x09	; 9
     b52:	e5 cf       	rjmp	.-54     	; 0xb1e <rotate_stepper+0x72>
                STEPPER_PORT = step_sequence[step];
                _delay_ms(50);
            }
        }
    }
}
     b54:	28 96       	adiw	r28, 0x08	; 8
     b56:	0f b6       	in	r0, 0x3f	; 63
     b58:	f8 94       	cli
     b5a:	de bf       	out	0x3e, r29	; 62
     b5c:	0f be       	out	0x3f, r0	; 63
     b5e:	cd bf       	out	0x3d, r28	; 61
     b60:	df 91       	pop	r29
     b62:	cf 91       	pop	r28
     b64:	1f 91       	pop	r17
     b66:	0f 91       	pop	r16
     b68:	ff 90       	pop	r15
     b6a:	ef 90       	pop	r14
     b6c:	08 95       	ret

00000b6e <rotate_stepper_three_quarter>:

void rotate_stepper_three_quarter(int steps, int direction)
{
     b6e:	cf 93       	push	r28
     b70:	df 93       	push	r29
     b72:	00 d0       	rcall	.+0      	; 0xb74 <rotate_stepper_three_quarter+0x6>
     b74:	00 d0       	rcall	.+0      	; 0xb76 <rotate_stepper_three_quarter+0x8>
     b76:	00 d0       	rcall	.+0      	; 0xb78 <rotate_stepper_three_quarter+0xa>
     b78:	cd b7       	in	r28, 0x3d	; 61
     b7a:	de b7       	in	r29, 0x3e	; 62
    int step_sequence[3] = {0x04, 0x02, 0x08};
     b7c:	26 e0       	ldi	r18, 0x06	; 6
     b7e:	e9 e6       	ldi	r30, 0x69	; 105
     b80:	f0 e0       	ldi	r31, 0x00	; 0
     b82:	de 01       	movw	r26, r28
     b84:	11 96       	adiw	r26, 0x01	; 1
     b86:	01 90       	ld	r0, Z+
     b88:	0d 92       	st	X+, r0
     b8a:	2a 95       	dec	r18
     b8c:	e1 f7       	brne	.-8      	; 0xb86 <rotate_stepper_three_quarter+0x18>
    for (int i = 0; i < steps; i++)
     b8e:	18 16       	cp	r1, r24
     b90:	19 06       	cpc	r1, r25
     b92:	0c f0       	brlt	.+2      	; 0xb96 <rotate_stepper_three_quarter+0x28>
     b94:	51 c0       	rjmp	.+162    	; 0xc38 <rotate_stepper_three_quarter+0xca>
     b96:	20 e0       	ldi	r18, 0x00	; 0
     b98:	30 e0       	ldi	r19, 0x00	; 0
    {
        if (direction == CW)
     b9a:	61 30       	cpi	r22, 0x01	; 1
     b9c:	71 05       	cpc	r23, r1
     b9e:	39 f5       	brne	.+78     	; 0xbee <rotate_stepper_three_quarter+0x80>
        {
            for (int step = 0; step < 3; step++)
            {
                STEPPER_PORT = step_sequence[step];
     ba0:	49 81       	ldd	r20, Y+1	; 0x01
     ba2:	4b bb       	out	0x1b, r20	; 27
     ba4:	4f e7       	ldi	r20, 0x7F	; 127
     ba6:	58 e3       	ldi	r21, 0x38	; 56
     ba8:	e1 e0       	ldi	r30, 0x01	; 1
     baa:	41 50       	subi	r20, 0x01	; 1
     bac:	50 40       	sbci	r21, 0x00	; 0
     bae:	e0 40       	sbci	r30, 0x00	; 0
     bb0:	e1 f7       	brne	.-8      	; 0xbaa <rotate_stepper_three_quarter+0x3c>
     bb2:	00 c0       	rjmp	.+0      	; 0xbb4 <rotate_stepper_three_quarter+0x46>
     bb4:	00 00       	nop
     bb6:	4b 81       	ldd	r20, Y+3	; 0x03
     bb8:	4b bb       	out	0x1b, r20	; 27
     bba:	4f e7       	ldi	r20, 0x7F	; 127
     bbc:	58 e3       	ldi	r21, 0x38	; 56
     bbe:	e1 e0       	ldi	r30, 0x01	; 1
     bc0:	41 50       	subi	r20, 0x01	; 1
     bc2:	50 40       	sbci	r21, 0x00	; 0
     bc4:	e0 40       	sbci	r30, 0x00	; 0
     bc6:	e1 f7       	brne	.-8      	; 0xbc0 <rotate_stepper_three_quarter+0x52>
     bc8:	00 c0       	rjmp	.+0      	; 0xbca <rotate_stepper_three_quarter+0x5c>
     bca:	00 00       	nop
     bcc:	4d 81       	ldd	r20, Y+5	; 0x05
     bce:	4b bb       	out	0x1b, r20	; 27
     bd0:	4f e7       	ldi	r20, 0x7F	; 127
     bd2:	58 e3       	ldi	r21, 0x38	; 56
     bd4:	e1 e0       	ldi	r30, 0x01	; 1
     bd6:	41 50       	subi	r20, 0x01	; 1
     bd8:	50 40       	sbci	r21, 0x00	; 0
     bda:	e0 40       	sbci	r30, 0x00	; 0
     bdc:	e1 f7       	brne	.-8      	; 0xbd6 <rotate_stepper_three_quarter+0x68>
     bde:	00 c0       	rjmp	.+0      	; 0xbe0 <rotate_stepper_three_quarter+0x72>
     be0:	00 00       	nop
}

void rotate_stepper_three_quarter(int steps, int direction)
{
    int step_sequence[3] = {0x04, 0x02, 0x08};
    for (int i = 0; i < steps; i++)
     be2:	2f 5f       	subi	r18, 0xFF	; 255
     be4:	3f 4f       	sbci	r19, 0xFF	; 255
     be6:	82 17       	cp	r24, r18
     be8:	93 07       	cpc	r25, r19
     bea:	b9 f6       	brne	.-82     	; 0xb9a <rotate_stepper_three_quarter+0x2c>
     bec:	25 c0       	rjmp	.+74     	; 0xc38 <rotate_stepper_three_quarter+0xca>
                STEPPER_PORT = step_sequence[step];
                _delay_ms(50);
            }
        }

        if (direction == CCW)
     bee:	61 15       	cp	r22, r1
     bf0:	71 05       	cpc	r23, r1
     bf2:	b9 f7       	brne	.-18     	; 0xbe2 <rotate_stepper_three_quarter+0x74>
        {
            for (int step = 2; step >= 0; step--)
            {
                STEPPER_PORT = step_sequence[step];
     bf4:	4d 81       	ldd	r20, Y+5	; 0x05
     bf6:	4b bb       	out	0x1b, r20	; 27
     bf8:	4f e7       	ldi	r20, 0x7F	; 127
     bfa:	58 e3       	ldi	r21, 0x38	; 56
     bfc:	e1 e0       	ldi	r30, 0x01	; 1
     bfe:	41 50       	subi	r20, 0x01	; 1
     c00:	50 40       	sbci	r21, 0x00	; 0
     c02:	e0 40       	sbci	r30, 0x00	; 0
     c04:	e1 f7       	brne	.-8      	; 0xbfe <rotate_stepper_three_quarter+0x90>
     c06:	00 c0       	rjmp	.+0      	; 0xc08 <rotate_stepper_three_quarter+0x9a>
     c08:	00 00       	nop
     c0a:	4b 81       	ldd	r20, Y+3	; 0x03
     c0c:	4b bb       	out	0x1b, r20	; 27
     c0e:	4f e7       	ldi	r20, 0x7F	; 127
     c10:	58 e3       	ldi	r21, 0x38	; 56
     c12:	e1 e0       	ldi	r30, 0x01	; 1
     c14:	41 50       	subi	r20, 0x01	; 1
     c16:	50 40       	sbci	r21, 0x00	; 0
     c18:	e0 40       	sbci	r30, 0x00	; 0
     c1a:	e1 f7       	brne	.-8      	; 0xc14 <rotate_stepper_three_quarter+0xa6>
     c1c:	00 c0       	rjmp	.+0      	; 0xc1e <rotate_stepper_three_quarter+0xb0>
     c1e:	00 00       	nop
     c20:	49 81       	ldd	r20, Y+1	; 0x01
     c22:	4b bb       	out	0x1b, r20	; 27
     c24:	4f e7       	ldi	r20, 0x7F	; 127
     c26:	58 e3       	ldi	r21, 0x38	; 56
     c28:	e1 e0       	ldi	r30, 0x01	; 1
     c2a:	41 50       	subi	r20, 0x01	; 1
     c2c:	50 40       	sbci	r21, 0x00	; 0
     c2e:	e0 40       	sbci	r30, 0x00	; 0
     c30:	e1 f7       	brne	.-8      	; 0xc2a <rotate_stepper_three_quarter+0xbc>
     c32:	00 c0       	rjmp	.+0      	; 0xc34 <rotate_stepper_three_quarter+0xc6>
     c34:	00 00       	nop
     c36:	d5 cf       	rjmp	.-86     	; 0xbe2 <rotate_stepper_three_quarter+0x74>
                _delay_ms(50);
            }
        }
    }
}
     c38:	26 96       	adiw	r28, 0x06	; 6
     c3a:	0f b6       	in	r0, 0x3f	; 63
     c3c:	f8 94       	cli
     c3e:	de bf       	out	0x3e, r29	; 62
     c40:	0f be       	out	0x3f, r0	; 63
     c42:	cd bf       	out	0x3d, r28	; 61
     c44:	df 91       	pop	r29
     c46:	cf 91       	pop	r28
     c48:	08 95       	ret

00000c4a <function_set_time>:

void function_set_time(void)
{
     c4a:	ef 92       	push	r14
     c4c:	ff 92       	push	r15
     c4e:	0f 93       	push	r16
     c50:	1f 93       	push	r17
     c52:	cf 93       	push	r28
     c54:	df 93       	push	r29
     c56:	cd b7       	in	r28, 0x3d	; 61
     c58:	de b7       	in	r29, 0x3e	; 62
     c5a:	64 97       	sbiw	r28, 0x14	; 20
     c5c:	0f b6       	in	r0, 0x3f	; 63
     c5e:	f8 94       	cli
     c60:	de bf       	out	0x3e, r29	; 62
     c62:	0f be       	out	0x3f, r0	; 63
     c64:	cd bf       	out	0x3d, r28	; 61
    set_date_and_time(cmd_first_value, cmd_second_value);
     c66:	63 ed       	ldi	r22, 0xD3	; 211
     c68:	72 e0       	ldi	r23, 0x02	; 2
     c6a:	83 e6       	ldi	r24, 0x63	; 99
     c6c:	94 e0       	ldi	r25, 0x04	; 4
     c6e:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <set_date_and_time>
    RTC_Set(t);
     c72:	20 91 c4 02 	lds	r18, 0x02C4	; 0x8002c4 <t>
     c76:	30 91 c5 02 	lds	r19, 0x02C5	; 0x8002c5 <t+0x1>
     c7a:	40 91 c6 02 	lds	r20, 0x02C6	; 0x8002c6 <t+0x2>
     c7e:	50 91 c7 02 	lds	r21, 0x02C7	; 0x8002c7 <t+0x3>
     c82:	60 91 c8 02 	lds	r22, 0x02C8	; 0x8002c8 <t+0x4>
     c86:	70 91 c9 02 	lds	r23, 0x02C9	; 0x8002c9 <t+0x5>
     c8a:	80 91 ca 02 	lds	r24, 0x02CA	; 0x8002ca <t+0x6>
     c8e:	90 91 cb 02 	lds	r25, 0x02CB	; 0x8002cb <t+0x7>
     c92:	0e 94 21 01 	call	0x242	; 0x242 <RTC_Set>
    t = RTC_Get();
     c96:	0e 94 75 01 	call	0x2ea	; 0x2ea <RTC_Get>
     c9a:	e4 ec       	ldi	r30, 0xC4	; 196
     c9c:	f2 e0       	ldi	r31, 0x02	; 2
     c9e:	20 83       	st	Z, r18
     ca0:	31 83       	std	Z+1, r19	; 0x01
     ca2:	42 83       	std	Z+2, r20	; 0x02
     ca4:	53 83       	std	Z+3, r21	; 0x03
     ca6:	64 83       	std	Z+4, r22	; 0x04
     ca8:	75 83       	std	Z+5, r23	; 0x05
     caa:	86 83       	std	Z+6, r24	; 0x06
     cac:	97 83       	std	Z+7, r25	; 0x07
    if (RTC_Status() == RTC_OK)
     cae:	0e 94 59 00 	call	0xb2	; 0xb2 <RTC_Status>
     cb2:	81 30       	cpi	r24, 0x01	; 1
     cb4:	09 f0       	breq	.+2      	; 0xcb8 <function_set_time+0x6e>
     cb6:	49 c0       	rjmp	.+146    	; 0xd4a <function_set_time+0x100>
    {
        lq_setCursor(&lcd1, 0, 0);
     cb8:	40 e0       	ldi	r20, 0x00	; 0
     cba:	60 e0       	ldi	r22, 0x00	; 0
     cbc:	8c ec       	ldi	r24, 0xCC	; 204
     cbe:	92 e0       	ldi	r25, 0x02	; 2
     cc0:	0e 94 8b 02 	call	0x516	; 0x516 <lq_setCursor>
        char time_arr[10];
        sprintf(time_arr, "%02d:%02d:%02d", t.Hour, t.Minute, t.Second);
     cc4:	04 ec       	ldi	r16, 0xC4	; 196
     cc6:	12 e0       	ldi	r17, 0x02	; 2
     cc8:	f8 01       	movw	r30, r16
     cca:	80 81       	ld	r24, Z
     ccc:	1f 92       	push	r1
     cce:	8f 93       	push	r24
     cd0:	81 81       	ldd	r24, Z+1	; 0x01
     cd2:	1f 92       	push	r1
     cd4:	8f 93       	push	r24
     cd6:	82 81       	ldd	r24, Z+2	; 0x02
     cd8:	1f 92       	push	r1
     cda:	8f 93       	push	r24
     cdc:	87 e7       	ldi	r24, 0x77	; 119
     cde:	90 e0       	ldi	r25, 0x00	; 0
     ce0:	9f 93       	push	r25
     ce2:	8f 93       	push	r24
     ce4:	7e 01       	movw	r14, r28
     ce6:	fb e0       	ldi	r31, 0x0B	; 11
     ce8:	ef 0e       	add	r14, r31
     cea:	f1 1c       	adc	r15, r1
     cec:	ff 92       	push	r15
     cee:	ef 92       	push	r14
     cf0:	0e 94 d1 09 	call	0x13a2	; 0x13a2 <sprintf>
        lq_print(&lcd1, time_arr);
     cf4:	b7 01       	movw	r22, r14
     cf6:	8c ec       	ldi	r24, 0xCC	; 204
     cf8:	92 e0       	ldi	r25, 0x02	; 2
     cfa:	0e 94 71 02 	call	0x4e2	; 0x4e2 <lq_print>

        lq_setCursor(&lcd1, 1, 0);
     cfe:	40 e0       	ldi	r20, 0x00	; 0
     d00:	61 e0       	ldi	r22, 0x01	; 1
     d02:	8c ec       	ldi	r24, 0xCC	; 204
     d04:	92 e0       	ldi	r25, 0x02	; 2
     d06:	0e 94 8b 02 	call	0x516	; 0x516 <lq_setCursor>
        char date_arr[10];
        sprintf(date_arr, "%02d/%02d/%02d", t.Year, t.Month, t.Date);
     d0a:	f8 01       	movw	r30, r16
     d0c:	84 81       	ldd	r24, Z+4	; 0x04
     d0e:	1f 92       	push	r1
     d10:	8f 93       	push	r24
     d12:	85 81       	ldd	r24, Z+5	; 0x05
     d14:	1f 92       	push	r1
     d16:	8f 93       	push	r24
     d18:	87 81       	ldd	r24, Z+7	; 0x07
     d1a:	8f 93       	push	r24
     d1c:	86 81       	ldd	r24, Z+6	; 0x06
     d1e:	8f 93       	push	r24
     d20:	86 e8       	ldi	r24, 0x86	; 134
     d22:	90 e0       	ldi	r25, 0x00	; 0
     d24:	9f 93       	push	r25
     d26:	8f 93       	push	r24
     d28:	8e 01       	movw	r16, r28
     d2a:	0f 5f       	subi	r16, 0xFF	; 255
     d2c:	1f 4f       	sbci	r17, 0xFF	; 255
     d2e:	1f 93       	push	r17
     d30:	0f 93       	push	r16
     d32:	0e 94 d1 09 	call	0x13a2	; 0x13a2 <sprintf>
        lq_print(&lcd1, date_arr);
     d36:	b8 01       	movw	r22, r16
     d38:	8c ec       	ldi	r24, 0xCC	; 204
     d3a:	92 e0       	ldi	r25, 0x02	; 2
     d3c:	0e 94 71 02 	call	0x4e2	; 0x4e2 <lq_print>
     d40:	0f b6       	in	r0, 0x3f	; 63
     d42:	f8 94       	cli
     d44:	de bf       	out	0x3e, r29	; 62
     d46:	0f be       	out	0x3f, r0	; 63
     d48:	cd bf       	out	0x3d, r28	; 61
    }
    serial_send_string("\rDone.\r");
     d4a:	83 ee       	ldi	r24, 0xE3	; 227
     d4c:	90 e0       	ldi	r25, 0x00	; 0
     d4e:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <serial_send_string>
}
     d52:	64 96       	adiw	r28, 0x14	; 20
     d54:	0f b6       	in	r0, 0x3f	; 63
     d56:	f8 94       	cli
     d58:	de bf       	out	0x3e, r29	; 62
     d5a:	0f be       	out	0x3f, r0	; 63
     d5c:	cd bf       	out	0x3d, r28	; 61
     d5e:	df 91       	pop	r29
     d60:	cf 91       	pop	r28
     d62:	1f 91       	pop	r17
     d64:	0f 91       	pop	r16
     d66:	ff 90       	pop	r15
     d68:	ef 90       	pop	r14
     d6a:	08 95       	ret

00000d6c <function_set_lamp>:

void function_set_lamp(void)
{
     d6c:	0f 93       	push	r16
     d6e:	1f 93       	push	r17
     d70:	cf 93       	push	r28
     d72:	df 93       	push	r29
     d74:	cd b7       	in	r28, 0x3d	; 61
     d76:	de b7       	in	r29, 0x3e	; 62
     d78:	2a 97       	sbiw	r28, 0x0a	; 10
     d7a:	0f b6       	in	r0, 0x3f	; 63
     d7c:	f8 94       	cli
     d7e:	de bf       	out	0x3e, r29	; 62
     d80:	0f be       	out	0x3f, r0	; 63
     d82:	cd bf       	out	0x3d, r28	; 61
    int duty_cycle = atoi(cmd_first_value);
     d84:	83 e6       	ldi	r24, 0x63	; 99
     d86:	94 e0       	ldi	r25, 0x04	; 4
     d88:	0e 94 9b 09 	call	0x1336	; 0x1336 <atoi>
     d8c:	18 2f       	mov	r17, r24
     d8e:	09 2f       	mov	r16, r25
    set_duty_cycle(duty_cycle);
     d90:	0e 94 49 05 	call	0xa92	; 0xa92 <set_duty_cycle>

    lq_setCursor(&lcd1, 1, 12);
     d94:	4c e0       	ldi	r20, 0x0C	; 12
     d96:	61 e0       	ldi	r22, 0x01	; 1
     d98:	8c ec       	ldi	r24, 0xCC	; 204
     d9a:	92 e0       	ldi	r25, 0x02	; 2
     d9c:	0e 94 8b 02 	call	0x516	; 0x516 <lq_setCursor>
    char duty_cycle_arr[10];
    sprintf(duty_cycle_arr, "%3d%%", duty_cycle);
     da0:	0f 93       	push	r16
     da2:	1f 93       	push	r17
     da4:	8b ee       	ldi	r24, 0xEB	; 235
     da6:	90 e0       	ldi	r25, 0x00	; 0
     da8:	9f 93       	push	r25
     daa:	8f 93       	push	r24
     dac:	8e 01       	movw	r16, r28
     dae:	0f 5f       	subi	r16, 0xFF	; 255
     db0:	1f 4f       	sbci	r17, 0xFF	; 255
     db2:	1f 93       	push	r17
     db4:	0f 93       	push	r16
     db6:	0e 94 d1 09 	call	0x13a2	; 0x13a2 <sprintf>
    lq_print(&lcd1, duty_cycle_arr);
     dba:	b8 01       	movw	r22, r16
     dbc:	8c ec       	ldi	r24, 0xCC	; 204
     dbe:	92 e0       	ldi	r25, 0x02	; 2
     dc0:	0e 94 71 02 	call	0x4e2	; 0x4e2 <lq_print>
    serial_send_string("\rDone.\r");
     dc4:	83 ee       	ldi	r24, 0xE3	; 227
     dc6:	90 e0       	ldi	r25, 0x00	; 0
     dc8:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <serial_send_string>
}
     dcc:	0f 90       	pop	r0
     dce:	0f 90       	pop	r0
     dd0:	0f 90       	pop	r0
     dd2:	0f 90       	pop	r0
     dd4:	0f 90       	pop	r0
     dd6:	0f 90       	pop	r0
     dd8:	2a 96       	adiw	r28, 0x0a	; 10
     dda:	0f b6       	in	r0, 0x3f	; 63
     ddc:	f8 94       	cli
     dde:	de bf       	out	0x3e, r29	; 62
     de0:	0f be       	out	0x3f, r0	; 63
     de2:	cd bf       	out	0x3d, r28	; 61
     de4:	df 91       	pop	r29
     de6:	cf 91       	pop	r28
     de8:	1f 91       	pop	r17
     dea:	0f 91       	pop	r16
     dec:	08 95       	ret

00000dee <function_open_curtain>:

void function_open_curtain(void)
{
    if (!is_open)
     dee:	80 91 b5 02 	lds	r24, 0x02B5	; 0x8002b5 <is_open>
     df2:	81 11       	cpse	r24, r1
     df4:	24 c0       	rjmp	.+72     	; 0xe3e <function_open_curtain+0x50>
    {
        serial_send_string("\rOpening...\r");
     df6:	81 ef       	ldi	r24, 0xF1	; 241
     df8:	90 e0       	ldi	r25, 0x00	; 0
     dfa:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <serial_send_string>
        rotate_stepper(9, CW);
     dfe:	61 e0       	ldi	r22, 0x01	; 1
     e00:	70 e0       	ldi	r23, 0x00	; 0
     e02:	89 e0       	ldi	r24, 0x09	; 9
     e04:	90 e0       	ldi	r25, 0x00	; 0
     e06:	0e 94 56 05 	call	0xaac	; 0xaac <rotate_stepper>
        rotate_stepper_three_quarter(1, CW);
     e0a:	61 e0       	ldi	r22, 0x01	; 1
     e0c:	70 e0       	ldi	r23, 0x00	; 0
     e0e:	81 e0       	ldi	r24, 0x01	; 1
     e10:	90 e0       	ldi	r25, 0x00	; 0
     e12:	0e 94 b7 05 	call	0xb6e	; 0xb6e <rotate_stepper_three_quarter>

        lq_setCursor(&lcd1, 0, 13);
     e16:	4d e0       	ldi	r20, 0x0D	; 13
     e18:	60 e0       	ldi	r22, 0x00	; 0
     e1a:	8c ec       	ldi	r24, 0xCC	; 204
     e1c:	92 e0       	ldi	r25, 0x02	; 2
     e1e:	0e 94 8b 02 	call	0x516	; 0x516 <lq_setCursor>
        lq_print(&lcd1, "ON ");
     e22:	6e ef       	ldi	r22, 0xFE	; 254
     e24:	70 e0       	ldi	r23, 0x00	; 0
     e26:	8c ec       	ldi	r24, 0xCC	; 204
     e28:	92 e0       	ldi	r25, 0x02	; 2
     e2a:	0e 94 71 02 	call	0x4e2	; 0x4e2 <lq_print>
        serial_send_string("\rDone.\r");
     e2e:	83 ee       	ldi	r24, 0xE3	; 227
     e30:	90 e0       	ldi	r25, 0x00	; 0
     e32:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <serial_send_string>
        is_open = true;
     e36:	81 e0       	ldi	r24, 0x01	; 1
     e38:	80 93 b5 02 	sts	0x02B5, r24	; 0x8002b5 <is_open>
     e3c:	08 95       	ret
    }
    else
    {
        serial_send_string("\rThe curtain is already open!\r");
     e3e:	82 e0       	ldi	r24, 0x02	; 2
     e40:	91 e0       	ldi	r25, 0x01	; 1
     e42:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <serial_send_string>
     e46:	08 95       	ret

00000e48 <function_close_curtain>:
    }
}

void function_close_curtain(void)
{
    if (is_open)
     e48:	80 91 b5 02 	lds	r24, 0x02B5	; 0x8002b5 <is_open>
     e4c:	88 23       	and	r24, r24
     e4e:	19 f1       	breq	.+70     	; 0xe96 <function_close_curtain+0x4e>
    {
        serial_send_string("\rClosing...\r");
     e50:	81 e2       	ldi	r24, 0x21	; 33
     e52:	91 e0       	ldi	r25, 0x01	; 1
     e54:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <serial_send_string>
        rotate_stepper_three_quarter(1, CCW);
     e58:	60 e0       	ldi	r22, 0x00	; 0
     e5a:	70 e0       	ldi	r23, 0x00	; 0
     e5c:	81 e0       	ldi	r24, 0x01	; 1
     e5e:	90 e0       	ldi	r25, 0x00	; 0
     e60:	0e 94 b7 05 	call	0xb6e	; 0xb6e <rotate_stepper_three_quarter>
        rotate_stepper(9, CCW);
     e64:	60 e0       	ldi	r22, 0x00	; 0
     e66:	70 e0       	ldi	r23, 0x00	; 0
     e68:	89 e0       	ldi	r24, 0x09	; 9
     e6a:	90 e0       	ldi	r25, 0x00	; 0
     e6c:	0e 94 56 05 	call	0xaac	; 0xaac <rotate_stepper>

        lq_setCursor(&lcd1, 0, 13);
     e70:	4d e0       	ldi	r20, 0x0D	; 13
     e72:	60 e0       	ldi	r22, 0x00	; 0
     e74:	8c ec       	ldi	r24, 0xCC	; 204
     e76:	92 e0       	ldi	r25, 0x02	; 2
     e78:	0e 94 8b 02 	call	0x516	; 0x516 <lq_setCursor>
        lq_print(&lcd1, "OFF");
     e7c:	6f e6       	ldi	r22, 0x6F	; 111
     e7e:	70 e0       	ldi	r23, 0x00	; 0
     e80:	8c ec       	ldi	r24, 0xCC	; 204
     e82:	92 e0       	ldi	r25, 0x02	; 2
     e84:	0e 94 71 02 	call	0x4e2	; 0x4e2 <lq_print>
        serial_send_string("\rDone.\r");
     e88:	83 ee       	ldi	r24, 0xE3	; 227
     e8a:	90 e0       	ldi	r25, 0x00	; 0
     e8c:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <serial_send_string>
        is_open = false;
     e90:	10 92 b5 02 	sts	0x02B5, r1	; 0x8002b5 <is_open>
     e94:	08 95       	ret
    }
    else
    {
        serial_send_string("\rThe curtain is already close!\r");
     e96:	8e e2       	ldi	r24, 0x2E	; 46
     e98:	91 e0       	ldi	r25, 0x01	; 1
     e9a:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <serial_send_string>
     e9e:	08 95       	ret

00000ea0 <function_help>:
    }
}

void function_help(void)
{
    serial_send_string("\r******  << Help >>  ******\r");
     ea0:	8e e4       	ldi	r24, 0x4E	; 78
     ea2:	91 e0       	ldi	r25, 0x01	; 1
     ea4:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <serial_send_string>
    serial_send_string("\r   set time (XX:YY:ZZ M/D/Y)\r");
     ea8:	8b e6       	ldi	r24, 0x6B	; 107
     eaa:	91 e0       	ldi	r25, 0x01	; 1
     eac:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <serial_send_string>
    serial_send_string("-> Sets the desired time\r");
     eb0:	8a e8       	ldi	r24, 0x8A	; 138
     eb2:	91 e0       	ldi	r25, 0x01	; 1
     eb4:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <serial_send_string>
    serial_send_string("\r   set lamp (0 to 100)\r");
     eb8:	84 ea       	ldi	r24, 0xA4	; 164
     eba:	91 e0       	ldi	r25, 0x01	; 1
     ebc:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <serial_send_string>
    serial_send_string("-> Sets the room brightness\r");
     ec0:	8d eb       	ldi	r24, 0xBD	; 189
     ec2:	91 e0       	ldi	r25, 0x01	; 1
     ec4:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <serial_send_string>
    serial_send_string("\r   open curtain\r");
     ec8:	8a ed       	ldi	r24, 0xDA	; 218
     eca:	91 e0       	ldi	r25, 0x01	; 1
     ecc:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <serial_send_string>
    serial_send_string("-> Opens the curtain\r");
     ed0:	8c ee       	ldi	r24, 0xEC	; 236
     ed2:	91 e0       	ldi	r25, 0x01	; 1
     ed4:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <serial_send_string>
    serial_send_string("\r   close curtain\r");
     ed8:	82 e0       	ldi	r24, 0x02	; 2
     eda:	92 e0       	ldi	r25, 0x02	; 2
     edc:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <serial_send_string>
    serial_send_string("-> Closes the curtain\r");
     ee0:	85 e1       	ldi	r24, 0x15	; 21
     ee2:	92 e0       	ldi	r25, 0x02	; 2
     ee4:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <serial_send_string>
     ee8:	08 95       	ret

00000eea <function_after_one_second>:
}

void function_after_one_second(void)
{
     eea:	ef 92       	push	r14
     eec:	ff 92       	push	r15
     eee:	0f 93       	push	r16
     ef0:	1f 93       	push	r17
     ef2:	cf 93       	push	r28
     ef4:	df 93       	push	r29
     ef6:	cd b7       	in	r28, 0x3d	; 61
     ef8:	de b7       	in	r29, 0x3e	; 62
     efa:	64 97       	sbiw	r28, 0x14	; 20
     efc:	0f b6       	in	r0, 0x3f	; 63
     efe:	f8 94       	cli
     f00:	de bf       	out	0x3e, r29	; 62
     f02:	0f be       	out	0x3f, r0	; 63
     f04:	cd bf       	out	0x3d, r28	; 61
    t = RTC_Get();
     f06:	0e 94 75 01 	call	0x2ea	; 0x2ea <RTC_Get>
     f0a:	e4 ec       	ldi	r30, 0xC4	; 196
     f0c:	f2 e0       	ldi	r31, 0x02	; 2
     f0e:	20 83       	st	Z, r18
     f10:	31 83       	std	Z+1, r19	; 0x01
     f12:	42 83       	std	Z+2, r20	; 0x02
     f14:	53 83       	std	Z+3, r21	; 0x03
     f16:	64 83       	std	Z+4, r22	; 0x04
     f18:	75 83       	std	Z+5, r23	; 0x05
     f1a:	86 83       	std	Z+6, r24	; 0x06
     f1c:	97 83       	std	Z+7, r25	; 0x07
    if (RTC_Status() == RTC_OK)
     f1e:	0e 94 59 00 	call	0xb2	; 0xb2 <RTC_Status>
     f22:	81 30       	cpi	r24, 0x01	; 1
     f24:	09 f0       	breq	.+2      	; 0xf28 <function_after_one_second+0x3e>
     f26:	49 c0       	rjmp	.+146    	; 0xfba <function_after_one_second+0xd0>
    {
        lq_setCursor(&lcd1, 0, 0);
     f28:	40 e0       	ldi	r20, 0x00	; 0
     f2a:	60 e0       	ldi	r22, 0x00	; 0
     f2c:	8c ec       	ldi	r24, 0xCC	; 204
     f2e:	92 e0       	ldi	r25, 0x02	; 2
     f30:	0e 94 8b 02 	call	0x516	; 0x516 <lq_setCursor>
        char time_arr[10];
        sprintf(time_arr, "%02d:%02d:%02d", t.Hour, t.Minute, t.Second);
     f34:	04 ec       	ldi	r16, 0xC4	; 196
     f36:	12 e0       	ldi	r17, 0x02	; 2
     f38:	f8 01       	movw	r30, r16
     f3a:	80 81       	ld	r24, Z
     f3c:	1f 92       	push	r1
     f3e:	8f 93       	push	r24
     f40:	81 81       	ldd	r24, Z+1	; 0x01
     f42:	1f 92       	push	r1
     f44:	8f 93       	push	r24
     f46:	82 81       	ldd	r24, Z+2	; 0x02
     f48:	1f 92       	push	r1
     f4a:	8f 93       	push	r24
     f4c:	87 e7       	ldi	r24, 0x77	; 119
     f4e:	90 e0       	ldi	r25, 0x00	; 0
     f50:	9f 93       	push	r25
     f52:	8f 93       	push	r24
     f54:	7e 01       	movw	r14, r28
     f56:	fb e0       	ldi	r31, 0x0B	; 11
     f58:	ef 0e       	add	r14, r31
     f5a:	f1 1c       	adc	r15, r1
     f5c:	ff 92       	push	r15
     f5e:	ef 92       	push	r14
     f60:	0e 94 d1 09 	call	0x13a2	; 0x13a2 <sprintf>
        lq_print(&lcd1, time_arr);
     f64:	b7 01       	movw	r22, r14
     f66:	8c ec       	ldi	r24, 0xCC	; 204
     f68:	92 e0       	ldi	r25, 0x02	; 2
     f6a:	0e 94 71 02 	call	0x4e2	; 0x4e2 <lq_print>

        lq_setCursor(&lcd1, 1, 0);
     f6e:	40 e0       	ldi	r20, 0x00	; 0
     f70:	61 e0       	ldi	r22, 0x01	; 1
     f72:	8c ec       	ldi	r24, 0xCC	; 204
     f74:	92 e0       	ldi	r25, 0x02	; 2
     f76:	0e 94 8b 02 	call	0x516	; 0x516 <lq_setCursor>
        char date_arr[10];
        sprintf(date_arr, "%02d/%02d/%02d", t.Year, t.Month, t.Date);
     f7a:	f8 01       	movw	r30, r16
     f7c:	84 81       	ldd	r24, Z+4	; 0x04
     f7e:	1f 92       	push	r1
     f80:	8f 93       	push	r24
     f82:	85 81       	ldd	r24, Z+5	; 0x05
     f84:	1f 92       	push	r1
     f86:	8f 93       	push	r24
     f88:	87 81       	ldd	r24, Z+7	; 0x07
     f8a:	8f 93       	push	r24
     f8c:	86 81       	ldd	r24, Z+6	; 0x06
     f8e:	8f 93       	push	r24
     f90:	86 e8       	ldi	r24, 0x86	; 134
     f92:	90 e0       	ldi	r25, 0x00	; 0
     f94:	9f 93       	push	r25
     f96:	8f 93       	push	r24
     f98:	8e 01       	movw	r16, r28
     f9a:	0f 5f       	subi	r16, 0xFF	; 255
     f9c:	1f 4f       	sbci	r17, 0xFF	; 255
     f9e:	1f 93       	push	r17
     fa0:	0f 93       	push	r16
     fa2:	0e 94 d1 09 	call	0x13a2	; 0x13a2 <sprintf>
        lq_print(&lcd1, date_arr);
     fa6:	b8 01       	movw	r22, r16
     fa8:	8c ec       	ldi	r24, 0xCC	; 204
     faa:	92 e0       	ldi	r25, 0x02	; 2
     fac:	0e 94 71 02 	call	0x4e2	; 0x4e2 <lq_print>
     fb0:	0f b6       	in	r0, 0x3f	; 63
     fb2:	f8 94       	cli
     fb4:	de bf       	out	0x3e, r29	; 62
     fb6:	0f be       	out	0x3f, r0	; 63
     fb8:	cd bf       	out	0x3d, r28	; 61
    }
}
     fba:	64 96       	adiw	r28, 0x14	; 20
     fbc:	0f b6       	in	r0, 0x3f	; 63
     fbe:	f8 94       	cli
     fc0:	de bf       	out	0x3e, r29	; 62
     fc2:	0f be       	out	0x3f, r0	; 63
     fc4:	cd bf       	out	0x3d, r28	; 61
     fc6:	df 91       	pop	r29
     fc8:	cf 91       	pop	r28
     fca:	1f 91       	pop	r17
     fcc:	0f 91       	pop	r16
     fce:	ff 90       	pop	r15
     fd0:	ef 90       	pop	r14
     fd2:	08 95       	ret

00000fd4 <function_session_timeout>:

void function_session_timeout(void)
{
    login = false;
     fd4:	10 92 b2 02 	sts	0x02B2, r1	; 0x8002b2 <login>
    serial_send_string("\rSession timeout!");
     fd8:	8c e2       	ldi	r24, 0x2C	; 44
     fda:	92 e0       	ldi	r25, 0x02	; 2
     fdc:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <serial_send_string>
    serial_send_string("\rEnter your password to continue.\r");
     fe0:	82 ea       	ldi	r24, 0xA2	; 162
     fe2:	90 e0       	ldi	r25, 0x00	; 0
     fe4:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <serial_send_string>
    counter = 0;
     fe8:	10 92 bc 02 	sts	0x02BC, r1	; 0x8002bc <counter+0x1>
     fec:	10 92 bb 02 	sts	0x02BB, r1	; 0x8002bb <counter>
     ff0:	08 95       	ret

00000ff2 <password_validation>:
}

void password_validation(char c)
{
     ff2:	cf 93       	push	r28
     ff4:	df 93       	push	r29
     ff6:	cd b7       	in	r28, 0x3d	; 61
     ff8:	de b7       	in	r29, 0x3e	; 62
     ffa:	c8 5c       	subi	r28, 0xC8	; 200
     ffc:	d1 09       	sbc	r29, r1
     ffe:	0f b6       	in	r0, 0x3f	; 63
    1000:	f8 94       	cli
    1002:	de bf       	out	0x3e, r29	; 62
    1004:	0f be       	out	0x3f, r0	; 63
    1006:	cd bf       	out	0x3d, r28	; 61
    static uint8_t index = 0;
    char rec[MAX];

    if (c == '\r')
    1008:	8d 30       	cpi	r24, 0x0D	; 13
    100a:	39 f4       	brne	.+14     	; 0x101a <password_validation+0x28>
    {
        rec[index] = '\0';
    100c:	80 91 b1 02 	lds	r24, 0x02B1	; 0x8002b1 <index.2617>
    1010:	fe 01       	movw	r30, r28
    1012:	e8 0f       	add	r30, r24
    1014:	f1 1d       	adc	r31, r1
    1016:	11 82       	std	Z+1, r1	; 0x01
    1018:	08 c0       	rjmp	.+16     	; 0x102a <password_validation+0x38>
    }
    else
    {
        rec[index] = c;
    101a:	90 91 b1 02 	lds	r25, 0x02B1	; 0x8002b1 <index.2617>
    101e:	fe 01       	movw	r30, r28
    1020:	e9 0f       	add	r30, r25
    1022:	f1 1d       	adc	r31, r1
    1024:	81 83       	std	Z+1, r24	; 0x01
    }

    if (rec[index] == '\0')
    1026:	81 11       	cpse	r24, r1
    1028:	1d c0       	rjmp	.+58     	; 0x1064 <password_validation+0x72>
    {

        if (strcmp(rec, "1234") == 0)
    102a:	6e e3       	ldi	r22, 0x3E	; 62
    102c:	72 e0       	ldi	r23, 0x02	; 2
    102e:	ce 01       	movw	r24, r28
    1030:	01 96       	adiw	r24, 0x01	; 1
    1032:	0e 94 b9 09 	call	0x1372	; 0x1372 <strcmp>
    1036:	89 2b       	or	r24, r25
    1038:	71 f4       	brne	.+28     	; 0x1056 <password_validation+0x64>
        {
            login = true;
    103a:	81 e0       	ldi	r24, 0x01	; 1
    103c:	80 93 b2 02 	sts	0x02B2, r24	; 0x8002b2 <login>
            after_one_minute = false;
    1040:	10 92 b3 02 	sts	0x02B3, r1	; 0x8002b3 <after_one_minute>
            counter = 0;
    1044:	10 92 bc 02 	sts	0x02BC, r1	; 0x8002bc <counter+0x1>
    1048:	10 92 bb 02 	sts	0x02BB, r1	; 0x8002bb <counter>
            serial_send_string("\rWelcome back, I'm ready!\r");
    104c:	83 e4       	ldi	r24, 0x43	; 67
    104e:	92 e0       	ldi	r25, 0x02	; 2
    1050:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <serial_send_string>
    1054:	04 c0       	rjmp	.+8      	; 0x105e <password_validation+0x6c>
        }
        else
        {
            serial_send_string("\rIncorrect password!\r");
    1056:	8e e5       	ldi	r24, 0x5E	; 94
    1058:	92 e0       	ldi	r25, 0x02	; 2
    105a:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <serial_send_string>
        }
        strcpy(rec, "");
        index = 0;
    105e:	10 92 b1 02 	sts	0x02B1, r1	; 0x8002b1 <index.2617>
    1062:	03 c0       	rjmp	.+6      	; 0x106a <password_validation+0x78>
    }
    else
    {
        index++;
    1064:	9f 5f       	subi	r25, 0xFF	; 255
    1066:	90 93 b1 02 	sts	0x02B1, r25	; 0x8002b1 <index.2617>
    }
}
    106a:	c8 53       	subi	r28, 0x38	; 56
    106c:	df 4f       	sbci	r29, 0xFF	; 255
    106e:	0f b6       	in	r0, 0x3f	; 63
    1070:	f8 94       	cli
    1072:	de bf       	out	0x3e, r29	; 62
    1074:	0f be       	out	0x3f, r0	; 63
    1076:	cd bf       	out	0x3d, r28	; 61
    1078:	df 91       	pop	r29
    107a:	cf 91       	pop	r28
    107c:	08 95       	ret

0000107e <get_user_cmd>:

void get_user_cmd(char c)
{
    107e:	cf 93       	push	r28
    1080:	df 93       	push	r29
    1082:	cd b7       	in	r28, 0x3d	; 61
    1084:	de b7       	in	r29, 0x3e	; 62
    1086:	c8 5c       	subi	r28, 0xC8	; 200
    1088:	d1 09       	sbc	r29, r1
    108a:	0f b6       	in	r0, 0x3f	; 63
    108c:	f8 94       	cli
    108e:	de bf       	out	0x3e, r29	; 62
    1090:	0f be       	out	0x3f, r0	; 63
    1092:	cd bf       	out	0x3d, r28	; 61
    static uint8_t index = 0;
    char rec[MAX];

    if (c == '\r')
    1094:	8d 30       	cpi	r24, 0x0D	; 13
    1096:	39 f4       	brne	.+14     	; 0x10a6 <get_user_cmd+0x28>
    {
        rec[index] = '\0';
    1098:	80 91 b0 02 	lds	r24, 0x02B0	; 0x8002b0 <__data_end>
    109c:	fe 01       	movw	r30, r28
    109e:	e8 0f       	add	r30, r24
    10a0:	f1 1d       	adc	r31, r1
    10a2:	11 82       	std	Z+1, r1	; 0x01
    10a4:	08 c0       	rjmp	.+16     	; 0x10b6 <get_user_cmd+0x38>
    }
    else
    {
        rec[index] = c;
    10a6:	90 91 b0 02 	lds	r25, 0x02B0	; 0x8002b0 <__data_end>
    10aa:	fe 01       	movw	r30, r28
    10ac:	e9 0f       	add	r30, r25
    10ae:	f1 1d       	adc	r31, r1
    10b0:	81 83       	std	Z+1, r24	; 0x01
    }

    if (rec[index] == '\0')
    10b2:	81 11       	cpse	r24, r1
    10b4:	47 c0       	rjmp	.+142    	; 0x1144 <get_user_cmd+0xc6>
    {
        split_string_by_space(rec);
    10b6:	ce 01       	movw	r24, r28
    10b8:	01 96       	adiw	r24, 0x01	; 1
    10ba:	0e 94 86 04 	call	0x90c	; 0x90c <split_string_by_space>

        if (strcmp(cmd_key, "set time") == 0)
    10be:	64 e7       	ldi	r22, 0x74	; 116
    10c0:	72 e0       	ldi	r23, 0x02	; 2
    10c2:	8b e9       	ldi	r24, 0x9B	; 155
    10c4:	93 e0       	ldi	r25, 0x03	; 3
    10c6:	0e 94 b9 09 	call	0x1372	; 0x1372 <strcmp>
    10ca:	89 2b       	or	r24, r25
    10cc:	21 f4       	brne	.+8      	; 0x10d6 <get_user_cmd+0x58>
        {
            set_time = true;
    10ce:	81 e0       	ldi	r24, 0x01	; 1
    10d0:	80 93 ba 02 	sts	0x02BA, r24	; 0x8002ba <set_time>
    10d4:	34 c0       	rjmp	.+104    	; 0x113e <get_user_cmd+0xc0>
        }
        else if (strcmp(cmd_key, "set lamp") == 0)
    10d6:	6d e7       	ldi	r22, 0x7D	; 125
    10d8:	72 e0       	ldi	r23, 0x02	; 2
    10da:	8b e9       	ldi	r24, 0x9B	; 155
    10dc:	93 e0       	ldi	r25, 0x03	; 3
    10de:	0e 94 b9 09 	call	0x1372	; 0x1372 <strcmp>
    10e2:	89 2b       	or	r24, r25
    10e4:	21 f4       	brne	.+8      	; 0x10ee <get_user_cmd+0x70>
        {
            set_lamp = true;
    10e6:	81 e0       	ldi	r24, 0x01	; 1
    10e8:	80 93 b9 02 	sts	0x02B9, r24	; 0x8002b9 <set_lamp>
    10ec:	28 c0       	rjmp	.+80     	; 0x113e <get_user_cmd+0xc0>
        }
        else if (strcmp(cmd_key, "open curtain") == 0)
    10ee:	66 e8       	ldi	r22, 0x86	; 134
    10f0:	72 e0       	ldi	r23, 0x02	; 2
    10f2:	8b e9       	ldi	r24, 0x9B	; 155
    10f4:	93 e0       	ldi	r25, 0x03	; 3
    10f6:	0e 94 b9 09 	call	0x1372	; 0x1372 <strcmp>
    10fa:	89 2b       	or	r24, r25
    10fc:	21 f4       	brne	.+8      	; 0x1106 <get_user_cmd+0x88>
        {
            open_curtain = true;
    10fe:	81 e0       	ldi	r24, 0x01	; 1
    1100:	80 93 b8 02 	sts	0x02B8, r24	; 0x8002b8 <open_curtain>
    1104:	1c c0       	rjmp	.+56     	; 0x113e <get_user_cmd+0xc0>
        }
        else if (strcmp(cmd_key, "close curtain") == 0)
    1106:	63 e9       	ldi	r22, 0x93	; 147
    1108:	72 e0       	ldi	r23, 0x02	; 2
    110a:	8b e9       	ldi	r24, 0x9B	; 155
    110c:	93 e0       	ldi	r25, 0x03	; 3
    110e:	0e 94 b9 09 	call	0x1372	; 0x1372 <strcmp>
    1112:	89 2b       	or	r24, r25
    1114:	21 f4       	brne	.+8      	; 0x111e <get_user_cmd+0xa0>
        {
            close_curtain = true;
    1116:	81 e0       	ldi	r24, 0x01	; 1
    1118:	80 93 b7 02 	sts	0x02B7, r24	; 0x8002b7 <close_curtain>
    111c:	10 c0       	rjmp	.+32     	; 0x113e <get_user_cmd+0xc0>
        }
        else if (strcmp(rec, "help") == 0)
    111e:	61 ea       	ldi	r22, 0xA1	; 161
    1120:	72 e0       	ldi	r23, 0x02	; 2
    1122:	ce 01       	movw	r24, r28
    1124:	01 96       	adiw	r24, 0x01	; 1
    1126:	0e 94 b9 09 	call	0x1372	; 0x1372 <strcmp>
    112a:	89 2b       	or	r24, r25
    112c:	21 f4       	brne	.+8      	; 0x1136 <get_user_cmd+0xb8>
        {
            help = true;
    112e:	81 e0       	ldi	r24, 0x01	; 1
    1130:	80 93 b6 02 	sts	0x02B6, r24	; 0x8002b6 <help>
    1134:	04 c0       	rjmp	.+8      	; 0x113e <get_user_cmd+0xc0>
        }
        else
        {
            serial_send_string("\rError!\r");
    1136:	86 ea       	ldi	r24, 0xA6	; 166
    1138:	92 e0       	ldi	r25, 0x02	; 2
    113a:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <serial_send_string>
        }
        strcpy(rec, "");
        index = 0;
    113e:	10 92 b0 02 	sts	0x02B0, r1	; 0x8002b0 <__data_end>
    1142:	03 c0       	rjmp	.+6      	; 0x114a <get_user_cmd+0xcc>
    }
    else
    {
        index++;
    1144:	9f 5f       	subi	r25, 0xFF	; 255
    1146:	90 93 b0 02 	sts	0x02B0, r25	; 0x8002b0 <__data_end>
    }
}
    114a:	c8 53       	subi	r28, 0x38	; 56
    114c:	df 4f       	sbci	r29, 0xFF	; 255
    114e:	0f b6       	in	r0, 0x3f	; 63
    1150:	f8 94       	cli
    1152:	de bf       	out	0x3e, r29	; 62
    1154:	0f be       	out	0x3f, r0	; 63
    1156:	cd bf       	out	0x3d, r28	; 61
    1158:	df 91       	pop	r29
    115a:	cf 91       	pop	r28
    115c:	08 95       	ret

0000115e <main>:

int main(void)
{
    stepper_init();
    115e:	0e 94 a3 03 	call	0x746	; 0x746 <stepper_init>
    lamp_init();
    1162:	0e 94 a8 03 	call	0x750	; 0x750 <lamp_init>
    timer1_init();
    1166:	0e 94 aa 03 	call	0x754	; 0x754 <timer1_init>
    pwm_init();
    116a:	0e 94 b4 03 	call	0x768	; 0x768 <pwm_init>
    lcd_init();
    116e:	0e 94 ba 03 	call	0x774	; 0x774 <lcd_init>
    serial_init_final();
    1172:	0e 94 7b 04 	call	0x8f6	; 0x8f6 <serial_init_final>

    sei();
    1176:	78 94       	sei

    while (1)
    {
        if (set_time)
    1178:	80 91 ba 02 	lds	r24, 0x02BA	; 0x8002ba <set_time>
    117c:	88 23       	and	r24, r24
    117e:	21 f0       	breq	.+8      	; 0x1188 <main+0x2a>
        {
            function_set_time();
    1180:	0e 94 25 06 	call	0xc4a	; 0xc4a <function_set_time>
            set_time = false;
    1184:	10 92 ba 02 	sts	0x02BA, r1	; 0x8002ba <set_time>
        }

        if (set_lamp)
    1188:	80 91 b9 02 	lds	r24, 0x02B9	; 0x8002b9 <set_lamp>
    118c:	88 23       	and	r24, r24
    118e:	21 f0       	breq	.+8      	; 0x1198 <main+0x3a>
        {
            function_set_lamp();
    1190:	0e 94 b6 06 	call	0xd6c	; 0xd6c <function_set_lamp>
            set_lamp = false;
    1194:	10 92 b9 02 	sts	0x02B9, r1	; 0x8002b9 <set_lamp>
        }

        if (open_curtain)
    1198:	80 91 b8 02 	lds	r24, 0x02B8	; 0x8002b8 <open_curtain>
    119c:	88 23       	and	r24, r24
    119e:	21 f0       	breq	.+8      	; 0x11a8 <main+0x4a>
        {
            function_open_curtain();
    11a0:	0e 94 f7 06 	call	0xdee	; 0xdee <function_open_curtain>
            open_curtain = false;
    11a4:	10 92 b8 02 	sts	0x02B8, r1	; 0x8002b8 <open_curtain>
        }

        if (close_curtain)
    11a8:	80 91 b7 02 	lds	r24, 0x02B7	; 0x8002b7 <close_curtain>
    11ac:	88 23       	and	r24, r24
    11ae:	21 f0       	breq	.+8      	; 0x11b8 <main+0x5a>
        {
            function_close_curtain();
    11b0:	0e 94 24 07 	call	0xe48	; 0xe48 <function_close_curtain>
            close_curtain = false;
    11b4:	10 92 b7 02 	sts	0x02B7, r1	; 0x8002b7 <close_curtain>
        }

        if (help)
    11b8:	80 91 b6 02 	lds	r24, 0x02B6	; 0x8002b6 <help>
    11bc:	88 23       	and	r24, r24
    11be:	21 f0       	breq	.+8      	; 0x11c8 <main+0x6a>
        {
            function_help();
    11c0:	0e 94 50 07 	call	0xea0	; 0xea0 <function_help>
            help = false;
    11c4:	10 92 b6 02 	sts	0x02B6, r1	; 0x8002b6 <help>
        }

        if (after_one_second)
    11c8:	80 91 b4 02 	lds	r24, 0x02B4	; 0x8002b4 <after_one_second>
    11cc:	88 23       	and	r24, r24
    11ce:	21 f0       	breq	.+8      	; 0x11d8 <main+0x7a>
        {
            function_after_one_second();
    11d0:	0e 94 75 07 	call	0xeea	; 0xeea <function_after_one_second>
            after_one_second = false;
    11d4:	10 92 b4 02 	sts	0x02B4, r1	; 0x8002b4 <after_one_second>
        }

        if (after_one_minute && login)
    11d8:	80 91 b3 02 	lds	r24, 0x02B3	; 0x8002b3 <after_one_minute>
    11dc:	88 23       	and	r24, r24
    11de:	61 f2       	breq	.-104    	; 0x1178 <main+0x1a>
    11e0:	80 91 b2 02 	lds	r24, 0x02B2	; 0x8002b2 <login>
    11e4:	88 23       	and	r24, r24
    11e6:	41 f2       	breq	.-112    	; 0x1178 <main+0x1a>
        {
            function_session_timeout();
    11e8:	0e 94 ea 07 	call	0xfd4	; 0xfd4 <function_session_timeout>
            after_one_minute = false;
    11ec:	10 92 b3 02 	sts	0x02B3, r1	; 0x8002b3 <after_one_minute>
    11f0:	c3 cf       	rjmp	.-122    	; 0x1178 <main+0x1a>

000011f2 <__vector_9>:
        }
    }
}

ISR(TIMER1_OVF_vect)
{
    11f2:	1f 92       	push	r1
    11f4:	0f 92       	push	r0
    11f6:	0f b6       	in	r0, 0x3f	; 63
    11f8:	0f 92       	push	r0
    11fa:	11 24       	eor	r1, r1
    11fc:	2f 93       	push	r18
    11fe:	8f 93       	push	r24
    1200:	9f 93       	push	r25
    TCNT1 = 57723;
    1202:	8b e7       	ldi	r24, 0x7B	; 123
    1204:	91 ee       	ldi	r25, 0xE1	; 225
    1206:	9d bd       	out	0x2d, r25	; 45
    1208:	8c bd       	out	0x2c, r24	; 44
    TIFR = (1 << TOV1);
    120a:	84 e0       	ldi	r24, 0x04	; 4
    120c:	88 bf       	out	0x38, r24	; 56
    counter++;
    120e:	80 91 bb 02 	lds	r24, 0x02BB	; 0x8002bb <counter>
    1212:	90 91 bc 02 	lds	r25, 0x02BC	; 0x8002bc <counter+0x1>
    1216:	01 96       	adiw	r24, 0x01	; 1
    1218:	90 93 bc 02 	sts	0x02BC, r25	; 0x8002bc <counter+0x1>
    121c:	80 93 bb 02 	sts	0x02BB, r24	; 0x8002bb <counter>
    after_one_second = true;
    1220:	21 e0       	ldi	r18, 0x01	; 1
    1222:	20 93 b4 02 	sts	0x02B4, r18	; 0x8002b4 <after_one_second>

    if (counter == 60)
    1226:	cc 97       	sbiw	r24, 0x3c	; 60
    1228:	19 f4       	brne	.+6      	; 0x1230 <__vector_9+0x3e>
    {
        after_one_minute = true;
    122a:	81 e0       	ldi	r24, 0x01	; 1
    122c:	80 93 b3 02 	sts	0x02B3, r24	; 0x8002b3 <after_one_minute>
    }
}
    1230:	9f 91       	pop	r25
    1232:	8f 91       	pop	r24
    1234:	2f 91       	pop	r18
    1236:	0f 90       	pop	r0
    1238:	0f be       	out	0x3f, r0	; 63
    123a:	0f 90       	pop	r0
    123c:	1f 90       	pop	r1
    123e:	18 95       	reti

00001240 <__vector_13>:

#if SERIAL_INTERRUPT == 1
ISR(USART_RXC_vect)
{
    1240:	1f 92       	push	r1
    1242:	0f 92       	push	r0
    1244:	0f b6       	in	r0, 0x3f	; 63
    1246:	0f 92       	push	r0
    1248:	11 24       	eor	r1, r1
    124a:	2f 93       	push	r18
    124c:	3f 93       	push	r19
    124e:	4f 93       	push	r20
    1250:	5f 93       	push	r21
    1252:	6f 93       	push	r22
    1254:	7f 93       	push	r23
    1256:	8f 93       	push	r24
    1258:	9f 93       	push	r25
    125a:	af 93       	push	r26
    125c:	bf 93       	push	r27
    125e:	ef 93       	push	r30
    1260:	ff 93       	push	r31
    char c = UDR;
    1262:	8c b1       	in	r24, 0x0c	; 12
    UDR = c;
    1264:	8c b9       	out	0x0c, r24	; 12
    counter = 0;
    1266:	10 92 bc 02 	sts	0x02BC, r1	; 0x8002bc <counter+0x1>
    126a:	10 92 bb 02 	sts	0x02BB, r1	; 0x8002bb <counter>

    if (login)
    126e:	90 91 b2 02 	lds	r25, 0x02B2	; 0x8002b2 <login>
    1272:	99 23       	and	r25, r25
    1274:	19 f0       	breq	.+6      	; 0x127c <__vector_13+0x3c>
    {
        get_user_cmd(c);
    1276:	0e 94 3f 08 	call	0x107e	; 0x107e <get_user_cmd>
    127a:	02 c0       	rjmp	.+4      	; 0x1280 <__vector_13+0x40>
    }
    else
    {
        password_validation(c);
    127c:	0e 94 f9 07 	call	0xff2	; 0xff2 <password_validation>
    }
}
    1280:	ff 91       	pop	r31
    1282:	ef 91       	pop	r30
    1284:	bf 91       	pop	r27
    1286:	af 91       	pop	r26
    1288:	9f 91       	pop	r25
    128a:	8f 91       	pop	r24
    128c:	7f 91       	pop	r23
    128e:	6f 91       	pop	r22
    1290:	5f 91       	pop	r21
    1292:	4f 91       	pop	r20
    1294:	3f 91       	pop	r19
    1296:	2f 91       	pop	r18
    1298:	0f 90       	pop	r0
    129a:	0f be       	out	0x3f, r0	; 63
    129c:	0f 90       	pop	r0
    129e:	1f 90       	pop	r1
    12a0:	18 95       	reti

000012a2 <__divmodhi4>:
    12a2:	97 fb       	bst	r25, 7
    12a4:	07 2e       	mov	r0, r23
    12a6:	16 f4       	brtc	.+4      	; 0x12ac <__divmodhi4+0xa>
    12a8:	00 94       	com	r0
    12aa:	07 d0       	rcall	.+14     	; 0x12ba <__divmodhi4_neg1>
    12ac:	77 fd       	sbrc	r23, 7
    12ae:	09 d0       	rcall	.+18     	; 0x12c2 <__divmodhi4_neg2>
    12b0:	0e 94 87 09 	call	0x130e	; 0x130e <__udivmodhi4>
    12b4:	07 fc       	sbrc	r0, 7
    12b6:	05 d0       	rcall	.+10     	; 0x12c2 <__divmodhi4_neg2>
    12b8:	3e f4       	brtc	.+14     	; 0x12c8 <__divmodhi4_exit>

000012ba <__divmodhi4_neg1>:
    12ba:	90 95       	com	r25
    12bc:	81 95       	neg	r24
    12be:	9f 4f       	sbci	r25, 0xFF	; 255
    12c0:	08 95       	ret

000012c2 <__divmodhi4_neg2>:
    12c2:	70 95       	com	r23
    12c4:	61 95       	neg	r22
    12c6:	7f 4f       	sbci	r23, 0xFF	; 255

000012c8 <__divmodhi4_exit>:
    12c8:	08 95       	ret

000012ca <__udivmodsi4>:
    12ca:	a1 e2       	ldi	r26, 0x21	; 33
    12cc:	1a 2e       	mov	r1, r26
    12ce:	aa 1b       	sub	r26, r26
    12d0:	bb 1b       	sub	r27, r27
    12d2:	fd 01       	movw	r30, r26
    12d4:	0d c0       	rjmp	.+26     	; 0x12f0 <__udivmodsi4_ep>

000012d6 <__udivmodsi4_loop>:
    12d6:	aa 1f       	adc	r26, r26
    12d8:	bb 1f       	adc	r27, r27
    12da:	ee 1f       	adc	r30, r30
    12dc:	ff 1f       	adc	r31, r31
    12de:	a2 17       	cp	r26, r18
    12e0:	b3 07       	cpc	r27, r19
    12e2:	e4 07       	cpc	r30, r20
    12e4:	f5 07       	cpc	r31, r21
    12e6:	20 f0       	brcs	.+8      	; 0x12f0 <__udivmodsi4_ep>
    12e8:	a2 1b       	sub	r26, r18
    12ea:	b3 0b       	sbc	r27, r19
    12ec:	e4 0b       	sbc	r30, r20
    12ee:	f5 0b       	sbc	r31, r21

000012f0 <__udivmodsi4_ep>:
    12f0:	66 1f       	adc	r22, r22
    12f2:	77 1f       	adc	r23, r23
    12f4:	88 1f       	adc	r24, r24
    12f6:	99 1f       	adc	r25, r25
    12f8:	1a 94       	dec	r1
    12fa:	69 f7       	brne	.-38     	; 0x12d6 <__udivmodsi4_loop>
    12fc:	60 95       	com	r22
    12fe:	70 95       	com	r23
    1300:	80 95       	com	r24
    1302:	90 95       	com	r25
    1304:	9b 01       	movw	r18, r22
    1306:	ac 01       	movw	r20, r24
    1308:	bd 01       	movw	r22, r26
    130a:	cf 01       	movw	r24, r30
    130c:	08 95       	ret

0000130e <__udivmodhi4>:
    130e:	aa 1b       	sub	r26, r26
    1310:	bb 1b       	sub	r27, r27
    1312:	51 e1       	ldi	r21, 0x11	; 17
    1314:	07 c0       	rjmp	.+14     	; 0x1324 <__udivmodhi4_ep>

00001316 <__udivmodhi4_loop>:
    1316:	aa 1f       	adc	r26, r26
    1318:	bb 1f       	adc	r27, r27
    131a:	a6 17       	cp	r26, r22
    131c:	b7 07       	cpc	r27, r23
    131e:	10 f0       	brcs	.+4      	; 0x1324 <__udivmodhi4_ep>
    1320:	a6 1b       	sub	r26, r22
    1322:	b7 0b       	sbc	r27, r23

00001324 <__udivmodhi4_ep>:
    1324:	88 1f       	adc	r24, r24
    1326:	99 1f       	adc	r25, r25
    1328:	5a 95       	dec	r21
    132a:	a9 f7       	brne	.-22     	; 0x1316 <__udivmodhi4_loop>
    132c:	80 95       	com	r24
    132e:	90 95       	com	r25
    1330:	bc 01       	movw	r22, r24
    1332:	cd 01       	movw	r24, r26
    1334:	08 95       	ret

00001336 <atoi>:
    1336:	fc 01       	movw	r30, r24
    1338:	88 27       	eor	r24, r24
    133a:	99 27       	eor	r25, r25
    133c:	e8 94       	clt
    133e:	21 91       	ld	r18, Z+
    1340:	20 32       	cpi	r18, 0x20	; 32
    1342:	e9 f3       	breq	.-6      	; 0x133e <atoi+0x8>
    1344:	29 30       	cpi	r18, 0x09	; 9
    1346:	10 f0       	brcs	.+4      	; 0x134c <atoi+0x16>
    1348:	2e 30       	cpi	r18, 0x0E	; 14
    134a:	c8 f3       	brcs	.-14     	; 0x133e <atoi+0x8>
    134c:	2b 32       	cpi	r18, 0x2B	; 43
    134e:	41 f0       	breq	.+16     	; 0x1360 <atoi+0x2a>
    1350:	2d 32       	cpi	r18, 0x2D	; 45
    1352:	39 f4       	brne	.+14     	; 0x1362 <atoi+0x2c>
    1354:	68 94       	set
    1356:	04 c0       	rjmp	.+8      	; 0x1360 <atoi+0x2a>
    1358:	0e 94 c9 09 	call	0x1392	; 0x1392 <__mulhi_const_10>
    135c:	82 0f       	add	r24, r18
    135e:	91 1d       	adc	r25, r1
    1360:	21 91       	ld	r18, Z+
    1362:	20 53       	subi	r18, 0x30	; 48
    1364:	2a 30       	cpi	r18, 0x0A	; 10
    1366:	c0 f3       	brcs	.-16     	; 0x1358 <atoi+0x22>
    1368:	1e f4       	brtc	.+6      	; 0x1370 <atoi+0x3a>
    136a:	90 95       	com	r25
    136c:	81 95       	neg	r24
    136e:	9f 4f       	sbci	r25, 0xFF	; 255
    1370:	08 95       	ret

00001372 <strcmp>:
    1372:	fb 01       	movw	r30, r22
    1374:	dc 01       	movw	r26, r24
    1376:	8d 91       	ld	r24, X+
    1378:	01 90       	ld	r0, Z+
    137a:	80 19       	sub	r24, r0
    137c:	01 10       	cpse	r0, r1
    137e:	d9 f3       	breq	.-10     	; 0x1376 <strcmp+0x4>
    1380:	99 0b       	sbc	r25, r25
    1382:	08 95       	ret

00001384 <strcpy>:
    1384:	fb 01       	movw	r30, r22
    1386:	dc 01       	movw	r26, r24
    1388:	01 90       	ld	r0, Z+
    138a:	0d 92       	st	X+, r0
    138c:	00 20       	and	r0, r0
    138e:	e1 f7       	brne	.-8      	; 0x1388 <strcpy+0x4>
    1390:	08 95       	ret

00001392 <__mulhi_const_10>:
    1392:	7a e0       	ldi	r23, 0x0A	; 10
    1394:	97 9f       	mul	r25, r23
    1396:	90 2d       	mov	r25, r0
    1398:	87 9f       	mul	r24, r23
    139a:	80 2d       	mov	r24, r0
    139c:	91 0d       	add	r25, r1
    139e:	11 24       	eor	r1, r1
    13a0:	08 95       	ret

000013a2 <sprintf>:
    13a2:	ae e0       	ldi	r26, 0x0E	; 14
    13a4:	b0 e0       	ldi	r27, 0x00	; 0
    13a6:	e7 ed       	ldi	r30, 0xD7	; 215
    13a8:	f9 e0       	ldi	r31, 0x09	; 9
    13aa:	0c 94 c6 0f 	jmp	0x1f8c	; 0x1f8c <__prologue_saves__+0x1c>
    13ae:	0d 89       	ldd	r16, Y+21	; 0x15
    13b0:	1e 89       	ldd	r17, Y+22	; 0x16
    13b2:	86 e0       	ldi	r24, 0x06	; 6
    13b4:	8c 83       	std	Y+4, r24	; 0x04
    13b6:	1a 83       	std	Y+2, r17	; 0x02
    13b8:	09 83       	std	Y+1, r16	; 0x01
    13ba:	8f ef       	ldi	r24, 0xFF	; 255
    13bc:	9f e7       	ldi	r25, 0x7F	; 127
    13be:	9e 83       	std	Y+6, r25	; 0x06
    13c0:	8d 83       	std	Y+5, r24	; 0x05
    13c2:	ae 01       	movw	r20, r28
    13c4:	47 5e       	subi	r20, 0xE7	; 231
    13c6:	5f 4f       	sbci	r21, 0xFF	; 255
    13c8:	6f 89       	ldd	r22, Y+23	; 0x17
    13ca:	78 8d       	ldd	r23, Y+24	; 0x18
    13cc:	ce 01       	movw	r24, r28
    13ce:	01 96       	adiw	r24, 0x01	; 1
    13d0:	0e 94 0c 0a 	call	0x1418	; 0x1418 <vfprintf>
    13d4:	ef 81       	ldd	r30, Y+7	; 0x07
    13d6:	f8 85       	ldd	r31, Y+8	; 0x08
    13d8:	e0 0f       	add	r30, r16
    13da:	f1 1f       	adc	r31, r17
    13dc:	10 82       	st	Z, r1
    13de:	2e 96       	adiw	r28, 0x0e	; 14
    13e0:	e4 e0       	ldi	r30, 0x04	; 4
    13e2:	0c 94 e2 0f 	jmp	0x1fc4	; 0x1fc4 <__epilogue_restores__+0x1c>

000013e6 <sscanf>:
    13e6:	ae e0       	ldi	r26, 0x0E	; 14
    13e8:	b0 e0       	ldi	r27, 0x00	; 0
    13ea:	e9 ef       	ldi	r30, 0xF9	; 249
    13ec:	f9 e0       	ldi	r31, 0x09	; 9
    13ee:	0c 94 c8 0f 	jmp	0x1f90	; 0x1f90 <__prologue_saves__+0x20>
    13f2:	85 e0       	ldi	r24, 0x05	; 5
    13f4:	8c 83       	std	Y+4, r24	; 0x04
    13f6:	8b 89       	ldd	r24, Y+19	; 0x13
    13f8:	9c 89       	ldd	r25, Y+20	; 0x14
    13fa:	9a 83       	std	Y+2, r25	; 0x02
    13fc:	89 83       	std	Y+1, r24	; 0x01
    13fe:	ae 01       	movw	r20, r28
    1400:	49 5e       	subi	r20, 0xE9	; 233
    1402:	5f 4f       	sbci	r21, 0xFF	; 255
    1404:	6d 89       	ldd	r22, Y+21	; 0x15
    1406:	7e 89       	ldd	r23, Y+22	; 0x16
    1408:	ce 01       	movw	r24, r28
    140a:	01 96       	adiw	r24, 0x01	; 1
    140c:	0e 94 89 0d 	call	0x1b12	; 0x1b12 <vfscanf>
    1410:	2e 96       	adiw	r28, 0x0e	; 14
    1412:	e2 e0       	ldi	r30, 0x02	; 2
    1414:	0c 94 e4 0f 	jmp	0x1fc8	; 0x1fc8 <__epilogue_restores__+0x20>

00001418 <vfprintf>:
    1418:	ab e0       	ldi	r26, 0x0B	; 11
    141a:	b0 e0       	ldi	r27, 0x00	; 0
    141c:	e2 e1       	ldi	r30, 0x12	; 18
    141e:	fa e0       	ldi	r31, 0x0A	; 10
    1420:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__prologue_saves__>
    1424:	6c 01       	movw	r12, r24
    1426:	7b 01       	movw	r14, r22
    1428:	8a 01       	movw	r16, r20
    142a:	fc 01       	movw	r30, r24
    142c:	17 82       	std	Z+7, r1	; 0x07
    142e:	16 82       	std	Z+6, r1	; 0x06
    1430:	83 81       	ldd	r24, Z+3	; 0x03
    1432:	81 ff       	sbrs	r24, 1
    1434:	cc c1       	rjmp	.+920    	; 0x17ce <vfprintf+0x3b6>
    1436:	ce 01       	movw	r24, r28
    1438:	01 96       	adiw	r24, 0x01	; 1
    143a:	3c 01       	movw	r6, r24
    143c:	f6 01       	movw	r30, r12
    143e:	93 81       	ldd	r25, Z+3	; 0x03
    1440:	f7 01       	movw	r30, r14
    1442:	93 fd       	sbrc	r25, 3
    1444:	85 91       	lpm	r24, Z+
    1446:	93 ff       	sbrs	r25, 3
    1448:	81 91       	ld	r24, Z+
    144a:	7f 01       	movw	r14, r30
    144c:	88 23       	and	r24, r24
    144e:	09 f4       	brne	.+2      	; 0x1452 <vfprintf+0x3a>
    1450:	ba c1       	rjmp	.+884    	; 0x17c6 <vfprintf+0x3ae>
    1452:	85 32       	cpi	r24, 0x25	; 37
    1454:	39 f4       	brne	.+14     	; 0x1464 <vfprintf+0x4c>
    1456:	93 fd       	sbrc	r25, 3
    1458:	85 91       	lpm	r24, Z+
    145a:	93 ff       	sbrs	r25, 3
    145c:	81 91       	ld	r24, Z+
    145e:	7f 01       	movw	r14, r30
    1460:	85 32       	cpi	r24, 0x25	; 37
    1462:	29 f4       	brne	.+10     	; 0x146e <vfprintf+0x56>
    1464:	b6 01       	movw	r22, r12
    1466:	90 e0       	ldi	r25, 0x00	; 0
    1468:	0e 94 02 0f 	call	0x1e04	; 0x1e04 <fputc>
    146c:	e7 cf       	rjmp	.-50     	; 0x143c <vfprintf+0x24>
    146e:	91 2c       	mov	r9, r1
    1470:	21 2c       	mov	r2, r1
    1472:	31 2c       	mov	r3, r1
    1474:	ff e1       	ldi	r31, 0x1F	; 31
    1476:	f3 15       	cp	r31, r3
    1478:	d8 f0       	brcs	.+54     	; 0x14b0 <vfprintf+0x98>
    147a:	8b 32       	cpi	r24, 0x2B	; 43
    147c:	79 f0       	breq	.+30     	; 0x149c <vfprintf+0x84>
    147e:	38 f4       	brcc	.+14     	; 0x148e <vfprintf+0x76>
    1480:	80 32       	cpi	r24, 0x20	; 32
    1482:	79 f0       	breq	.+30     	; 0x14a2 <vfprintf+0x8a>
    1484:	83 32       	cpi	r24, 0x23	; 35
    1486:	a1 f4       	brne	.+40     	; 0x14b0 <vfprintf+0x98>
    1488:	23 2d       	mov	r18, r3
    148a:	20 61       	ori	r18, 0x10	; 16
    148c:	1d c0       	rjmp	.+58     	; 0x14c8 <vfprintf+0xb0>
    148e:	8d 32       	cpi	r24, 0x2D	; 45
    1490:	61 f0       	breq	.+24     	; 0x14aa <vfprintf+0x92>
    1492:	80 33       	cpi	r24, 0x30	; 48
    1494:	69 f4       	brne	.+26     	; 0x14b0 <vfprintf+0x98>
    1496:	23 2d       	mov	r18, r3
    1498:	21 60       	ori	r18, 0x01	; 1
    149a:	16 c0       	rjmp	.+44     	; 0x14c8 <vfprintf+0xb0>
    149c:	83 2d       	mov	r24, r3
    149e:	82 60       	ori	r24, 0x02	; 2
    14a0:	38 2e       	mov	r3, r24
    14a2:	e3 2d       	mov	r30, r3
    14a4:	e4 60       	ori	r30, 0x04	; 4
    14a6:	3e 2e       	mov	r3, r30
    14a8:	2a c0       	rjmp	.+84     	; 0x14fe <vfprintf+0xe6>
    14aa:	f3 2d       	mov	r31, r3
    14ac:	f8 60       	ori	r31, 0x08	; 8
    14ae:	1d c0       	rjmp	.+58     	; 0x14ea <vfprintf+0xd2>
    14b0:	37 fc       	sbrc	r3, 7
    14b2:	2d c0       	rjmp	.+90     	; 0x150e <vfprintf+0xf6>
    14b4:	20 ed       	ldi	r18, 0xD0	; 208
    14b6:	28 0f       	add	r18, r24
    14b8:	2a 30       	cpi	r18, 0x0A	; 10
    14ba:	40 f0       	brcs	.+16     	; 0x14cc <vfprintf+0xb4>
    14bc:	8e 32       	cpi	r24, 0x2E	; 46
    14be:	b9 f4       	brne	.+46     	; 0x14ee <vfprintf+0xd6>
    14c0:	36 fc       	sbrc	r3, 6
    14c2:	81 c1       	rjmp	.+770    	; 0x17c6 <vfprintf+0x3ae>
    14c4:	23 2d       	mov	r18, r3
    14c6:	20 64       	ori	r18, 0x40	; 64
    14c8:	32 2e       	mov	r3, r18
    14ca:	19 c0       	rjmp	.+50     	; 0x14fe <vfprintf+0xe6>
    14cc:	36 fe       	sbrs	r3, 6
    14ce:	06 c0       	rjmp	.+12     	; 0x14dc <vfprintf+0xc4>
    14d0:	8a e0       	ldi	r24, 0x0A	; 10
    14d2:	98 9e       	mul	r9, r24
    14d4:	20 0d       	add	r18, r0
    14d6:	11 24       	eor	r1, r1
    14d8:	92 2e       	mov	r9, r18
    14da:	11 c0       	rjmp	.+34     	; 0x14fe <vfprintf+0xe6>
    14dc:	ea e0       	ldi	r30, 0x0A	; 10
    14de:	2e 9e       	mul	r2, r30
    14e0:	20 0d       	add	r18, r0
    14e2:	11 24       	eor	r1, r1
    14e4:	22 2e       	mov	r2, r18
    14e6:	f3 2d       	mov	r31, r3
    14e8:	f0 62       	ori	r31, 0x20	; 32
    14ea:	3f 2e       	mov	r3, r31
    14ec:	08 c0       	rjmp	.+16     	; 0x14fe <vfprintf+0xe6>
    14ee:	8c 36       	cpi	r24, 0x6C	; 108
    14f0:	21 f4       	brne	.+8      	; 0x14fa <vfprintf+0xe2>
    14f2:	83 2d       	mov	r24, r3
    14f4:	80 68       	ori	r24, 0x80	; 128
    14f6:	38 2e       	mov	r3, r24
    14f8:	02 c0       	rjmp	.+4      	; 0x14fe <vfprintf+0xe6>
    14fa:	88 36       	cpi	r24, 0x68	; 104
    14fc:	41 f4       	brne	.+16     	; 0x150e <vfprintf+0xf6>
    14fe:	f7 01       	movw	r30, r14
    1500:	93 fd       	sbrc	r25, 3
    1502:	85 91       	lpm	r24, Z+
    1504:	93 ff       	sbrs	r25, 3
    1506:	81 91       	ld	r24, Z+
    1508:	7f 01       	movw	r14, r30
    150a:	81 11       	cpse	r24, r1
    150c:	b3 cf       	rjmp	.-154    	; 0x1474 <vfprintf+0x5c>
    150e:	98 2f       	mov	r25, r24
    1510:	9f 7d       	andi	r25, 0xDF	; 223
    1512:	95 54       	subi	r25, 0x45	; 69
    1514:	93 30       	cpi	r25, 0x03	; 3
    1516:	28 f4       	brcc	.+10     	; 0x1522 <vfprintf+0x10a>
    1518:	0c 5f       	subi	r16, 0xFC	; 252
    151a:	1f 4f       	sbci	r17, 0xFF	; 255
    151c:	9f e3       	ldi	r25, 0x3F	; 63
    151e:	99 83       	std	Y+1, r25	; 0x01
    1520:	0d c0       	rjmp	.+26     	; 0x153c <vfprintf+0x124>
    1522:	83 36       	cpi	r24, 0x63	; 99
    1524:	31 f0       	breq	.+12     	; 0x1532 <vfprintf+0x11a>
    1526:	83 37       	cpi	r24, 0x73	; 115
    1528:	71 f0       	breq	.+28     	; 0x1546 <vfprintf+0x12e>
    152a:	83 35       	cpi	r24, 0x53	; 83
    152c:	09 f0       	breq	.+2      	; 0x1530 <vfprintf+0x118>
    152e:	59 c0       	rjmp	.+178    	; 0x15e2 <vfprintf+0x1ca>
    1530:	21 c0       	rjmp	.+66     	; 0x1574 <vfprintf+0x15c>
    1532:	f8 01       	movw	r30, r16
    1534:	80 81       	ld	r24, Z
    1536:	89 83       	std	Y+1, r24	; 0x01
    1538:	0e 5f       	subi	r16, 0xFE	; 254
    153a:	1f 4f       	sbci	r17, 0xFF	; 255
    153c:	88 24       	eor	r8, r8
    153e:	83 94       	inc	r8
    1540:	91 2c       	mov	r9, r1
    1542:	53 01       	movw	r10, r6
    1544:	13 c0       	rjmp	.+38     	; 0x156c <vfprintf+0x154>
    1546:	28 01       	movw	r4, r16
    1548:	f2 e0       	ldi	r31, 0x02	; 2
    154a:	4f 0e       	add	r4, r31
    154c:	51 1c       	adc	r5, r1
    154e:	f8 01       	movw	r30, r16
    1550:	a0 80       	ld	r10, Z
    1552:	b1 80       	ldd	r11, Z+1	; 0x01
    1554:	36 fe       	sbrs	r3, 6
    1556:	03 c0       	rjmp	.+6      	; 0x155e <vfprintf+0x146>
    1558:	69 2d       	mov	r22, r9
    155a:	70 e0       	ldi	r23, 0x00	; 0
    155c:	02 c0       	rjmp	.+4      	; 0x1562 <vfprintf+0x14a>
    155e:	6f ef       	ldi	r22, 0xFF	; 255
    1560:	7f ef       	ldi	r23, 0xFF	; 255
    1562:	c5 01       	movw	r24, r10
    1564:	0e 94 b9 0e 	call	0x1d72	; 0x1d72 <strnlen>
    1568:	4c 01       	movw	r8, r24
    156a:	82 01       	movw	r16, r4
    156c:	f3 2d       	mov	r31, r3
    156e:	ff 77       	andi	r31, 0x7F	; 127
    1570:	3f 2e       	mov	r3, r31
    1572:	16 c0       	rjmp	.+44     	; 0x15a0 <vfprintf+0x188>
    1574:	28 01       	movw	r4, r16
    1576:	22 e0       	ldi	r18, 0x02	; 2
    1578:	42 0e       	add	r4, r18
    157a:	51 1c       	adc	r5, r1
    157c:	f8 01       	movw	r30, r16
    157e:	a0 80       	ld	r10, Z
    1580:	b1 80       	ldd	r11, Z+1	; 0x01
    1582:	36 fe       	sbrs	r3, 6
    1584:	03 c0       	rjmp	.+6      	; 0x158c <vfprintf+0x174>
    1586:	69 2d       	mov	r22, r9
    1588:	70 e0       	ldi	r23, 0x00	; 0
    158a:	02 c0       	rjmp	.+4      	; 0x1590 <vfprintf+0x178>
    158c:	6f ef       	ldi	r22, 0xFF	; 255
    158e:	7f ef       	ldi	r23, 0xFF	; 255
    1590:	c5 01       	movw	r24, r10
    1592:	0e 94 ae 0e 	call	0x1d5c	; 0x1d5c <strnlen_P>
    1596:	4c 01       	movw	r8, r24
    1598:	f3 2d       	mov	r31, r3
    159a:	f0 68       	ori	r31, 0x80	; 128
    159c:	3f 2e       	mov	r3, r31
    159e:	82 01       	movw	r16, r4
    15a0:	33 fc       	sbrc	r3, 3
    15a2:	1b c0       	rjmp	.+54     	; 0x15da <vfprintf+0x1c2>
    15a4:	82 2d       	mov	r24, r2
    15a6:	90 e0       	ldi	r25, 0x00	; 0
    15a8:	88 16       	cp	r8, r24
    15aa:	99 06       	cpc	r9, r25
    15ac:	b0 f4       	brcc	.+44     	; 0x15da <vfprintf+0x1c2>
    15ae:	b6 01       	movw	r22, r12
    15b0:	80 e2       	ldi	r24, 0x20	; 32
    15b2:	90 e0       	ldi	r25, 0x00	; 0
    15b4:	0e 94 02 0f 	call	0x1e04	; 0x1e04 <fputc>
    15b8:	2a 94       	dec	r2
    15ba:	f4 cf       	rjmp	.-24     	; 0x15a4 <vfprintf+0x18c>
    15bc:	f5 01       	movw	r30, r10
    15be:	37 fc       	sbrc	r3, 7
    15c0:	85 91       	lpm	r24, Z+
    15c2:	37 fe       	sbrs	r3, 7
    15c4:	81 91       	ld	r24, Z+
    15c6:	5f 01       	movw	r10, r30
    15c8:	b6 01       	movw	r22, r12
    15ca:	90 e0       	ldi	r25, 0x00	; 0
    15cc:	0e 94 02 0f 	call	0x1e04	; 0x1e04 <fputc>
    15d0:	21 10       	cpse	r2, r1
    15d2:	2a 94       	dec	r2
    15d4:	21 e0       	ldi	r18, 0x01	; 1
    15d6:	82 1a       	sub	r8, r18
    15d8:	91 08       	sbc	r9, r1
    15da:	81 14       	cp	r8, r1
    15dc:	91 04       	cpc	r9, r1
    15de:	71 f7       	brne	.-36     	; 0x15bc <vfprintf+0x1a4>
    15e0:	e8 c0       	rjmp	.+464    	; 0x17b2 <vfprintf+0x39a>
    15e2:	84 36       	cpi	r24, 0x64	; 100
    15e4:	11 f0       	breq	.+4      	; 0x15ea <vfprintf+0x1d2>
    15e6:	89 36       	cpi	r24, 0x69	; 105
    15e8:	41 f5       	brne	.+80     	; 0x163a <vfprintf+0x222>
    15ea:	f8 01       	movw	r30, r16
    15ec:	37 fe       	sbrs	r3, 7
    15ee:	07 c0       	rjmp	.+14     	; 0x15fe <vfprintf+0x1e6>
    15f0:	60 81       	ld	r22, Z
    15f2:	71 81       	ldd	r23, Z+1	; 0x01
    15f4:	82 81       	ldd	r24, Z+2	; 0x02
    15f6:	93 81       	ldd	r25, Z+3	; 0x03
    15f8:	0c 5f       	subi	r16, 0xFC	; 252
    15fa:	1f 4f       	sbci	r17, 0xFF	; 255
    15fc:	08 c0       	rjmp	.+16     	; 0x160e <vfprintf+0x1f6>
    15fe:	60 81       	ld	r22, Z
    1600:	71 81       	ldd	r23, Z+1	; 0x01
    1602:	07 2e       	mov	r0, r23
    1604:	00 0c       	add	r0, r0
    1606:	88 0b       	sbc	r24, r24
    1608:	99 0b       	sbc	r25, r25
    160a:	0e 5f       	subi	r16, 0xFE	; 254
    160c:	1f 4f       	sbci	r17, 0xFF	; 255
    160e:	f3 2d       	mov	r31, r3
    1610:	ff 76       	andi	r31, 0x6F	; 111
    1612:	3f 2e       	mov	r3, r31
    1614:	97 ff       	sbrs	r25, 7
    1616:	09 c0       	rjmp	.+18     	; 0x162a <vfprintf+0x212>
    1618:	90 95       	com	r25
    161a:	80 95       	com	r24
    161c:	70 95       	com	r23
    161e:	61 95       	neg	r22
    1620:	7f 4f       	sbci	r23, 0xFF	; 255
    1622:	8f 4f       	sbci	r24, 0xFF	; 255
    1624:	9f 4f       	sbci	r25, 0xFF	; 255
    1626:	f0 68       	ori	r31, 0x80	; 128
    1628:	3f 2e       	mov	r3, r31
    162a:	2a e0       	ldi	r18, 0x0A	; 10
    162c:	30 e0       	ldi	r19, 0x00	; 0
    162e:	a3 01       	movw	r20, r6
    1630:	0e 94 57 0f 	call	0x1eae	; 0x1eae <__ultoa_invert>
    1634:	88 2e       	mov	r8, r24
    1636:	86 18       	sub	r8, r6
    1638:	45 c0       	rjmp	.+138    	; 0x16c4 <vfprintf+0x2ac>
    163a:	85 37       	cpi	r24, 0x75	; 117
    163c:	31 f4       	brne	.+12     	; 0x164a <vfprintf+0x232>
    163e:	23 2d       	mov	r18, r3
    1640:	2f 7e       	andi	r18, 0xEF	; 239
    1642:	b2 2e       	mov	r11, r18
    1644:	2a e0       	ldi	r18, 0x0A	; 10
    1646:	30 e0       	ldi	r19, 0x00	; 0
    1648:	25 c0       	rjmp	.+74     	; 0x1694 <vfprintf+0x27c>
    164a:	93 2d       	mov	r25, r3
    164c:	99 7f       	andi	r25, 0xF9	; 249
    164e:	b9 2e       	mov	r11, r25
    1650:	8f 36       	cpi	r24, 0x6F	; 111
    1652:	c1 f0       	breq	.+48     	; 0x1684 <vfprintf+0x26c>
    1654:	18 f4       	brcc	.+6      	; 0x165c <vfprintf+0x244>
    1656:	88 35       	cpi	r24, 0x58	; 88
    1658:	79 f0       	breq	.+30     	; 0x1678 <vfprintf+0x260>
    165a:	b5 c0       	rjmp	.+362    	; 0x17c6 <vfprintf+0x3ae>
    165c:	80 37       	cpi	r24, 0x70	; 112
    165e:	19 f0       	breq	.+6      	; 0x1666 <vfprintf+0x24e>
    1660:	88 37       	cpi	r24, 0x78	; 120
    1662:	21 f0       	breq	.+8      	; 0x166c <vfprintf+0x254>
    1664:	b0 c0       	rjmp	.+352    	; 0x17c6 <vfprintf+0x3ae>
    1666:	e9 2f       	mov	r30, r25
    1668:	e0 61       	ori	r30, 0x10	; 16
    166a:	be 2e       	mov	r11, r30
    166c:	b4 fe       	sbrs	r11, 4
    166e:	0d c0       	rjmp	.+26     	; 0x168a <vfprintf+0x272>
    1670:	fb 2d       	mov	r31, r11
    1672:	f4 60       	ori	r31, 0x04	; 4
    1674:	bf 2e       	mov	r11, r31
    1676:	09 c0       	rjmp	.+18     	; 0x168a <vfprintf+0x272>
    1678:	34 fe       	sbrs	r3, 4
    167a:	0a c0       	rjmp	.+20     	; 0x1690 <vfprintf+0x278>
    167c:	29 2f       	mov	r18, r25
    167e:	26 60       	ori	r18, 0x06	; 6
    1680:	b2 2e       	mov	r11, r18
    1682:	06 c0       	rjmp	.+12     	; 0x1690 <vfprintf+0x278>
    1684:	28 e0       	ldi	r18, 0x08	; 8
    1686:	30 e0       	ldi	r19, 0x00	; 0
    1688:	05 c0       	rjmp	.+10     	; 0x1694 <vfprintf+0x27c>
    168a:	20 e1       	ldi	r18, 0x10	; 16
    168c:	30 e0       	ldi	r19, 0x00	; 0
    168e:	02 c0       	rjmp	.+4      	; 0x1694 <vfprintf+0x27c>
    1690:	20 e1       	ldi	r18, 0x10	; 16
    1692:	32 e0       	ldi	r19, 0x02	; 2
    1694:	f8 01       	movw	r30, r16
    1696:	b7 fe       	sbrs	r11, 7
    1698:	07 c0       	rjmp	.+14     	; 0x16a8 <vfprintf+0x290>
    169a:	60 81       	ld	r22, Z
    169c:	71 81       	ldd	r23, Z+1	; 0x01
    169e:	82 81       	ldd	r24, Z+2	; 0x02
    16a0:	93 81       	ldd	r25, Z+3	; 0x03
    16a2:	0c 5f       	subi	r16, 0xFC	; 252
    16a4:	1f 4f       	sbci	r17, 0xFF	; 255
    16a6:	06 c0       	rjmp	.+12     	; 0x16b4 <vfprintf+0x29c>
    16a8:	60 81       	ld	r22, Z
    16aa:	71 81       	ldd	r23, Z+1	; 0x01
    16ac:	80 e0       	ldi	r24, 0x00	; 0
    16ae:	90 e0       	ldi	r25, 0x00	; 0
    16b0:	0e 5f       	subi	r16, 0xFE	; 254
    16b2:	1f 4f       	sbci	r17, 0xFF	; 255
    16b4:	a3 01       	movw	r20, r6
    16b6:	0e 94 57 0f 	call	0x1eae	; 0x1eae <__ultoa_invert>
    16ba:	88 2e       	mov	r8, r24
    16bc:	86 18       	sub	r8, r6
    16be:	fb 2d       	mov	r31, r11
    16c0:	ff 77       	andi	r31, 0x7F	; 127
    16c2:	3f 2e       	mov	r3, r31
    16c4:	36 fe       	sbrs	r3, 6
    16c6:	0d c0       	rjmp	.+26     	; 0x16e2 <vfprintf+0x2ca>
    16c8:	23 2d       	mov	r18, r3
    16ca:	2e 7f       	andi	r18, 0xFE	; 254
    16cc:	a2 2e       	mov	r10, r18
    16ce:	89 14       	cp	r8, r9
    16d0:	58 f4       	brcc	.+22     	; 0x16e8 <vfprintf+0x2d0>
    16d2:	34 fe       	sbrs	r3, 4
    16d4:	0b c0       	rjmp	.+22     	; 0x16ec <vfprintf+0x2d4>
    16d6:	32 fc       	sbrc	r3, 2
    16d8:	09 c0       	rjmp	.+18     	; 0x16ec <vfprintf+0x2d4>
    16da:	83 2d       	mov	r24, r3
    16dc:	8e 7e       	andi	r24, 0xEE	; 238
    16de:	a8 2e       	mov	r10, r24
    16e0:	05 c0       	rjmp	.+10     	; 0x16ec <vfprintf+0x2d4>
    16e2:	b8 2c       	mov	r11, r8
    16e4:	a3 2c       	mov	r10, r3
    16e6:	03 c0       	rjmp	.+6      	; 0x16ee <vfprintf+0x2d6>
    16e8:	b8 2c       	mov	r11, r8
    16ea:	01 c0       	rjmp	.+2      	; 0x16ee <vfprintf+0x2d6>
    16ec:	b9 2c       	mov	r11, r9
    16ee:	a4 fe       	sbrs	r10, 4
    16f0:	0f c0       	rjmp	.+30     	; 0x1710 <vfprintf+0x2f8>
    16f2:	fe 01       	movw	r30, r28
    16f4:	e8 0d       	add	r30, r8
    16f6:	f1 1d       	adc	r31, r1
    16f8:	80 81       	ld	r24, Z
    16fa:	80 33       	cpi	r24, 0x30	; 48
    16fc:	21 f4       	brne	.+8      	; 0x1706 <vfprintf+0x2ee>
    16fe:	9a 2d       	mov	r25, r10
    1700:	99 7e       	andi	r25, 0xE9	; 233
    1702:	a9 2e       	mov	r10, r25
    1704:	09 c0       	rjmp	.+18     	; 0x1718 <vfprintf+0x300>
    1706:	a2 fe       	sbrs	r10, 2
    1708:	06 c0       	rjmp	.+12     	; 0x1716 <vfprintf+0x2fe>
    170a:	b3 94       	inc	r11
    170c:	b3 94       	inc	r11
    170e:	04 c0       	rjmp	.+8      	; 0x1718 <vfprintf+0x300>
    1710:	8a 2d       	mov	r24, r10
    1712:	86 78       	andi	r24, 0x86	; 134
    1714:	09 f0       	breq	.+2      	; 0x1718 <vfprintf+0x300>
    1716:	b3 94       	inc	r11
    1718:	a3 fc       	sbrc	r10, 3
    171a:	11 c0       	rjmp	.+34     	; 0x173e <vfprintf+0x326>
    171c:	a0 fe       	sbrs	r10, 0
    171e:	06 c0       	rjmp	.+12     	; 0x172c <vfprintf+0x314>
    1720:	b2 14       	cp	r11, r2
    1722:	88 f4       	brcc	.+34     	; 0x1746 <vfprintf+0x32e>
    1724:	28 0c       	add	r2, r8
    1726:	92 2c       	mov	r9, r2
    1728:	9b 18       	sub	r9, r11
    172a:	0e c0       	rjmp	.+28     	; 0x1748 <vfprintf+0x330>
    172c:	b2 14       	cp	r11, r2
    172e:	60 f4       	brcc	.+24     	; 0x1748 <vfprintf+0x330>
    1730:	b6 01       	movw	r22, r12
    1732:	80 e2       	ldi	r24, 0x20	; 32
    1734:	90 e0       	ldi	r25, 0x00	; 0
    1736:	0e 94 02 0f 	call	0x1e04	; 0x1e04 <fputc>
    173a:	b3 94       	inc	r11
    173c:	f7 cf       	rjmp	.-18     	; 0x172c <vfprintf+0x314>
    173e:	b2 14       	cp	r11, r2
    1740:	18 f4       	brcc	.+6      	; 0x1748 <vfprintf+0x330>
    1742:	2b 18       	sub	r2, r11
    1744:	02 c0       	rjmp	.+4      	; 0x174a <vfprintf+0x332>
    1746:	98 2c       	mov	r9, r8
    1748:	21 2c       	mov	r2, r1
    174a:	a4 fe       	sbrs	r10, 4
    174c:	10 c0       	rjmp	.+32     	; 0x176e <vfprintf+0x356>
    174e:	b6 01       	movw	r22, r12
    1750:	80 e3       	ldi	r24, 0x30	; 48
    1752:	90 e0       	ldi	r25, 0x00	; 0
    1754:	0e 94 02 0f 	call	0x1e04	; 0x1e04 <fputc>
    1758:	a2 fe       	sbrs	r10, 2
    175a:	17 c0       	rjmp	.+46     	; 0x178a <vfprintf+0x372>
    175c:	a1 fc       	sbrc	r10, 1
    175e:	03 c0       	rjmp	.+6      	; 0x1766 <vfprintf+0x34e>
    1760:	88 e7       	ldi	r24, 0x78	; 120
    1762:	90 e0       	ldi	r25, 0x00	; 0
    1764:	02 c0       	rjmp	.+4      	; 0x176a <vfprintf+0x352>
    1766:	88 e5       	ldi	r24, 0x58	; 88
    1768:	90 e0       	ldi	r25, 0x00	; 0
    176a:	b6 01       	movw	r22, r12
    176c:	0c c0       	rjmp	.+24     	; 0x1786 <vfprintf+0x36e>
    176e:	8a 2d       	mov	r24, r10
    1770:	86 78       	andi	r24, 0x86	; 134
    1772:	59 f0       	breq	.+22     	; 0x178a <vfprintf+0x372>
    1774:	a1 fe       	sbrs	r10, 1
    1776:	02 c0       	rjmp	.+4      	; 0x177c <vfprintf+0x364>
    1778:	8b e2       	ldi	r24, 0x2B	; 43
    177a:	01 c0       	rjmp	.+2      	; 0x177e <vfprintf+0x366>
    177c:	80 e2       	ldi	r24, 0x20	; 32
    177e:	a7 fc       	sbrc	r10, 7
    1780:	8d e2       	ldi	r24, 0x2D	; 45
    1782:	b6 01       	movw	r22, r12
    1784:	90 e0       	ldi	r25, 0x00	; 0
    1786:	0e 94 02 0f 	call	0x1e04	; 0x1e04 <fputc>
    178a:	89 14       	cp	r8, r9
    178c:	38 f4       	brcc	.+14     	; 0x179c <vfprintf+0x384>
    178e:	b6 01       	movw	r22, r12
    1790:	80 e3       	ldi	r24, 0x30	; 48
    1792:	90 e0       	ldi	r25, 0x00	; 0
    1794:	0e 94 02 0f 	call	0x1e04	; 0x1e04 <fputc>
    1798:	9a 94       	dec	r9
    179a:	f7 cf       	rjmp	.-18     	; 0x178a <vfprintf+0x372>
    179c:	8a 94       	dec	r8
    179e:	f3 01       	movw	r30, r6
    17a0:	e8 0d       	add	r30, r8
    17a2:	f1 1d       	adc	r31, r1
    17a4:	80 81       	ld	r24, Z
    17a6:	b6 01       	movw	r22, r12
    17a8:	90 e0       	ldi	r25, 0x00	; 0
    17aa:	0e 94 02 0f 	call	0x1e04	; 0x1e04 <fputc>
    17ae:	81 10       	cpse	r8, r1
    17b0:	f5 cf       	rjmp	.-22     	; 0x179c <vfprintf+0x384>
    17b2:	22 20       	and	r2, r2
    17b4:	09 f4       	brne	.+2      	; 0x17b8 <vfprintf+0x3a0>
    17b6:	42 ce       	rjmp	.-892    	; 0x143c <vfprintf+0x24>
    17b8:	b6 01       	movw	r22, r12
    17ba:	80 e2       	ldi	r24, 0x20	; 32
    17bc:	90 e0       	ldi	r25, 0x00	; 0
    17be:	0e 94 02 0f 	call	0x1e04	; 0x1e04 <fputc>
    17c2:	2a 94       	dec	r2
    17c4:	f6 cf       	rjmp	.-20     	; 0x17b2 <vfprintf+0x39a>
    17c6:	f6 01       	movw	r30, r12
    17c8:	86 81       	ldd	r24, Z+6	; 0x06
    17ca:	97 81       	ldd	r25, Z+7	; 0x07
    17cc:	02 c0       	rjmp	.+4      	; 0x17d2 <vfprintf+0x3ba>
    17ce:	8f ef       	ldi	r24, 0xFF	; 255
    17d0:	9f ef       	ldi	r25, 0xFF	; 255
    17d2:	2b 96       	adiw	r28, 0x0b	; 11
    17d4:	e2 e1       	ldi	r30, 0x12	; 18
    17d6:	0c 94 d4 0f 	jmp	0x1fa8	; 0x1fa8 <__epilogue_restores__>

000017da <putval>:
    17da:	20 fd       	sbrc	r18, 0
    17dc:	09 c0       	rjmp	.+18     	; 0x17f0 <putval+0x16>
    17de:	fc 01       	movw	r30, r24
    17e0:	23 fd       	sbrc	r18, 3
    17e2:	05 c0       	rjmp	.+10     	; 0x17ee <putval+0x14>
    17e4:	22 ff       	sbrs	r18, 2
    17e6:	02 c0       	rjmp	.+4      	; 0x17ec <putval+0x12>
    17e8:	73 83       	std	Z+3, r23	; 0x03
    17ea:	62 83       	std	Z+2, r22	; 0x02
    17ec:	51 83       	std	Z+1, r21	; 0x01
    17ee:	40 83       	st	Z, r20
    17f0:	08 95       	ret

000017f2 <mulacc>:
    17f2:	44 fd       	sbrc	r20, 4
    17f4:	17 c0       	rjmp	.+46     	; 0x1824 <mulacc+0x32>
    17f6:	46 fd       	sbrc	r20, 6
    17f8:	17 c0       	rjmp	.+46     	; 0x1828 <mulacc+0x36>
    17fa:	ab 01       	movw	r20, r22
    17fc:	bc 01       	movw	r22, r24
    17fe:	da 01       	movw	r26, r20
    1800:	fb 01       	movw	r30, r22
    1802:	aa 0f       	add	r26, r26
    1804:	bb 1f       	adc	r27, r27
    1806:	ee 1f       	adc	r30, r30
    1808:	ff 1f       	adc	r31, r31
    180a:	10 94       	com	r1
    180c:	d1 f7       	brne	.-12     	; 0x1802 <mulacc+0x10>
    180e:	4a 0f       	add	r20, r26
    1810:	5b 1f       	adc	r21, r27
    1812:	6e 1f       	adc	r22, r30
    1814:	7f 1f       	adc	r23, r31
    1816:	cb 01       	movw	r24, r22
    1818:	ba 01       	movw	r22, r20
    181a:	66 0f       	add	r22, r22
    181c:	77 1f       	adc	r23, r23
    181e:	88 1f       	adc	r24, r24
    1820:	99 1f       	adc	r25, r25
    1822:	09 c0       	rjmp	.+18     	; 0x1836 <mulacc+0x44>
    1824:	33 e0       	ldi	r19, 0x03	; 3
    1826:	01 c0       	rjmp	.+2      	; 0x182a <mulacc+0x38>
    1828:	34 e0       	ldi	r19, 0x04	; 4
    182a:	66 0f       	add	r22, r22
    182c:	77 1f       	adc	r23, r23
    182e:	88 1f       	adc	r24, r24
    1830:	99 1f       	adc	r25, r25
    1832:	31 50       	subi	r19, 0x01	; 1
    1834:	d1 f7       	brne	.-12     	; 0x182a <mulacc+0x38>
    1836:	62 0f       	add	r22, r18
    1838:	71 1d       	adc	r23, r1
    183a:	81 1d       	adc	r24, r1
    183c:	91 1d       	adc	r25, r1
    183e:	08 95       	ret

00001840 <skip_spaces>:
    1840:	0f 93       	push	r16
    1842:	1f 93       	push	r17
    1844:	cf 93       	push	r28
    1846:	df 93       	push	r29
    1848:	8c 01       	movw	r16, r24
    184a:	c8 01       	movw	r24, r16
    184c:	0e 94 c4 0e 	call	0x1d88	; 0x1d88 <fgetc>
    1850:	ec 01       	movw	r28, r24
    1852:	97 fd       	sbrc	r25, 7
    1854:	08 c0       	rjmp	.+16     	; 0x1866 <skip_spaces+0x26>
    1856:	0e 94 9a 0e 	call	0x1d34	; 0x1d34 <isspace>
    185a:	89 2b       	or	r24, r25
    185c:	b1 f7       	brne	.-20     	; 0x184a <skip_spaces+0xa>
    185e:	b8 01       	movw	r22, r16
    1860:	ce 01       	movw	r24, r28
    1862:	0e 94 3e 0f 	call	0x1e7c	; 0x1e7c <ungetc>
    1866:	ce 01       	movw	r24, r28
    1868:	df 91       	pop	r29
    186a:	cf 91       	pop	r28
    186c:	1f 91       	pop	r17
    186e:	0f 91       	pop	r16
    1870:	08 95       	ret

00001872 <conv_int>:
    1872:	8f 92       	push	r8
    1874:	9f 92       	push	r9
    1876:	af 92       	push	r10
    1878:	bf 92       	push	r11
    187a:	ef 92       	push	r14
    187c:	ff 92       	push	r15
    187e:	0f 93       	push	r16
    1880:	1f 93       	push	r17
    1882:	cf 93       	push	r28
    1884:	df 93       	push	r29
    1886:	8c 01       	movw	r16, r24
    1888:	d6 2f       	mov	r29, r22
    188a:	7a 01       	movw	r14, r20
    188c:	b2 2e       	mov	r11, r18
    188e:	0e 94 c4 0e 	call	0x1d88	; 0x1d88 <fgetc>
    1892:	9c 01       	movw	r18, r24
    1894:	33 27       	eor	r19, r19
    1896:	2b 32       	cpi	r18, 0x2B	; 43
    1898:	31 05       	cpc	r19, r1
    189a:	31 f0       	breq	.+12     	; 0x18a8 <conv_int+0x36>
    189c:	2d 32       	cpi	r18, 0x2D	; 45
    189e:	31 05       	cpc	r19, r1
    18a0:	61 f4       	brne	.+24     	; 0x18ba <conv_int+0x48>
    18a2:	8b 2d       	mov	r24, r11
    18a4:	80 68       	ori	r24, 0x80	; 128
    18a6:	b8 2e       	mov	r11, r24
    18a8:	d1 50       	subi	r29, 0x01	; 1
    18aa:	11 f4       	brne	.+4      	; 0x18b0 <conv_int+0x3e>
    18ac:	80 e0       	ldi	r24, 0x00	; 0
    18ae:	68 c0       	rjmp	.+208    	; 0x1980 <conv_int+0x10e>
    18b0:	c8 01       	movw	r24, r16
    18b2:	0e 94 c4 0e 	call	0x1d88	; 0x1d88 <fgetc>
    18b6:	97 fd       	sbrc	r25, 7
    18b8:	f9 cf       	rjmp	.-14     	; 0x18ac <conv_int+0x3a>
    18ba:	cb 2d       	mov	r28, r11
    18bc:	cd 7f       	andi	r28, 0xFD	; 253
    18be:	2b 2d       	mov	r18, r11
    18c0:	20 73       	andi	r18, 0x30	; 48
    18c2:	09 f5       	brne	.+66     	; 0x1906 <conv_int+0x94>
    18c4:	80 33       	cpi	r24, 0x30	; 48
    18c6:	f9 f4       	brne	.+62     	; 0x1906 <conv_int+0x94>
    18c8:	aa 24       	eor	r10, r10
    18ca:	aa 94       	dec	r10
    18cc:	ad 0e       	add	r10, r29
    18ce:	09 f4       	brne	.+2      	; 0x18d2 <conv_int+0x60>
    18d0:	43 c0       	rjmp	.+134    	; 0x1958 <conv_int+0xe6>
    18d2:	c8 01       	movw	r24, r16
    18d4:	0e 94 c4 0e 	call	0x1d88	; 0x1d88 <fgetc>
    18d8:	97 fd       	sbrc	r25, 7
    18da:	3e c0       	rjmp	.+124    	; 0x1958 <conv_int+0xe6>
    18dc:	9c 01       	movw	r18, r24
    18de:	2f 7d       	andi	r18, 0xDF	; 223
    18e0:	33 27       	eor	r19, r19
    18e2:	28 35       	cpi	r18, 0x58	; 88
    18e4:	31 05       	cpc	r19, r1
    18e6:	49 f4       	brne	.+18     	; 0x18fa <conv_int+0x88>
    18e8:	c2 64       	ori	r28, 0x42	; 66
    18ea:	d2 50       	subi	r29, 0x02	; 2
    18ec:	a9 f1       	breq	.+106    	; 0x1958 <conv_int+0xe6>
    18ee:	c8 01       	movw	r24, r16
    18f0:	0e 94 c4 0e 	call	0x1d88	; 0x1d88 <fgetc>
    18f4:	97 ff       	sbrs	r25, 7
    18f6:	07 c0       	rjmp	.+14     	; 0x1906 <conv_int+0x94>
    18f8:	2f c0       	rjmp	.+94     	; 0x1958 <conv_int+0xe6>
    18fa:	b6 fe       	sbrs	r11, 6
    18fc:	02 c0       	rjmp	.+4      	; 0x1902 <conv_int+0x90>
    18fe:	c2 60       	ori	r28, 0x02	; 2
    1900:	01 c0       	rjmp	.+2      	; 0x1904 <conv_int+0x92>
    1902:	c2 61       	ori	r28, 0x12	; 18
    1904:	da 2d       	mov	r29, r10
    1906:	81 2c       	mov	r8, r1
    1908:	91 2c       	mov	r9, r1
    190a:	54 01       	movw	r10, r8
    190c:	20 ed       	ldi	r18, 0xD0	; 208
    190e:	28 0f       	add	r18, r24
    1910:	28 30       	cpi	r18, 0x08	; 8
    1912:	80 f0       	brcs	.+32     	; 0x1934 <conv_int+0xc2>
    1914:	c4 ff       	sbrs	r28, 4
    1916:	04 c0       	rjmp	.+8      	; 0x1920 <conv_int+0xae>
    1918:	b8 01       	movw	r22, r16
    191a:	0e 94 3e 0f 	call	0x1e7c	; 0x1e7c <ungetc>
    191e:	19 c0       	rjmp	.+50     	; 0x1952 <conv_int+0xe0>
    1920:	2a 30       	cpi	r18, 0x0A	; 10
    1922:	40 f0       	brcs	.+16     	; 0x1934 <conv_int+0xc2>
    1924:	c6 ff       	sbrs	r28, 6
    1926:	f8 cf       	rjmp	.-16     	; 0x1918 <conv_int+0xa6>
    1928:	2f 7d       	andi	r18, 0xDF	; 223
    192a:	3f ee       	ldi	r19, 0xEF	; 239
    192c:	32 0f       	add	r19, r18
    192e:	36 30       	cpi	r19, 0x06	; 6
    1930:	98 f7       	brcc	.-26     	; 0x1918 <conv_int+0xa6>
    1932:	27 50       	subi	r18, 0x07	; 7
    1934:	4c 2f       	mov	r20, r28
    1936:	c5 01       	movw	r24, r10
    1938:	b4 01       	movw	r22, r8
    193a:	0e 94 f9 0b 	call	0x17f2	; 0x17f2 <mulacc>
    193e:	4b 01       	movw	r8, r22
    1940:	5c 01       	movw	r10, r24
    1942:	c2 60       	ori	r28, 0x02	; 2
    1944:	d1 50       	subi	r29, 0x01	; 1
    1946:	59 f0       	breq	.+22     	; 0x195e <conv_int+0xec>
    1948:	c8 01       	movw	r24, r16
    194a:	0e 94 c4 0e 	call	0x1d88	; 0x1d88 <fgetc>
    194e:	97 ff       	sbrs	r25, 7
    1950:	dd cf       	rjmp	.-70     	; 0x190c <conv_int+0x9a>
    1952:	c1 fd       	sbrc	r28, 1
    1954:	04 c0       	rjmp	.+8      	; 0x195e <conv_int+0xec>
    1956:	aa cf       	rjmp	.-172    	; 0x18ac <conv_int+0x3a>
    1958:	81 2c       	mov	r8, r1
    195a:	91 2c       	mov	r9, r1
    195c:	54 01       	movw	r10, r8
    195e:	c7 ff       	sbrs	r28, 7
    1960:	08 c0       	rjmp	.+16     	; 0x1972 <conv_int+0x100>
    1962:	b0 94       	com	r11
    1964:	a0 94       	com	r10
    1966:	90 94       	com	r9
    1968:	80 94       	com	r8
    196a:	81 1c       	adc	r8, r1
    196c:	91 1c       	adc	r9, r1
    196e:	a1 1c       	adc	r10, r1
    1970:	b1 1c       	adc	r11, r1
    1972:	2c 2f       	mov	r18, r28
    1974:	b5 01       	movw	r22, r10
    1976:	a4 01       	movw	r20, r8
    1978:	c7 01       	movw	r24, r14
    197a:	0e 94 ed 0b 	call	0x17da	; 0x17da <putval>
    197e:	81 e0       	ldi	r24, 0x01	; 1
    1980:	df 91       	pop	r29
    1982:	cf 91       	pop	r28
    1984:	1f 91       	pop	r17
    1986:	0f 91       	pop	r16
    1988:	ff 90       	pop	r15
    198a:	ef 90       	pop	r14
    198c:	bf 90       	pop	r11
    198e:	af 90       	pop	r10
    1990:	9f 90       	pop	r9
    1992:	8f 90       	pop	r8
    1994:	08 95       	ret

00001996 <conv_brk>:
    1996:	a0 e2       	ldi	r26, 0x20	; 32
    1998:	b0 e0       	ldi	r27, 0x00	; 0
    199a:	e1 ed       	ldi	r30, 0xD1	; 209
    199c:	fc e0       	ldi	r31, 0x0C	; 12
    199e:	0c 94 bb 0f 	jmp	0x1f76	; 0x1f76 <__prologue_saves__+0x6>
    19a2:	5c 01       	movw	r10, r24
    19a4:	96 2e       	mov	r9, r22
    19a6:	7a 01       	movw	r14, r20
    19a8:	f9 01       	movw	r30, r18
    19aa:	8e 01       	movw	r16, r28
    19ac:	0f 5f       	subi	r16, 0xFF	; 255
    19ae:	1f 4f       	sbci	r17, 0xFF	; 255
    19b0:	68 01       	movw	r12, r16
    19b2:	80 e2       	ldi	r24, 0x20	; 32
    19b4:	d8 01       	movw	r26, r16
    19b6:	1d 92       	st	X+, r1
    19b8:	8a 95       	dec	r24
    19ba:	e9 f7       	brne	.-6      	; 0x19b6 <conv_brk+0x20>
    19bc:	d5 01       	movw	r26, r10
    19be:	13 96       	adiw	r26, 0x03	; 3
    19c0:	8c 90       	ld	r8, X
    19c2:	80 e0       	ldi	r24, 0x00	; 0
    19c4:	90 e0       	ldi	r25, 0x00	; 0
    19c6:	61 2c       	mov	r6, r1
    19c8:	71 2c       	mov	r7, r1
    19ca:	30 e0       	ldi	r19, 0x00	; 0
    19cc:	61 e0       	ldi	r22, 0x01	; 1
    19ce:	70 e0       	ldi	r23, 0x00	; 0
    19d0:	83 fc       	sbrc	r8, 3
    19d2:	25 91       	lpm	r18, Z+
    19d4:	83 fe       	sbrs	r8, 3
    19d6:	21 91       	ld	r18, Z+
    19d8:	8f 01       	movw	r16, r30
    19da:	52 2e       	mov	r5, r18
    19dc:	21 11       	cpse	r18, r1
    19de:	03 c0       	rjmp	.+6      	; 0x19e6 <conv_brk+0x50>
    19e0:	80 e0       	ldi	r24, 0x00	; 0
    19e2:	90 e0       	ldi	r25, 0x00	; 0
    19e4:	92 c0       	rjmp	.+292    	; 0x1b0a <conv_brk+0x174>
    19e6:	2e 35       	cpi	r18, 0x5E	; 94
    19e8:	11 f4       	brne	.+4      	; 0x19ee <conv_brk+0x58>
    19ea:	00 97       	sbiw	r24, 0x00	; 0
    19ec:	51 f1       	breq	.+84     	; 0x1a42 <conv_brk+0xac>
    19ee:	43 2f       	mov	r20, r19
    19f0:	50 e0       	ldi	r21, 0x00	; 0
    19f2:	48 17       	cp	r20, r24
    19f4:	59 07       	cpc	r21, r25
    19f6:	3c f4       	brge	.+14     	; 0x1a06 <conv_brk+0x70>
    19f8:	2d 35       	cpi	r18, 0x5D	; 93
    19fa:	59 f1       	breq	.+86     	; 0x1a52 <conv_brk+0xbc>
    19fc:	2d 32       	cpi	r18, 0x2D	; 45
    19fe:	19 f4       	brne	.+6      	; 0x1a06 <conv_brk+0x70>
    1a00:	77 20       	and	r7, r7
    1a02:	09 f1       	breq	.+66     	; 0x1a46 <conv_brk+0xb0>
    1a04:	03 c0       	rjmp	.+6      	; 0x1a0c <conv_brk+0x76>
    1a06:	77 20       	and	r7, r7
    1a08:	09 f4       	brne	.+2      	; 0x1a0c <conv_brk+0x76>
    1a0a:	6a c0       	rjmp	.+212    	; 0x1ae0 <conv_brk+0x14a>
    1a0c:	45 2d       	mov	r20, r5
    1a0e:	46 95       	lsr	r20
    1a10:	46 95       	lsr	r20
    1a12:	46 95       	lsr	r20
    1a14:	d6 01       	movw	r26, r12
    1a16:	a4 0f       	add	r26, r20
    1a18:	b1 1d       	adc	r27, r1
    1a1a:	45 2d       	mov	r20, r5
    1a1c:	47 70       	andi	r20, 0x07	; 7
    1a1e:	8b 01       	movw	r16, r22
    1a20:	02 c0       	rjmp	.+4      	; 0x1a26 <conv_brk+0x90>
    1a22:	00 0f       	add	r16, r16
    1a24:	11 1f       	adc	r17, r17
    1a26:	4a 95       	dec	r20
    1a28:	e2 f7       	brpl	.-8      	; 0x1a22 <conv_brk+0x8c>
    1a2a:	a8 01       	movw	r20, r16
    1a2c:	5c 91       	ld	r21, X
    1a2e:	45 2b       	or	r20, r21
    1a30:	4c 93       	st	X, r20
    1a32:	65 14       	cp	r6, r5
    1a34:	59 f0       	breq	.+22     	; 0x1a4c <conv_brk+0xb6>
    1a36:	56 14       	cp	r5, r6
    1a38:	10 f4       	brcc	.+4      	; 0x1a3e <conv_brk+0xa8>
    1a3a:	53 94       	inc	r5
    1a3c:	e7 cf       	rjmp	.-50     	; 0x1a0c <conv_brk+0x76>
    1a3e:	5a 94       	dec	r5
    1a40:	e5 cf       	rjmp	.-54     	; 0x1a0c <conv_brk+0x76>
    1a42:	31 e0       	ldi	r19, 0x01	; 1
    1a44:	04 c0       	rjmp	.+8      	; 0x1a4e <conv_brk+0xb8>
    1a46:	77 24       	eor	r7, r7
    1a48:	73 94       	inc	r7
    1a4a:	01 c0       	rjmp	.+2      	; 0x1a4e <conv_brk+0xb8>
    1a4c:	71 2c       	mov	r7, r1
    1a4e:	01 96       	adiw	r24, 0x01	; 1
    1a50:	bf cf       	rjmp	.-130    	; 0x19d0 <conv_brk+0x3a>
    1a52:	77 20       	and	r7, r7
    1a54:	19 f0       	breq	.+6      	; 0x1a5c <conv_brk+0xc6>
    1a56:	8e 81       	ldd	r24, Y+6	; 0x06
    1a58:	80 62       	ori	r24, 0x20	; 32
    1a5a:	8e 83       	std	Y+6, r24	; 0x06
    1a5c:	31 11       	cpse	r19, r1
    1a5e:	03 c0       	rjmp	.+6      	; 0x1a66 <conv_brk+0xd0>
    1a60:	88 24       	eor	r8, r8
    1a62:	83 94       	inc	r8
    1a64:	17 c0       	rjmp	.+46     	; 0x1a94 <conv_brk+0xfe>
    1a66:	f6 01       	movw	r30, r12
    1a68:	9e 01       	movw	r18, r28
    1a6a:	2f 5d       	subi	r18, 0xDF	; 223
    1a6c:	3f 4f       	sbci	r19, 0xFF	; 255
    1a6e:	80 81       	ld	r24, Z
    1a70:	80 95       	com	r24
    1a72:	81 93       	st	Z+, r24
    1a74:	2e 17       	cp	r18, r30
    1a76:	3f 07       	cpc	r19, r31
    1a78:	d1 f7       	brne	.-12     	; 0x1a6e <conv_brk+0xd8>
    1a7a:	f2 cf       	rjmp	.-28     	; 0x1a60 <conv_brk+0xca>
    1a7c:	e1 14       	cp	r14, r1
    1a7e:	f1 04       	cpc	r15, r1
    1a80:	29 f0       	breq	.+10     	; 0x1a8c <conv_brk+0xf6>
    1a82:	d7 01       	movw	r26, r14
    1a84:	8c 93       	st	X, r24
    1a86:	f7 01       	movw	r30, r14
    1a88:	31 96       	adiw	r30, 0x01	; 1
    1a8a:	7f 01       	movw	r14, r30
    1a8c:	9a 94       	dec	r9
    1a8e:	81 2c       	mov	r8, r1
    1a90:	99 20       	and	r9, r9
    1a92:	f9 f0       	breq	.+62     	; 0x1ad2 <conv_brk+0x13c>
    1a94:	c5 01       	movw	r24, r10
    1a96:	0e 94 c4 0e 	call	0x1d88	; 0x1d88 <fgetc>
    1a9a:	97 fd       	sbrc	r25, 7
    1a9c:	18 c0       	rjmp	.+48     	; 0x1ace <conv_brk+0x138>
    1a9e:	fc 01       	movw	r30, r24
    1aa0:	ff 27       	eor	r31, r31
    1aa2:	23 e0       	ldi	r18, 0x03	; 3
    1aa4:	f5 95       	asr	r31
    1aa6:	e7 95       	ror	r30
    1aa8:	2a 95       	dec	r18
    1aaa:	e1 f7       	brne	.-8      	; 0x1aa4 <conv_brk+0x10e>
    1aac:	ec 0d       	add	r30, r12
    1aae:	fd 1d       	adc	r31, r13
    1ab0:	20 81       	ld	r18, Z
    1ab2:	30 e0       	ldi	r19, 0x00	; 0
    1ab4:	ac 01       	movw	r20, r24
    1ab6:	47 70       	andi	r20, 0x07	; 7
    1ab8:	55 27       	eor	r21, r21
    1aba:	02 c0       	rjmp	.+4      	; 0x1ac0 <conv_brk+0x12a>
    1abc:	35 95       	asr	r19
    1abe:	27 95       	ror	r18
    1ac0:	4a 95       	dec	r20
    1ac2:	e2 f7       	brpl	.-8      	; 0x1abc <conv_brk+0x126>
    1ac4:	20 fd       	sbrc	r18, 0
    1ac6:	da cf       	rjmp	.-76     	; 0x1a7c <conv_brk+0xe6>
    1ac8:	b5 01       	movw	r22, r10
    1aca:	0e 94 3e 0f 	call	0x1e7c	; 0x1e7c <ungetc>
    1ace:	81 10       	cpse	r8, r1
    1ad0:	87 cf       	rjmp	.-242    	; 0x19e0 <conv_brk+0x4a>
    1ad2:	e1 14       	cp	r14, r1
    1ad4:	f1 04       	cpc	r15, r1
    1ad6:	11 f0       	breq	.+4      	; 0x1adc <conv_brk+0x146>
    1ad8:	d7 01       	movw	r26, r14
    1ada:	1c 92       	st	X, r1
    1adc:	c8 01       	movw	r24, r16
    1ade:	15 c0       	rjmp	.+42     	; 0x1b0a <conv_brk+0x174>
    1ae0:	42 2f       	mov	r20, r18
    1ae2:	46 95       	lsr	r20
    1ae4:	46 95       	lsr	r20
    1ae6:	46 95       	lsr	r20
    1ae8:	d6 01       	movw	r26, r12
    1aea:	a4 0f       	add	r26, r20
    1aec:	b1 1d       	adc	r27, r1
    1aee:	42 2f       	mov	r20, r18
    1af0:	47 70       	andi	r20, 0x07	; 7
    1af2:	8b 01       	movw	r16, r22
    1af4:	02 c0       	rjmp	.+4      	; 0x1afa <conv_brk+0x164>
    1af6:	00 0f       	add	r16, r16
    1af8:	11 1f       	adc	r17, r17
    1afa:	4a 95       	dec	r20
    1afc:	e2 f7       	brpl	.-8      	; 0x1af6 <conv_brk+0x160>
    1afe:	a8 01       	movw	r20, r16
    1b00:	5c 91       	ld	r21, X
    1b02:	45 2b       	or	r20, r21
    1b04:	4c 93       	st	X, r20
    1b06:	62 2e       	mov	r6, r18
    1b08:	a2 cf       	rjmp	.-188    	; 0x1a4e <conv_brk+0xb8>
    1b0a:	a0 96       	adiw	r28, 0x20	; 32
    1b0c:	ef e0       	ldi	r30, 0x0F	; 15
    1b0e:	0c 94 d7 0f 	jmp	0x1fae	; 0x1fae <__epilogue_restores__+0x6>

00001b12 <vfscanf>:
    1b12:	a0 e0       	ldi	r26, 0x00	; 0
    1b14:	b0 e0       	ldi	r27, 0x00	; 0
    1b16:	ef e8       	ldi	r30, 0x8F	; 143
    1b18:	fd e0       	ldi	r31, 0x0D	; 13
    1b1a:	0c 94 bb 0f 	jmp	0x1f76	; 0x1f76 <__prologue_saves__+0x6>
    1b1e:	6c 01       	movw	r12, r24
    1b20:	eb 01       	movw	r28, r22
    1b22:	5a 01       	movw	r10, r20
    1b24:	fc 01       	movw	r30, r24
    1b26:	17 82       	std	Z+7, r1	; 0x07
    1b28:	16 82       	std	Z+6, r1	; 0x06
    1b2a:	51 2c       	mov	r5, r1
    1b2c:	f6 01       	movw	r30, r12
    1b2e:	e3 80       	ldd	r14, Z+3	; 0x03
    1b30:	fe 01       	movw	r30, r28
    1b32:	e3 fc       	sbrc	r14, 3
    1b34:	85 91       	lpm	r24, Z+
    1b36:	e3 fe       	sbrs	r14, 3
    1b38:	81 91       	ld	r24, Z+
    1b3a:	18 2f       	mov	r17, r24
    1b3c:	ef 01       	movw	r28, r30
    1b3e:	88 23       	and	r24, r24
    1b40:	09 f4       	brne	.+2      	; 0x1b44 <vfscanf+0x32>
    1b42:	ee c0       	rjmp	.+476    	; 0x1d20 <vfscanf+0x20e>
    1b44:	90 e0       	ldi	r25, 0x00	; 0
    1b46:	0e 94 9a 0e 	call	0x1d34	; 0x1d34 <isspace>
    1b4a:	89 2b       	or	r24, r25
    1b4c:	21 f0       	breq	.+8      	; 0x1b56 <vfscanf+0x44>
    1b4e:	c6 01       	movw	r24, r12
    1b50:	0e 94 20 0c 	call	0x1840	; 0x1840 <skip_spaces>
    1b54:	eb cf       	rjmp	.-42     	; 0x1b2c <vfscanf+0x1a>
    1b56:	15 32       	cpi	r17, 0x25	; 37
    1b58:	41 f4       	brne	.+16     	; 0x1b6a <vfscanf+0x58>
    1b5a:	fe 01       	movw	r30, r28
    1b5c:	e3 fc       	sbrc	r14, 3
    1b5e:	15 91       	lpm	r17, Z+
    1b60:	e3 fe       	sbrs	r14, 3
    1b62:	11 91       	ld	r17, Z+
    1b64:	ef 01       	movw	r28, r30
    1b66:	15 32       	cpi	r17, 0x25	; 37
    1b68:	81 f4       	brne	.+32     	; 0x1b8a <vfscanf+0x78>
    1b6a:	c6 01       	movw	r24, r12
    1b6c:	0e 94 c4 0e 	call	0x1d88	; 0x1d88 <fgetc>
    1b70:	97 fd       	sbrc	r25, 7
    1b72:	d4 c0       	rjmp	.+424    	; 0x1d1c <vfscanf+0x20a>
    1b74:	41 2f       	mov	r20, r17
    1b76:	50 e0       	ldi	r21, 0x00	; 0
    1b78:	9c 01       	movw	r18, r24
    1b7a:	33 27       	eor	r19, r19
    1b7c:	24 17       	cp	r18, r20
    1b7e:	35 07       	cpc	r19, r21
    1b80:	a9 f2       	breq	.-86     	; 0x1b2c <vfscanf+0x1a>
    1b82:	b6 01       	movw	r22, r12
    1b84:	0e 94 3e 0f 	call	0x1e7c	; 0x1e7c <ungetc>
    1b88:	cb c0       	rjmp	.+406    	; 0x1d20 <vfscanf+0x20e>
    1b8a:	1a 32       	cpi	r17, 0x2A	; 42
    1b8c:	39 f4       	brne	.+14     	; 0x1b9c <vfscanf+0x8a>
    1b8e:	e3 fc       	sbrc	r14, 3
    1b90:	15 91       	lpm	r17, Z+
    1b92:	e3 fe       	sbrs	r14, 3
    1b94:	11 91       	ld	r17, Z+
    1b96:	ef 01       	movw	r28, r30
    1b98:	01 e0       	ldi	r16, 0x01	; 1
    1b9a:	01 c0       	rjmp	.+2      	; 0x1b9e <vfscanf+0x8c>
    1b9c:	00 e0       	ldi	r16, 0x00	; 0
    1b9e:	f1 2c       	mov	r15, r1
    1ba0:	20 ed       	ldi	r18, 0xD0	; 208
    1ba2:	21 0f       	add	r18, r17
    1ba4:	2a 30       	cpi	r18, 0x0A	; 10
    1ba6:	80 f4       	brcc	.+32     	; 0x1bc8 <vfscanf+0xb6>
    1ba8:	02 60       	ori	r16, 0x02	; 2
    1baa:	6f 2d       	mov	r22, r15
    1bac:	70 e0       	ldi	r23, 0x00	; 0
    1bae:	80 e0       	ldi	r24, 0x00	; 0
    1bb0:	90 e0       	ldi	r25, 0x00	; 0
    1bb2:	40 e2       	ldi	r20, 0x20	; 32
    1bb4:	0e 94 f9 0b 	call	0x17f2	; 0x17f2 <mulacc>
    1bb8:	f6 2e       	mov	r15, r22
    1bba:	fe 01       	movw	r30, r28
    1bbc:	e3 fc       	sbrc	r14, 3
    1bbe:	15 91       	lpm	r17, Z+
    1bc0:	e3 fe       	sbrs	r14, 3
    1bc2:	11 91       	ld	r17, Z+
    1bc4:	ef 01       	movw	r28, r30
    1bc6:	ec cf       	rjmp	.-40     	; 0x1ba0 <vfscanf+0x8e>
    1bc8:	01 ff       	sbrs	r16, 1
    1bca:	03 c0       	rjmp	.+6      	; 0x1bd2 <vfscanf+0xc0>
    1bcc:	f1 10       	cpse	r15, r1
    1bce:	03 c0       	rjmp	.+6      	; 0x1bd6 <vfscanf+0xc4>
    1bd0:	a7 c0       	rjmp	.+334    	; 0x1d20 <vfscanf+0x20e>
    1bd2:	ff 24       	eor	r15, r15
    1bd4:	fa 94       	dec	r15
    1bd6:	18 36       	cpi	r17, 0x68	; 104
    1bd8:	19 f0       	breq	.+6      	; 0x1be0 <vfscanf+0xce>
    1bda:	1c 36       	cpi	r17, 0x6C	; 108
    1bdc:	51 f0       	breq	.+20     	; 0x1bf2 <vfscanf+0xe0>
    1bde:	10 c0       	rjmp	.+32     	; 0x1c00 <vfscanf+0xee>
    1be0:	fe 01       	movw	r30, r28
    1be2:	e3 fc       	sbrc	r14, 3
    1be4:	15 91       	lpm	r17, Z+
    1be6:	e3 fe       	sbrs	r14, 3
    1be8:	11 91       	ld	r17, Z+
    1bea:	ef 01       	movw	r28, r30
    1bec:	18 36       	cpi	r17, 0x68	; 104
    1bee:	41 f4       	brne	.+16     	; 0x1c00 <vfscanf+0xee>
    1bf0:	08 60       	ori	r16, 0x08	; 8
    1bf2:	04 60       	ori	r16, 0x04	; 4
    1bf4:	fe 01       	movw	r30, r28
    1bf6:	e3 fc       	sbrc	r14, 3
    1bf8:	15 91       	lpm	r17, Z+
    1bfa:	e3 fe       	sbrs	r14, 3
    1bfc:	11 91       	ld	r17, Z+
    1bfe:	ef 01       	movw	r28, r30
    1c00:	11 23       	and	r17, r17
    1c02:	09 f4       	brne	.+2      	; 0x1c06 <vfscanf+0xf4>
    1c04:	8d c0       	rjmp	.+282    	; 0x1d20 <vfscanf+0x20e>
    1c06:	61 2f       	mov	r22, r17
    1c08:	70 e0       	ldi	r23, 0x00	; 0
    1c0a:	84 e5       	ldi	r24, 0x54	; 84
    1c0c:	90 e0       	ldi	r25, 0x00	; 0
    1c0e:	0e 94 a3 0e 	call	0x1d46	; 0x1d46 <strchr_P>
    1c12:	89 2b       	or	r24, r25
    1c14:	09 f4       	brne	.+2      	; 0x1c18 <vfscanf+0x106>
    1c16:	84 c0       	rjmp	.+264    	; 0x1d20 <vfscanf+0x20e>
    1c18:	00 fd       	sbrc	r16, 0
    1c1a:	07 c0       	rjmp	.+14     	; 0x1c2a <vfscanf+0x118>
    1c1c:	f5 01       	movw	r30, r10
    1c1e:	80 80       	ld	r8, Z
    1c20:	91 80       	ldd	r9, Z+1	; 0x01
    1c22:	c5 01       	movw	r24, r10
    1c24:	02 96       	adiw	r24, 0x02	; 2
    1c26:	5c 01       	movw	r10, r24
    1c28:	02 c0       	rjmp	.+4      	; 0x1c2e <vfscanf+0x11c>
    1c2a:	81 2c       	mov	r8, r1
    1c2c:	91 2c       	mov	r9, r1
    1c2e:	1e 36       	cpi	r17, 0x6E	; 110
    1c30:	51 f4       	brne	.+20     	; 0x1c46 <vfscanf+0x134>
    1c32:	f6 01       	movw	r30, r12
    1c34:	46 81       	ldd	r20, Z+6	; 0x06
    1c36:	57 81       	ldd	r21, Z+7	; 0x07
    1c38:	60 e0       	ldi	r22, 0x00	; 0
    1c3a:	70 e0       	ldi	r23, 0x00	; 0
    1c3c:	20 2f       	mov	r18, r16
    1c3e:	c4 01       	movw	r24, r8
    1c40:	0e 94 ed 0b 	call	0x17da	; 0x17da <putval>
    1c44:	73 cf       	rjmp	.-282    	; 0x1b2c <vfscanf+0x1a>
    1c46:	13 36       	cpi	r17, 0x63	; 99
    1c48:	a9 f4       	brne	.+42     	; 0x1c74 <vfscanf+0x162>
    1c4a:	01 fd       	sbrc	r16, 1
    1c4c:	02 c0       	rjmp	.+4      	; 0x1c52 <vfscanf+0x140>
    1c4e:	ff 24       	eor	r15, r15
    1c50:	f3 94       	inc	r15
    1c52:	c6 01       	movw	r24, r12
    1c54:	0e 94 c4 0e 	call	0x1d88	; 0x1d88 <fgetc>
    1c58:	97 fd       	sbrc	r25, 7
    1c5a:	60 c0       	rjmp	.+192    	; 0x1d1c <vfscanf+0x20a>
    1c5c:	81 14       	cp	r8, r1
    1c5e:	91 04       	cpc	r9, r1
    1c60:	29 f0       	breq	.+10     	; 0x1c6c <vfscanf+0x15a>
    1c62:	f4 01       	movw	r30, r8
    1c64:	80 83       	st	Z, r24
    1c66:	c4 01       	movw	r24, r8
    1c68:	01 96       	adiw	r24, 0x01	; 1
    1c6a:	4c 01       	movw	r8, r24
    1c6c:	fa 94       	dec	r15
    1c6e:	f1 10       	cpse	r15, r1
    1c70:	f0 cf       	rjmp	.-32     	; 0x1c52 <vfscanf+0x140>
    1c72:	50 c0       	rjmp	.+160    	; 0x1d14 <vfscanf+0x202>
    1c74:	1b 35       	cpi	r17, 0x5B	; 91
    1c76:	59 f4       	brne	.+22     	; 0x1c8e <vfscanf+0x17c>
    1c78:	9e 01       	movw	r18, r28
    1c7a:	a4 01       	movw	r20, r8
    1c7c:	6f 2d       	mov	r22, r15
    1c7e:	c6 01       	movw	r24, r12
    1c80:	0e 94 cb 0c 	call	0x1996	; 0x1996 <conv_brk>
    1c84:	ec 01       	movw	r28, r24
    1c86:	89 2b       	or	r24, r25
    1c88:	09 f0       	breq	.+2      	; 0x1c8c <vfscanf+0x17a>
    1c8a:	44 c0       	rjmp	.+136    	; 0x1d14 <vfscanf+0x202>
    1c8c:	3e c0       	rjmp	.+124    	; 0x1d0a <vfscanf+0x1f8>
    1c8e:	c6 01       	movw	r24, r12
    1c90:	0e 94 20 0c 	call	0x1840	; 0x1840 <skip_spaces>
    1c94:	97 fd       	sbrc	r25, 7
    1c96:	42 c0       	rjmp	.+132    	; 0x1d1c <vfscanf+0x20a>
    1c98:	1f 36       	cpi	r17, 0x6F	; 111
    1c9a:	61 f1       	breq	.+88     	; 0x1cf4 <vfscanf+0x1e2>
    1c9c:	28 f4       	brcc	.+10     	; 0x1ca8 <vfscanf+0x196>
    1c9e:	14 36       	cpi	r17, 0x64	; 100
    1ca0:	39 f1       	breq	.+78     	; 0x1cf0 <vfscanf+0x1de>
    1ca2:	19 36       	cpi	r17, 0x69	; 105
    1ca4:	51 f1       	breq	.+84     	; 0x1cfa <vfscanf+0x1e8>
    1ca6:	28 c0       	rjmp	.+80     	; 0x1cf8 <vfscanf+0x1e6>
    1ca8:	13 37       	cpi	r17, 0x73	; 115
    1caa:	71 f0       	breq	.+28     	; 0x1cc8 <vfscanf+0x1b6>
    1cac:	15 37       	cpi	r17, 0x75	; 117
    1cae:	01 f1       	breq	.+64     	; 0x1cf0 <vfscanf+0x1de>
    1cb0:	23 c0       	rjmp	.+70     	; 0x1cf8 <vfscanf+0x1e6>
    1cb2:	81 14       	cp	r8, r1
    1cb4:	91 04       	cpc	r9, r1
    1cb6:	29 f0       	breq	.+10     	; 0x1cc2 <vfscanf+0x1b0>
    1cb8:	f4 01       	movw	r30, r8
    1cba:	60 82       	st	Z, r6
    1cbc:	c4 01       	movw	r24, r8
    1cbe:	01 96       	adiw	r24, 0x01	; 1
    1cc0:	4c 01       	movw	r8, r24
    1cc2:	fa 94       	dec	r15
    1cc4:	ff 20       	and	r15, r15
    1cc6:	71 f0       	breq	.+28     	; 0x1ce4 <vfscanf+0x1d2>
    1cc8:	c6 01       	movw	r24, r12
    1cca:	0e 94 c4 0e 	call	0x1d88	; 0x1d88 <fgetc>
    1cce:	3c 01       	movw	r6, r24
    1cd0:	97 fd       	sbrc	r25, 7
    1cd2:	08 c0       	rjmp	.+16     	; 0x1ce4 <vfscanf+0x1d2>
    1cd4:	0e 94 9a 0e 	call	0x1d34	; 0x1d34 <isspace>
    1cd8:	89 2b       	or	r24, r25
    1cda:	59 f3       	breq	.-42     	; 0x1cb2 <vfscanf+0x1a0>
    1cdc:	b6 01       	movw	r22, r12
    1cde:	c3 01       	movw	r24, r6
    1ce0:	0e 94 3e 0f 	call	0x1e7c	; 0x1e7c <ungetc>
    1ce4:	81 14       	cp	r8, r1
    1ce6:	91 04       	cpc	r9, r1
    1ce8:	a9 f0       	breq	.+42     	; 0x1d14 <vfscanf+0x202>
    1cea:	f4 01       	movw	r30, r8
    1cec:	10 82       	st	Z, r1
    1cee:	12 c0       	rjmp	.+36     	; 0x1d14 <vfscanf+0x202>
    1cf0:	00 62       	ori	r16, 0x20	; 32
    1cf2:	03 c0       	rjmp	.+6      	; 0x1cfa <vfscanf+0x1e8>
    1cf4:	00 61       	ori	r16, 0x10	; 16
    1cf6:	01 c0       	rjmp	.+2      	; 0x1cfa <vfscanf+0x1e8>
    1cf8:	00 64       	ori	r16, 0x40	; 64
    1cfa:	20 2f       	mov	r18, r16
    1cfc:	a4 01       	movw	r20, r8
    1cfe:	6f 2d       	mov	r22, r15
    1d00:	c6 01       	movw	r24, r12
    1d02:	0e 94 39 0c 	call	0x1872	; 0x1872 <conv_int>
    1d06:	81 11       	cpse	r24, r1
    1d08:	05 c0       	rjmp	.+10     	; 0x1d14 <vfscanf+0x202>
    1d0a:	f6 01       	movw	r30, r12
    1d0c:	83 81       	ldd	r24, Z+3	; 0x03
    1d0e:	80 73       	andi	r24, 0x30	; 48
    1d10:	29 f4       	brne	.+10     	; 0x1d1c <vfscanf+0x20a>
    1d12:	06 c0       	rjmp	.+12     	; 0x1d20 <vfscanf+0x20e>
    1d14:	00 fd       	sbrc	r16, 0
    1d16:	0a cf       	rjmp	.-492    	; 0x1b2c <vfscanf+0x1a>
    1d18:	53 94       	inc	r5
    1d1a:	08 cf       	rjmp	.-496    	; 0x1b2c <vfscanf+0x1a>
    1d1c:	55 20       	and	r5, r5
    1d1e:	19 f0       	breq	.+6      	; 0x1d26 <vfscanf+0x214>
    1d20:	85 2d       	mov	r24, r5
    1d22:	90 e0       	ldi	r25, 0x00	; 0
    1d24:	02 c0       	rjmp	.+4      	; 0x1d2a <vfscanf+0x218>
    1d26:	8f ef       	ldi	r24, 0xFF	; 255
    1d28:	9f ef       	ldi	r25, 0xFF	; 255
    1d2a:	cd b7       	in	r28, 0x3d	; 61
    1d2c:	de b7       	in	r29, 0x3e	; 62
    1d2e:	ef e0       	ldi	r30, 0x0F	; 15
    1d30:	0c 94 d7 0f 	jmp	0x1fae	; 0x1fae <__epilogue_restores__+0x6>

00001d34 <isspace>:
    1d34:	91 11       	cpse	r25, r1
    1d36:	0c 94 b5 0f 	jmp	0x1f6a	; 0x1f6a <__ctype_isfalse>
    1d3a:	80 32       	cpi	r24, 0x20	; 32
    1d3c:	19 f0       	breq	.+6      	; 0x1d44 <isspace+0x10>
    1d3e:	89 50       	subi	r24, 0x09	; 9
    1d40:	85 50       	subi	r24, 0x05	; 5
    1d42:	c8 f7       	brcc	.-14     	; 0x1d36 <isspace+0x2>
    1d44:	08 95       	ret

00001d46 <strchr_P>:
    1d46:	fc 01       	movw	r30, r24
    1d48:	05 90       	lpm	r0, Z+
    1d4a:	06 16       	cp	r0, r22
    1d4c:	21 f0       	breq	.+8      	; 0x1d56 <strchr_P+0x10>
    1d4e:	00 20       	and	r0, r0
    1d50:	d9 f7       	brne	.-10     	; 0x1d48 <strchr_P+0x2>
    1d52:	c0 01       	movw	r24, r0
    1d54:	08 95       	ret
    1d56:	31 97       	sbiw	r30, 0x01	; 1
    1d58:	cf 01       	movw	r24, r30
    1d5a:	08 95       	ret

00001d5c <strnlen_P>:
    1d5c:	fc 01       	movw	r30, r24
    1d5e:	05 90       	lpm	r0, Z+
    1d60:	61 50       	subi	r22, 0x01	; 1
    1d62:	70 40       	sbci	r23, 0x00	; 0
    1d64:	01 10       	cpse	r0, r1
    1d66:	d8 f7       	brcc	.-10     	; 0x1d5e <strnlen_P+0x2>
    1d68:	80 95       	com	r24
    1d6a:	90 95       	com	r25
    1d6c:	8e 0f       	add	r24, r30
    1d6e:	9f 1f       	adc	r25, r31
    1d70:	08 95       	ret

00001d72 <strnlen>:
    1d72:	fc 01       	movw	r30, r24
    1d74:	61 50       	subi	r22, 0x01	; 1
    1d76:	70 40       	sbci	r23, 0x00	; 0
    1d78:	01 90       	ld	r0, Z+
    1d7a:	01 10       	cpse	r0, r1
    1d7c:	d8 f7       	brcc	.-10     	; 0x1d74 <strnlen+0x2>
    1d7e:	80 95       	com	r24
    1d80:	90 95       	com	r25
    1d82:	8e 0f       	add	r24, r30
    1d84:	9f 1f       	adc	r25, r31
    1d86:	08 95       	ret

00001d88 <fgetc>:
    1d88:	cf 93       	push	r28
    1d8a:	df 93       	push	r29
    1d8c:	ec 01       	movw	r28, r24
    1d8e:	2b 81       	ldd	r18, Y+3	; 0x03
    1d90:	20 ff       	sbrs	r18, 0
    1d92:	33 c0       	rjmp	.+102    	; 0x1dfa <fgetc+0x72>
    1d94:	26 ff       	sbrs	r18, 6
    1d96:	0a c0       	rjmp	.+20     	; 0x1dac <fgetc+0x24>
    1d98:	2f 7b       	andi	r18, 0xBF	; 191
    1d9a:	2b 83       	std	Y+3, r18	; 0x03
    1d9c:	8e 81       	ldd	r24, Y+6	; 0x06
    1d9e:	9f 81       	ldd	r25, Y+7	; 0x07
    1da0:	01 96       	adiw	r24, 0x01	; 1
    1da2:	9f 83       	std	Y+7, r25	; 0x07
    1da4:	8e 83       	std	Y+6, r24	; 0x06
    1da6:	8a 81       	ldd	r24, Y+2	; 0x02
    1da8:	90 e0       	ldi	r25, 0x00	; 0
    1daa:	29 c0       	rjmp	.+82     	; 0x1dfe <fgetc+0x76>
    1dac:	22 ff       	sbrs	r18, 2
    1dae:	0f c0       	rjmp	.+30     	; 0x1dce <fgetc+0x46>
    1db0:	e8 81       	ld	r30, Y
    1db2:	f9 81       	ldd	r31, Y+1	; 0x01
    1db4:	80 81       	ld	r24, Z
    1db6:	08 2e       	mov	r0, r24
    1db8:	00 0c       	add	r0, r0
    1dba:	99 0b       	sbc	r25, r25
    1dbc:	00 97       	sbiw	r24, 0x00	; 0
    1dbe:	19 f4       	brne	.+6      	; 0x1dc6 <fgetc+0x3e>
    1dc0:	20 62       	ori	r18, 0x20	; 32
    1dc2:	2b 83       	std	Y+3, r18	; 0x03
    1dc4:	1a c0       	rjmp	.+52     	; 0x1dfa <fgetc+0x72>
    1dc6:	31 96       	adiw	r30, 0x01	; 1
    1dc8:	f9 83       	std	Y+1, r31	; 0x01
    1dca:	e8 83       	st	Y, r30
    1dcc:	0e c0       	rjmp	.+28     	; 0x1dea <fgetc+0x62>
    1dce:	ea 85       	ldd	r30, Y+10	; 0x0a
    1dd0:	fb 85       	ldd	r31, Y+11	; 0x0b
    1dd2:	09 95       	icall
    1dd4:	97 ff       	sbrs	r25, 7
    1dd6:	09 c0       	rjmp	.+18     	; 0x1dea <fgetc+0x62>
    1dd8:	2b 81       	ldd	r18, Y+3	; 0x03
    1dda:	01 96       	adiw	r24, 0x01	; 1
    1ddc:	11 f0       	breq	.+4      	; 0x1de2 <fgetc+0x5a>
    1dde:	80 e2       	ldi	r24, 0x20	; 32
    1de0:	01 c0       	rjmp	.+2      	; 0x1de4 <fgetc+0x5c>
    1de2:	80 e1       	ldi	r24, 0x10	; 16
    1de4:	82 2b       	or	r24, r18
    1de6:	8b 83       	std	Y+3, r24	; 0x03
    1de8:	08 c0       	rjmp	.+16     	; 0x1dfa <fgetc+0x72>
    1dea:	2e 81       	ldd	r18, Y+6	; 0x06
    1dec:	3f 81       	ldd	r19, Y+7	; 0x07
    1dee:	2f 5f       	subi	r18, 0xFF	; 255
    1df0:	3f 4f       	sbci	r19, 0xFF	; 255
    1df2:	3f 83       	std	Y+7, r19	; 0x07
    1df4:	2e 83       	std	Y+6, r18	; 0x06
    1df6:	99 27       	eor	r25, r25
    1df8:	02 c0       	rjmp	.+4      	; 0x1dfe <fgetc+0x76>
    1dfa:	8f ef       	ldi	r24, 0xFF	; 255
    1dfc:	9f ef       	ldi	r25, 0xFF	; 255
    1dfe:	df 91       	pop	r29
    1e00:	cf 91       	pop	r28
    1e02:	08 95       	ret

00001e04 <fputc>:
    1e04:	0f 93       	push	r16
    1e06:	1f 93       	push	r17
    1e08:	cf 93       	push	r28
    1e0a:	df 93       	push	r29
    1e0c:	fb 01       	movw	r30, r22
    1e0e:	23 81       	ldd	r18, Z+3	; 0x03
    1e10:	21 fd       	sbrc	r18, 1
    1e12:	03 c0       	rjmp	.+6      	; 0x1e1a <fputc+0x16>
    1e14:	8f ef       	ldi	r24, 0xFF	; 255
    1e16:	9f ef       	ldi	r25, 0xFF	; 255
    1e18:	2c c0       	rjmp	.+88     	; 0x1e72 <fputc+0x6e>
    1e1a:	22 ff       	sbrs	r18, 2
    1e1c:	16 c0       	rjmp	.+44     	; 0x1e4a <fputc+0x46>
    1e1e:	46 81       	ldd	r20, Z+6	; 0x06
    1e20:	57 81       	ldd	r21, Z+7	; 0x07
    1e22:	24 81       	ldd	r18, Z+4	; 0x04
    1e24:	35 81       	ldd	r19, Z+5	; 0x05
    1e26:	42 17       	cp	r20, r18
    1e28:	53 07       	cpc	r21, r19
    1e2a:	44 f4       	brge	.+16     	; 0x1e3c <fputc+0x38>
    1e2c:	a0 81       	ld	r26, Z
    1e2e:	b1 81       	ldd	r27, Z+1	; 0x01
    1e30:	9d 01       	movw	r18, r26
    1e32:	2f 5f       	subi	r18, 0xFF	; 255
    1e34:	3f 4f       	sbci	r19, 0xFF	; 255
    1e36:	31 83       	std	Z+1, r19	; 0x01
    1e38:	20 83       	st	Z, r18
    1e3a:	8c 93       	st	X, r24
    1e3c:	26 81       	ldd	r18, Z+6	; 0x06
    1e3e:	37 81       	ldd	r19, Z+7	; 0x07
    1e40:	2f 5f       	subi	r18, 0xFF	; 255
    1e42:	3f 4f       	sbci	r19, 0xFF	; 255
    1e44:	37 83       	std	Z+7, r19	; 0x07
    1e46:	26 83       	std	Z+6, r18	; 0x06
    1e48:	14 c0       	rjmp	.+40     	; 0x1e72 <fputc+0x6e>
    1e4a:	8b 01       	movw	r16, r22
    1e4c:	ec 01       	movw	r28, r24
    1e4e:	fb 01       	movw	r30, r22
    1e50:	00 84       	ldd	r0, Z+8	; 0x08
    1e52:	f1 85       	ldd	r31, Z+9	; 0x09
    1e54:	e0 2d       	mov	r30, r0
    1e56:	09 95       	icall
    1e58:	89 2b       	or	r24, r25
    1e5a:	e1 f6       	brne	.-72     	; 0x1e14 <fputc+0x10>
    1e5c:	d8 01       	movw	r26, r16
    1e5e:	16 96       	adiw	r26, 0x06	; 6
    1e60:	8d 91       	ld	r24, X+
    1e62:	9c 91       	ld	r25, X
    1e64:	17 97       	sbiw	r26, 0x07	; 7
    1e66:	01 96       	adiw	r24, 0x01	; 1
    1e68:	17 96       	adiw	r26, 0x07	; 7
    1e6a:	9c 93       	st	X, r25
    1e6c:	8e 93       	st	-X, r24
    1e6e:	16 97       	sbiw	r26, 0x06	; 6
    1e70:	ce 01       	movw	r24, r28
    1e72:	df 91       	pop	r29
    1e74:	cf 91       	pop	r28
    1e76:	1f 91       	pop	r17
    1e78:	0f 91       	pop	r16
    1e7a:	08 95       	ret

00001e7c <ungetc>:
    1e7c:	fb 01       	movw	r30, r22
    1e7e:	23 81       	ldd	r18, Z+3	; 0x03
    1e80:	20 ff       	sbrs	r18, 0
    1e82:	12 c0       	rjmp	.+36     	; 0x1ea8 <ungetc+0x2c>
    1e84:	26 fd       	sbrc	r18, 6
    1e86:	10 c0       	rjmp	.+32     	; 0x1ea8 <ungetc+0x2c>
    1e88:	8f 3f       	cpi	r24, 0xFF	; 255
    1e8a:	3f ef       	ldi	r19, 0xFF	; 255
    1e8c:	93 07       	cpc	r25, r19
    1e8e:	61 f0       	breq	.+24     	; 0x1ea8 <ungetc+0x2c>
    1e90:	82 83       	std	Z+2, r24	; 0x02
    1e92:	2f 7d       	andi	r18, 0xDF	; 223
    1e94:	20 64       	ori	r18, 0x40	; 64
    1e96:	23 83       	std	Z+3, r18	; 0x03
    1e98:	26 81       	ldd	r18, Z+6	; 0x06
    1e9a:	37 81       	ldd	r19, Z+7	; 0x07
    1e9c:	21 50       	subi	r18, 0x01	; 1
    1e9e:	31 09       	sbc	r19, r1
    1ea0:	37 83       	std	Z+7, r19	; 0x07
    1ea2:	26 83       	std	Z+6, r18	; 0x06
    1ea4:	99 27       	eor	r25, r25
    1ea6:	08 95       	ret
    1ea8:	8f ef       	ldi	r24, 0xFF	; 255
    1eaa:	9f ef       	ldi	r25, 0xFF	; 255
    1eac:	08 95       	ret

00001eae <__ultoa_invert>:
    1eae:	fa 01       	movw	r30, r20
    1eb0:	aa 27       	eor	r26, r26
    1eb2:	28 30       	cpi	r18, 0x08	; 8
    1eb4:	51 f1       	breq	.+84     	; 0x1f0a <__ultoa_invert+0x5c>
    1eb6:	20 31       	cpi	r18, 0x10	; 16
    1eb8:	81 f1       	breq	.+96     	; 0x1f1a <__ultoa_invert+0x6c>
    1eba:	e8 94       	clt
    1ebc:	6f 93       	push	r22
    1ebe:	6e 7f       	andi	r22, 0xFE	; 254
    1ec0:	6e 5f       	subi	r22, 0xFE	; 254
    1ec2:	7f 4f       	sbci	r23, 0xFF	; 255
    1ec4:	8f 4f       	sbci	r24, 0xFF	; 255
    1ec6:	9f 4f       	sbci	r25, 0xFF	; 255
    1ec8:	af 4f       	sbci	r26, 0xFF	; 255
    1eca:	b1 e0       	ldi	r27, 0x01	; 1
    1ecc:	3e d0       	rcall	.+124    	; 0x1f4a <__ultoa_invert+0x9c>
    1ece:	b4 e0       	ldi	r27, 0x04	; 4
    1ed0:	3c d0       	rcall	.+120    	; 0x1f4a <__ultoa_invert+0x9c>
    1ed2:	67 0f       	add	r22, r23
    1ed4:	78 1f       	adc	r23, r24
    1ed6:	89 1f       	adc	r24, r25
    1ed8:	9a 1f       	adc	r25, r26
    1eda:	a1 1d       	adc	r26, r1
    1edc:	68 0f       	add	r22, r24
    1ede:	79 1f       	adc	r23, r25
    1ee0:	8a 1f       	adc	r24, r26
    1ee2:	91 1d       	adc	r25, r1
    1ee4:	a1 1d       	adc	r26, r1
    1ee6:	6a 0f       	add	r22, r26
    1ee8:	71 1d       	adc	r23, r1
    1eea:	81 1d       	adc	r24, r1
    1eec:	91 1d       	adc	r25, r1
    1eee:	a1 1d       	adc	r26, r1
    1ef0:	20 d0       	rcall	.+64     	; 0x1f32 <__ultoa_invert+0x84>
    1ef2:	09 f4       	brne	.+2      	; 0x1ef6 <__ultoa_invert+0x48>
    1ef4:	68 94       	set
    1ef6:	3f 91       	pop	r19
    1ef8:	2a e0       	ldi	r18, 0x0A	; 10
    1efa:	26 9f       	mul	r18, r22
    1efc:	11 24       	eor	r1, r1
    1efe:	30 19       	sub	r19, r0
    1f00:	30 5d       	subi	r19, 0xD0	; 208
    1f02:	31 93       	st	Z+, r19
    1f04:	de f6       	brtc	.-74     	; 0x1ebc <__ultoa_invert+0xe>
    1f06:	cf 01       	movw	r24, r30
    1f08:	08 95       	ret
    1f0a:	46 2f       	mov	r20, r22
    1f0c:	47 70       	andi	r20, 0x07	; 7
    1f0e:	40 5d       	subi	r20, 0xD0	; 208
    1f10:	41 93       	st	Z+, r20
    1f12:	b3 e0       	ldi	r27, 0x03	; 3
    1f14:	0f d0       	rcall	.+30     	; 0x1f34 <__ultoa_invert+0x86>
    1f16:	c9 f7       	brne	.-14     	; 0x1f0a <__ultoa_invert+0x5c>
    1f18:	f6 cf       	rjmp	.-20     	; 0x1f06 <__ultoa_invert+0x58>
    1f1a:	46 2f       	mov	r20, r22
    1f1c:	4f 70       	andi	r20, 0x0F	; 15
    1f1e:	40 5d       	subi	r20, 0xD0	; 208
    1f20:	4a 33       	cpi	r20, 0x3A	; 58
    1f22:	18 f0       	brcs	.+6      	; 0x1f2a <__ultoa_invert+0x7c>
    1f24:	49 5d       	subi	r20, 0xD9	; 217
    1f26:	31 fd       	sbrc	r19, 1
    1f28:	40 52       	subi	r20, 0x20	; 32
    1f2a:	41 93       	st	Z+, r20
    1f2c:	02 d0       	rcall	.+4      	; 0x1f32 <__ultoa_invert+0x84>
    1f2e:	a9 f7       	brne	.-22     	; 0x1f1a <__ultoa_invert+0x6c>
    1f30:	ea cf       	rjmp	.-44     	; 0x1f06 <__ultoa_invert+0x58>
    1f32:	b4 e0       	ldi	r27, 0x04	; 4
    1f34:	a6 95       	lsr	r26
    1f36:	97 95       	ror	r25
    1f38:	87 95       	ror	r24
    1f3a:	77 95       	ror	r23
    1f3c:	67 95       	ror	r22
    1f3e:	ba 95       	dec	r27
    1f40:	c9 f7       	brne	.-14     	; 0x1f34 <__ultoa_invert+0x86>
    1f42:	00 97       	sbiw	r24, 0x00	; 0
    1f44:	61 05       	cpc	r22, r1
    1f46:	71 05       	cpc	r23, r1
    1f48:	08 95       	ret
    1f4a:	9b 01       	movw	r18, r22
    1f4c:	ac 01       	movw	r20, r24
    1f4e:	0a 2e       	mov	r0, r26
    1f50:	06 94       	lsr	r0
    1f52:	57 95       	ror	r21
    1f54:	47 95       	ror	r20
    1f56:	37 95       	ror	r19
    1f58:	27 95       	ror	r18
    1f5a:	ba 95       	dec	r27
    1f5c:	c9 f7       	brne	.-14     	; 0x1f50 <__ultoa_invert+0xa2>
    1f5e:	62 0f       	add	r22, r18
    1f60:	73 1f       	adc	r23, r19
    1f62:	84 1f       	adc	r24, r20
    1f64:	95 1f       	adc	r25, r21
    1f66:	a0 1d       	adc	r26, r0
    1f68:	08 95       	ret

00001f6a <__ctype_isfalse>:
    1f6a:	99 27       	eor	r25, r25
    1f6c:	88 27       	eor	r24, r24

00001f6e <__ctype_istrue>:
    1f6e:	08 95       	ret

00001f70 <__prologue_saves__>:
    1f70:	2f 92       	push	r2
    1f72:	3f 92       	push	r3
    1f74:	4f 92       	push	r4
    1f76:	5f 92       	push	r5
    1f78:	6f 92       	push	r6
    1f7a:	7f 92       	push	r7
    1f7c:	8f 92       	push	r8
    1f7e:	9f 92       	push	r9
    1f80:	af 92       	push	r10
    1f82:	bf 92       	push	r11
    1f84:	cf 92       	push	r12
    1f86:	df 92       	push	r13
    1f88:	ef 92       	push	r14
    1f8a:	ff 92       	push	r15
    1f8c:	0f 93       	push	r16
    1f8e:	1f 93       	push	r17
    1f90:	cf 93       	push	r28
    1f92:	df 93       	push	r29
    1f94:	cd b7       	in	r28, 0x3d	; 61
    1f96:	de b7       	in	r29, 0x3e	; 62
    1f98:	ca 1b       	sub	r28, r26
    1f9a:	db 0b       	sbc	r29, r27
    1f9c:	0f b6       	in	r0, 0x3f	; 63
    1f9e:	f8 94       	cli
    1fa0:	de bf       	out	0x3e, r29	; 62
    1fa2:	0f be       	out	0x3f, r0	; 63
    1fa4:	cd bf       	out	0x3d, r28	; 61
    1fa6:	09 94       	ijmp

00001fa8 <__epilogue_restores__>:
    1fa8:	2a 88       	ldd	r2, Y+18	; 0x12
    1faa:	39 88       	ldd	r3, Y+17	; 0x11
    1fac:	48 88       	ldd	r4, Y+16	; 0x10
    1fae:	5f 84       	ldd	r5, Y+15	; 0x0f
    1fb0:	6e 84       	ldd	r6, Y+14	; 0x0e
    1fb2:	7d 84       	ldd	r7, Y+13	; 0x0d
    1fb4:	8c 84       	ldd	r8, Y+12	; 0x0c
    1fb6:	9b 84       	ldd	r9, Y+11	; 0x0b
    1fb8:	aa 84       	ldd	r10, Y+10	; 0x0a
    1fba:	b9 84       	ldd	r11, Y+9	; 0x09
    1fbc:	c8 84       	ldd	r12, Y+8	; 0x08
    1fbe:	df 80       	ldd	r13, Y+7	; 0x07
    1fc0:	ee 80       	ldd	r14, Y+6	; 0x06
    1fc2:	fd 80       	ldd	r15, Y+5	; 0x05
    1fc4:	0c 81       	ldd	r16, Y+4	; 0x04
    1fc6:	1b 81       	ldd	r17, Y+3	; 0x03
    1fc8:	aa 81       	ldd	r26, Y+2	; 0x02
    1fca:	b9 81       	ldd	r27, Y+1	; 0x01
    1fcc:	ce 0f       	add	r28, r30
    1fce:	d1 1d       	adc	r29, r1
    1fd0:	0f b6       	in	r0, 0x3f	; 63
    1fd2:	f8 94       	cli
    1fd4:	de bf       	out	0x3e, r29	; 62
    1fd6:	0f be       	out	0x3f, r0	; 63
    1fd8:	cd bf       	out	0x3d, r28	; 61
    1fda:	ed 01       	movw	r28, r26
    1fdc:	08 95       	ret

00001fde <_exit>:
    1fde:	f8 94       	cli

00001fe0 <__stop_program>:
    1fe0:	ff cf       	rjmp	.-2      	; 0x1fe0 <__stop_program>
